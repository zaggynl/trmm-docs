{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tactical RMM Documentation \u00b6 Tactical RMM is a remote monitoring & management tool for Windows computers, built with Django, Vue and Golang. It uses an agent written in Golang and integrates with MeshCentral LIVE DEMO \u00b6 Features \u00b6 Teamviewer-like remote desktop control Real-time remote shell Remote file browser (download and upload files) Remote command and script execution (batch, powershell and python scripts) Event log viewer Services management Windows patch management Automated checks with email/SMS alerting (cpu, disk, memory, services, scripts, event logs) Automated task runner (run scripts on a schedule) Remote software installation via chocolatey Software and hardware inventory Windows agent versions supported \u00b6 Windows 7, 8.1, 10, 11, Server 2008R2, 2012R2, 2016, 2019, 2022 Linux agent versions supported \u00b6 Any distro with systemd","title":"Home"},{"location":"#tactical-rmm-documentation","text":"Tactical RMM is a remote monitoring & management tool for Windows computers, built with Django, Vue and Golang. It uses an agent written in Golang and integrates with MeshCentral","title":"Tactical RMM Documentation"},{"location":"#live-demo","text":"","title":"LIVE DEMO"},{"location":"#features","text":"Teamviewer-like remote desktop control Real-time remote shell Remote file browser (download and upload files) Remote command and script execution (batch, powershell and python scripts) Event log viewer Services management Windows patch management Automated checks with email/SMS alerting (cpu, disk, memory, services, scripts, event logs) Automated task runner (run scripts on a schedule) Remote software installation via chocolatey Software and hardware inventory","title":"Features"},{"location":"#windows-agent-versions-supported","text":"Windows 7, 8.1, 10, 11, Server 2008R2, 2012R2, 2016, 2019, 2022","title":"Windows agent versions supported"},{"location":"#linux-agent-versions-supported","text":"Any distro with systemd","title":"Linux agent versions supported"},{"location":"3rdparty_anydesk/","text":"AnyDesk \u00b6 AnyDesk Integration \u00b6 Info You can setup a full automation policy to collect the machine GUID but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Agent Name = AnyNetID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = AnyDesk Control Description = Connect to a AnyDesk Session URL Pattern = anydesk:{{agent.AnyNetID}} Navigate to an agent with AnyDesk running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = AnyDesk - Get AnyNetID for client (this is a builtin script from script library) Descriptive name of task = Collects the AnyNetID for AnyDesk. Collector Task = CHECKED Custom Field to update = AnyNetID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > AnyDesk Control It launch the session in AnyDesk.","title":"AnyDesk"},{"location":"3rdparty_anydesk/#anydesk","text":"","title":"AnyDesk"},{"location":"3rdparty_anydesk/#anydesk-integration","text":"Info You can setup a full automation policy to collect the machine GUID but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Agent Name = AnyNetID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = AnyDesk Control Description = Connect to a AnyDesk Session URL Pattern = anydesk:{{agent.AnyNetID}} Navigate to an agent with AnyDesk running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = AnyDesk - Get AnyNetID for client (this is a builtin script from script library) Descriptive name of task = Collects the AnyNetID for AnyDesk. Collector Task = CHECKED Custom Field to update = AnyNetID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > AnyDesk Control It launch the session in AnyDesk.","title":"AnyDesk Integration"},{"location":"3rdparty_bitdefender_gravityzone/","text":"BitDefender GravityZone Deployment \u00b6 How to Deploy BitDefender GravityZone \u00b6 From the UI go to Settings > Global Settings > CUSTOM FIELDS > Clients Add a Custom Field First: Target = CLIENTS Name = bdurl Field Type = Text Log into your GravityZone and on the left hand side, select \"Packages\" under \"Network\". Select the client you are working with and click \"Send Download Links\" at the top. Copy the appropriate download link Paste download link into the bdurl when you right click your target clients name in the RMM. Right click the Agent you want to deploy to and Run Script . Select BitDefender GravityZone Install and set timeout for 1800 seconds. Install time will vary based on internet speed and other AV removal by BitDefender BEST deployment","title":"BitDefender GravityZone"},{"location":"3rdparty_bitdefender_gravityzone/#bitdefender-gravityzone-deployment","text":"","title":"BitDefender GravityZone Deployment"},{"location":"3rdparty_bitdefender_gravityzone/#how-to-deploy-bitdefender-gravityzone","text":"From the UI go to Settings > Global Settings > CUSTOM FIELDS > Clients Add a Custom Field First: Target = CLIENTS Name = bdurl Field Type = Text Log into your GravityZone and on the left hand side, select \"Packages\" under \"Network\". Select the client you are working with and click \"Send Download Links\" at the top. Copy the appropriate download link Paste download link into the bdurl when you right click your target clients name in the RMM. Right click the Agent you want to deploy to and Run Script . Select BitDefender GravityZone Install and set timeout for 1800 seconds. Install time will vary based on internet speed and other AV removal by BitDefender BEST deployment","title":"How to Deploy BitDefender GravityZone"},{"location":"3rdparty_grafana/","text":"Adding Grafana to Tactical RMM \u00b6 Adding graphical Dashboards to Tactical. See https://github.com/dinger1986/TRMM-Grafana","title":"Grafana"},{"location":"3rdparty_grafana/#adding-grafana-to-tactical-rmm","text":"Adding graphical Dashboards to Tactical. See https://github.com/dinger1986/TRMM-Grafana","title":"Adding Grafana to Tactical RMM"},{"location":"3rdparty_screenconnect/","text":"Screenconnect / Connectwise Control \u00b6 Connectwise Control Integration \u00b6 Info To make this work you will need the name of a the Service from one of your agents running a Screen Connect Guest. Info You can setup a full automation policy to collect the machine GUID but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Client Name = ScreenConnectService Field Type = Text Default Value = The name of your SC Service eg. ScreenConnect Client (XXXXXXXXXXXXXXXXX) Add Custom Field Target = Agent Name = ScreenConnectGUID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = ScreenConnect Description = Launch Screen Connect Session URL Pattern = https:// < your_screenconnect_fqdn_with_port > /Host#Access/All%20Machines//{{agent.ScreenConnectGUID}}/Join Navigate to an agent with ConnectWise Service running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = ScreenConnect - Get GUID for client (this is a builtin script from script library) Script argument = -serviceName {{client.ScreenConnectService}} Descriptive name of task = Collects the Machine GUID for ScreenConnect. Collector Task = CHECKED Custom Field to update = ScreenConectGUID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > ScreenConnect It should ask you to sign into your Connectwise Control server if you are not already logged in and launch the session. Install Screenconnect via Tactical \u00b6 Use the Screenconnect AIO script Install Tactical RMM via Screeconnect commands window \u00b6 Create a Deplopment under Agents > Manage Deployments Replace <deployment URL> below with your Deployment Download Link. x64 #!ps #maxlength=500000 #timeout=600000 Invoke-WebRequest \"<deployment URL>\" -OutFile ( New-Item -Path \"C:\\temp\\trmminstallx64.exe\" -Force ) $proc = Start-Process c:\\temp\\trmminstallx64.exe -ArgumentList '-silent' -PassThru Wait-Process -InputObject $proc if ($proc.ExitCode -ne 0) { Write-Warning \"$_ exited with status code $($proc.ExitCode)\" } Remove-Item -Path \"c:\\temp\\trmminstallx64.exe\" -Force x86 #!ps #maxlength=500000 #timeout=600000 Invoke-WebRequest \"<deployment URL>\" -OutFile ( New-Item -Path \"C:\\temp\\trmminstallx86.exe\" -Force ) $proc = Start-Process c:\\temp\\trmminstallx86.exe -ArgumentList '-silent' -PassThru Wait-Process -InputObject $proc if ($proc.ExitCode -ne 0) { Write-Warning \"$_ exited with status code $($proc.ExitCode)\" } Remove-Item -Path \"c:\\temp\\trmminstallx86.exe\" -Force","title":"Connectwise Control / Screenconnect"},{"location":"3rdparty_screenconnect/#screenconnect-connectwise-control","text":"","title":"Screenconnect / Connectwise Control"},{"location":"3rdparty_screenconnect/#connectwise-control-integration","text":"Info To make this work you will need the name of a the Service from one of your agents running a Screen Connect Guest. Info You can setup a full automation policy to collect the machine GUID but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Client Name = ScreenConnectService Field Type = Text Default Value = The name of your SC Service eg. ScreenConnect Client (XXXXXXXXXXXXXXXXX) Add Custom Field Target = Agent Name = ScreenConnectGUID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = ScreenConnect Description = Launch Screen Connect Session URL Pattern = https:// < your_screenconnect_fqdn_with_port > /Host#Access/All%20Machines//{{agent.ScreenConnectGUID}}/Join Navigate to an agent with ConnectWise Service running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = ScreenConnect - Get GUID for client (this is a builtin script from script library) Script argument = -serviceName {{client.ScreenConnectService}} Descriptive name of task = Collects the Machine GUID for ScreenConnect. Collector Task = CHECKED Custom Field to update = ScreenConectGUID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > ScreenConnect It should ask you to sign into your Connectwise Control server if you are not already logged in and launch the session.","title":"Connectwise Control Integration"},{"location":"3rdparty_screenconnect/#install-screenconnect-via-tactical","text":"Use the Screenconnect AIO script","title":"Install Screenconnect via Tactical"},{"location":"3rdparty_screenconnect/#install-tactical-rmm-via-screeconnect-commands-window","text":"Create a Deplopment under Agents > Manage Deployments Replace <deployment URL> below with your Deployment Download Link. x64 #!ps #maxlength=500000 #timeout=600000 Invoke-WebRequest \"<deployment URL>\" -OutFile ( New-Item -Path \"C:\\temp\\trmminstallx64.exe\" -Force ) $proc = Start-Process c:\\temp\\trmminstallx64.exe -ArgumentList '-silent' -PassThru Wait-Process -InputObject $proc if ($proc.ExitCode -ne 0) { Write-Warning \"$_ exited with status code $($proc.ExitCode)\" } Remove-Item -Path \"c:\\temp\\trmminstallx64.exe\" -Force x86 #!ps #maxlength=500000 #timeout=600000 Invoke-WebRequest \"<deployment URL>\" -OutFile ( New-Item -Path \"C:\\temp\\trmminstallx86.exe\" -Force ) $proc = Start-Process c:\\temp\\trmminstallx86.exe -ArgumentList '-silent' -PassThru Wait-Process -InputObject $proc if ($proc.ExitCode -ne 0) { Write-Warning \"$_ exited with status code $($proc.ExitCode)\" } Remove-Item -Path \"c:\\temp\\trmminstallx86.exe\" -Force","title":"Install Tactical RMM via Screeconnect commands window"},{"location":"3rdparty_splashtop/","text":"Splashtop \u00b6 Splashtop Integration \u00b6 From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Agent Name = SplashtopSUUID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = Splashtop Description = Connect to a Splashtop client URL Pattern = st-business://com.splashtop.business?account= & uuid={{agent.SplashtopSUUID}} & sessiontype=remote Navigate to an agent with Splashtop running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = Splashtop - Get SUUID for client (this is a builtin script from script library) Descriptive name of task = Obtain Splashtop SUUID from device registry. Collector Task = CHECKED Custom Field to update = SplashtopSUUID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > Splashtop","title":"Splashtop"},{"location":"3rdparty_splashtop/#splashtop","text":"","title":"Splashtop"},{"location":"3rdparty_splashtop/#splashtop-integration","text":"From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Agent Name = SplashtopSUUID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = Splashtop Description = Connect to a Splashtop client URL Pattern = st-business://com.splashtop.business?account= & uuid={{agent.SplashtopSUUID}} & sessiontype=remote Navigate to an agent with Splashtop running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = Splashtop - Get SUUID for client (this is a builtin script from script library) Descriptive name of task = Obtain Splashtop SUUID from device registry. Collector Task = CHECKED Custom Field to update = SplashtopSUUID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > Splashtop","title":"Splashtop Integration"},{"location":"3rdparty_teamviewer/","text":"TeamViewer \u00b6 TeamViewer Integration \u00b6 Info You can setup a full automation policy to collect the machine GUID but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Agent Name = TeamViewerClientID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = TeamViewer Control Description = Connect to a Team Viewer Session URL Pattern = https://start.teamviewer.com/device/{{agent.TeamViewerClientID}}/authorization/password/mode/control Navigate to an agent with TeamViewer running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = TeamViewer - Get ClientID for client (this is a builtin script from script library) Descriptive name of task = Collects the ClientID for TeamViewer. Collector Task = CHECKED Custom Field to update = TeamViewerClientID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > TeamViewer Control It launch the session and possibly promt for password in TeamViewer.","title":"TeamViewer"},{"location":"3rdparty_teamviewer/#teamviewer","text":"","title":"TeamViewer"},{"location":"3rdparty_teamviewer/#teamviewer-integration","text":"Info You can setup a full automation policy to collect the machine GUID but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Agent Name = TeamViewerClientID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = TeamViewer Control Description = Connect to a Team Viewer Session URL Pattern = https://start.teamviewer.com/device/{{agent.TeamViewerClientID}}/authorization/password/mode/control Navigate to an agent with TeamViewer running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = TeamViewer - Get ClientID for client (this is a builtin script from script library) Descriptive name of task = Collects the ClientID for TeamViewer. Collector Task = CHECKED Custom Field to update = TeamViewerClientID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > TeamViewer Control It launch the session and possibly promt for password in TeamViewer.","title":"TeamViewer Integration"},{"location":"av/","text":"Antivirus \u00b6 They are usually fraught with false-positives because we live in a world of complex greys, not black and white. At the moment, Microsoft Windows Defender thinks a go executable with virtually nothing in it is the \"Trojan:Win32/Wacatac.B!ml\" virus https://old.reddit.com/r/golang/comments/s1bh01/goexecutables_and_windows_defender/ At Tactical we recommend: No 3rd party AV Use the Defender Status Report script (Task > Run Daily - Use Automation manager) to monitor machines: https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Defender_Status_Report.ps1 If you want to lock a system down, run the Defender Enable script (test in your environment, because it can stop Microsoft Office from opening docs) that will turn on Protected Folders: https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Defender_Enable.ps1 and you will be extremely safe. Annoyed, but safe. Use this as an Exclusion List for Protected Folders items. Be aware there is also a powershell script to add TRMM exclusions specific to Windows Defender Note If you need to use 3rd party AV, add the necessary exclusions (see below for examples) and submit the exe's as safe Bitdefender Gravityzone \u00b6 Admin URL: https://cloud.gravityzone.bitdefender.com/ To exclude URLs: Policies > {policy name} > Network Protection > Content Control > Settings > Exclusions Webroot \u00b6 Admin URL: Sophos \u00b6 Sophos Central Admin \u00b6 Go To Global Settings >> General >> Global Exclusions >> Add Exclusion Sophos XG Firewall \u00b6 Log into Sophos Central Admin Admin URL: https://cloud.sophos.com/ Log into the Sophos XG Firewall Go To System >> Hosts and services >> FQDN Host Group and create a new group Go To System >> Hosts and services >> FQDN Host Create the following 3 hosts and add each to your FQDN host group. api.yourdomain.com mesh.yourdomain.com rmm.yourdomain.com (Optional if you want your client to have GUI access to Tactical RMM) Go To Hosts and services >> Services and create the following services Name: Tactical-Service-4222 Protocol: TCP Source port: 1:65535 Destination port: 4222 Name: Tactical-Service-443 Protocol: TCP Source port: 1:65535 Destination port: 443 Go To Hosts and services >> Service group and create the following service group Go To Protect >> Rules and policies and add a firewall rule Rule name: Tactical Rule Rule position: Top Source zones: LAN Source networks: ANY Destination zones: WAN Destination networks: Your FQDN Host Group Services: Tactical Services Optionally select Log Firewall Traffic checkbox for troubleshooting. ESET ESMC Console \u00b6 There are two spots: In the Detection Engine -> Performance Exclusions Web Access Protection -> URL Address Management","title":"Antivirus Exclusions"},{"location":"av/#antivirus","text":"They are usually fraught with false-positives because we live in a world of complex greys, not black and white. At the moment, Microsoft Windows Defender thinks a go executable with virtually nothing in it is the \"Trojan:Win32/Wacatac.B!ml\" virus https://old.reddit.com/r/golang/comments/s1bh01/goexecutables_and_windows_defender/ At Tactical we recommend: No 3rd party AV Use the Defender Status Report script (Task > Run Daily - Use Automation manager) to monitor machines: https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Defender_Status_Report.ps1 If you want to lock a system down, run the Defender Enable script (test in your environment, because it can stop Microsoft Office from opening docs) that will turn on Protected Folders: https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Defender_Enable.ps1 and you will be extremely safe. Annoyed, but safe. Use this as an Exclusion List for Protected Folders items. Be aware there is also a powershell script to add TRMM exclusions specific to Windows Defender Note If you need to use 3rd party AV, add the necessary exclusions (see below for examples) and submit the exe's as safe","title":"Antivirus"},{"location":"av/#bitdefender-gravityzone","text":"Admin URL: https://cloud.gravityzone.bitdefender.com/ To exclude URLs: Policies > {policy name} > Network Protection > Content Control > Settings > Exclusions","title":"Bitdefender Gravityzone"},{"location":"av/#webroot","text":"Admin URL:","title":"Webroot"},{"location":"av/#sophos","text":"","title":"Sophos"},{"location":"av/#sophos-central-admin","text":"Go To Global Settings >> General >> Global Exclusions >> Add Exclusion","title":"Sophos Central Admin"},{"location":"av/#sophos-xg-firewall","text":"Log into Sophos Central Admin Admin URL: https://cloud.sophos.com/ Log into the Sophos XG Firewall Go To System >> Hosts and services >> FQDN Host Group and create a new group Go To System >> Hosts and services >> FQDN Host Create the following 3 hosts and add each to your FQDN host group. api.yourdomain.com mesh.yourdomain.com rmm.yourdomain.com (Optional if you want your client to have GUI access to Tactical RMM) Go To Hosts and services >> Services and create the following services Name: Tactical-Service-4222 Protocol: TCP Source port: 1:65535 Destination port: 4222 Name: Tactical-Service-443 Protocol: TCP Source port: 1:65535 Destination port: 443 Go To Hosts and services >> Service group and create the following service group Go To Protect >> Rules and policies and add a firewall rule Rule name: Tactical Rule Rule position: Top Source zones: LAN Source networks: ANY Destination zones: WAN Destination networks: Your FQDN Host Group Services: Tactical Services Optionally select Log Firewall Traffic checkbox for troubleshooting.","title":"Sophos XG Firewall"},{"location":"av/#eset-esmc-console","text":"There are two spots: In the Detection Engine -> Performance Exclusions Web Access Protection -> URL Address Management","title":"ESET ESMC Console"},{"location":"backup/","text":"Backing up the RMM \u00b6 Note This is only applicable for the standard install, not Docker installs. A backup script is provided for quick and easy way to backup all settings into one file to move to another server. Download the backup script: wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/backup.sh From the Web UI, click Tools > Server Maintenance Choose Prune DB Tables from the dropdown and check the Audit Log and Pending Actions checkboxes, and then click Submit Doing a prune first before running the backup will significantly speed up the postgres vacuum command that is run during backup. Run the backup script chmod +x backup.sh ./backup.sh The backup tar file will be saved in /rmmbackups with the following format: rmm-backup-CURRENTDATETIME.tar Schedule to run daily via cron \u00b6 Make a symlink in /etc/cron.d (daily cron jobs) with these contents 00 18 * * * tactical /rmm/backup.sh to run at 6pm daily. echo -e \"\\n\" >> /rmm/backup.sh sudo ln -s /rmm/backup.sh /etc/cron.daily/ Warning Currently the backup script doesn't have any pruning functions so the folder will grow forever without periodic cleanup Video Walkthru \u00b6","title":"Backup"},{"location":"backup/#backing-up-the-rmm","text":"Note This is only applicable for the standard install, not Docker installs. A backup script is provided for quick and easy way to backup all settings into one file to move to another server. Download the backup script: wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/backup.sh From the Web UI, click Tools > Server Maintenance Choose Prune DB Tables from the dropdown and check the Audit Log and Pending Actions checkboxes, and then click Submit Doing a prune first before running the backup will significantly speed up the postgres vacuum command that is run during backup. Run the backup script chmod +x backup.sh ./backup.sh The backup tar file will be saved in /rmmbackups with the following format: rmm-backup-CURRENTDATETIME.tar","title":"Backing up the RMM"},{"location":"backup/#schedule-to-run-daily-via-cron","text":"Make a symlink in /etc/cron.d (daily cron jobs) with these contents 00 18 * * * tactical /rmm/backup.sh to run at 6pm daily. echo -e \"\\n\" >> /rmm/backup.sh sudo ln -s /rmm/backup.sh /etc/cron.daily/ Warning Currently the backup script doesn't have any pruning functions so the folder will grow forever without periodic cleanup","title":"Schedule to run daily via cron"},{"location":"backup/#video-walkthru","text":"","title":"Video Walkthru"},{"location":"code_signing/","text":"Code Signing \u00b6 Version added: Tactical RMM v0.6.0 / Agent v1.5.0 Tactical RMM agents are now code signed ! To get access to code signed agents, you must be a Github Sponsor with a minumum monthly donation of $50.00. One token is valid for 1 self hosted instance. If you have more than 1 instance you will need another token which you can get by increasing your sponsorship by $50 for each token. If you signup for the $50 and then downgrade, your auth token will be invalidated and stop working. Once you have become a sponsor, please email support@amidaware.com with your Github username, the API subdomain you will be using for your instance (e.g. api.example.com ), and Discord username if you're on our Discord . Please allow up to 24 hours for a response You will then be sent a code signing auth token, which you should enter into Tactical's web UI from Settings > Code Signing How does it work? \u00b6 Everytime you generate an agent or an agent does a self-update, your self-hosted instance sends a request to Tactical's code signing servers with your auth token. If the token is valid, the server sends you back a code signed agent. If not, it sends you back the un-signed agent. If you think your auth token has been compromised or stolen then please email support or contact wh1te909 on discord to get a new token / invalidate the old one.","title":"Code Signing"},{"location":"code_signing/#code-signing","text":"Version added: Tactical RMM v0.6.0 / Agent v1.5.0 Tactical RMM agents are now code signed ! To get access to code signed agents, you must be a Github Sponsor with a minumum monthly donation of $50.00. One token is valid for 1 self hosted instance. If you have more than 1 instance you will need another token which you can get by increasing your sponsorship by $50 for each token. If you signup for the $50 and then downgrade, your auth token will be invalidated and stop working. Once you have become a sponsor, please email support@amidaware.com with your Github username, the API subdomain you will be using for your instance (e.g. api.example.com ), and Discord username if you're on our Discord . Please allow up to 24 hours for a response You will then be sent a code signing auth token, which you should enter into Tactical's web UI from Settings > Code Signing","title":"Code Signing"},{"location":"code_signing/#how-does-it-work","text":"Everytime you generate an agent or an agent does a self-update, your self-hosted instance sends a request to Tactical's code signing servers with your auth token. If the token is valid, the server sends you back a code signed agent. If not, it sends you back the un-signed agent. If you think your auth token has been compromised or stolen then please email support or contact wh1te909 on discord to get a new token / invalidate the old one.","title":"How does it work?"},{"location":"contributing/","text":"Contributing \u00b6 Contributing to the docs \u00b6 Docs are built with MKDocs for Material To setup a local environment to add/edit to this documentation site: mkdir ~/rmmdocs && cd ~/rmmdocs git clone https://github.com/amidaware/tacticalrmm.git . python3 -m venv env source env/bin/activate pip install --upgrade pip pip install --upgrade setuptools wheel pip install -r api/tacticalrmm/requirements-dev.txt cd docs mkdocs serve Open your browser and navigate to http://yourserverip:8005 Add/edit markdown files in the docs/docs folder and you'll see live changes at the url above. Edit docs/mkdocs.yml to edit structure and add new files. Full mkdocs documentation here Once finished, create a pull request to the develop branch for review.","title":"Contributing to Docs"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#contributing-to-the-docs","text":"Docs are built with MKDocs for Material To setup a local environment to add/edit to this documentation site: mkdir ~/rmmdocs && cd ~/rmmdocs git clone https://github.com/amidaware/tacticalrmm.git . python3 -m venv env source env/bin/activate pip install --upgrade pip pip install --upgrade setuptools wheel pip install -r api/tacticalrmm/requirements-dev.txt cd docs mkdocs serve Open your browser and navigate to http://yourserverip:8005 Add/edit markdown files in the docs/docs folder and you'll see live changes at the url above. Edit docs/mkdocs.yml to edit structure and add new files. Full mkdocs documentation here Once finished, create a pull request to the develop branch for review.","title":"Contributing to the docs"},{"location":"contributing_community_scripts/","text":"Community Scripts \u00b6 Script Library Naming Conventions \u00b6 File names \u00b6 Under /scripts the file name should generally follow this format: (Platform)_(Category or Function)_(What It Does).xxx Info Although Tactical RMM only has a Windows agent for now, we're planning for a future with more platform support Platform for now are: Win OSX Linux iOS Android Good filename examples include: Win_Azure_Mars_Cloud_Backup_Status.ps1 Win_AzureAD_Check_Connection_Status.ps1 Win_Network_DHCP_Set.bat Win_Network_DNS_Set_to_1.1.1.2.ps1 Info This is so that at a glance you can see if there is already a script with that function, and you can avoid duplication of functionality. If you can improve a script or allow Script Arguments/Parameters update existing if possible Name field (in community_scripts.json) \u00b6 Consider they are viewed in 3 different locations: Script Manager List View (sortable by any column) Folder View (Grouped by Categories) Run or Add script Running scripts manually or adding tasks (or adding in Automation Manager) Info A good max length is 50-60 chars or less for display in these 3 locations Make sure your Name roughly follows the order of file naming as above Category or Function - What It Does Consider how the alphabetic sort will affect display json field names \u00b6 Example { \"guid\" : \"bfd61545-839b-45da-8b3d-75ffc4d43272\" , \"filename\" : \"Win_Sophos_EndpointProtection_Install.ps1\" , \"submittedBy\" : \"https://github.com/bc24fl/\" , \"name\" : \"Sophos Endpoint Protection Install\" , \"description\" : \"Installs Sophos Endpoint Protection via the Sophos API. Products include Antivirus, InterceptX, MDR, Device Encryption. The script requires API credentials, Custom Fields, and Arguments passed to script. See script comments for details\" , \"args\" : [ \"-ClientId {{client.SophosClientId}}\" , \"-ClientSecret {{client.SophosClientSecret}}\" , \"-TenantName {{client.SophosTenantName}}\" , \"-Products antivirus,intercept\" ], \"default_timeout\" : \"3600\" , \"supported_platforms\" : [ \"windows\" ], \"shell\" : \"powershell\" , \"category\" : \"TRMM (Win):3rd Party Software\" }, Notes guid : Must be unique in the file filename : File with that name must exist in /scripts folder submittedBy : Get credit for creator args : default args pre-filled in arg field default_timeout : Sets the default timeout for the script supported_platforms : [\"windows\", \"linux\", \"darwin\"] (case sensitive, if missing, assumes all platforms are supported). darwin =MacOS shell : can be powershell , cmd , python , bash syntax : See scripting category : Preferably use existing categories and format structure for library sorting, add new as needed Making Script Files \u00b6 Good Habits \u00b6 Try and make them fully self-contained. If they pull data from elsewhere, create comment notes at the top with references for others to audit/validate Good folder locations to use for standardized things: c:\\ProgramData\\TacticalRMM\\ c:\\ProgramData\\TacticalRMM\\scripts c:\\ProgramData\\TacticalRMM\\toolbox c:\\ProgramData\\TacticalRMM\\logs c:\\ProgramData\\TacticalRMM\\temp c:\\ProgramData\\TacticalRMM\\ Command Parameters are good. Optional command parameters for extra functions are better. Add standardized Comment headers to scripts (include the first 2, more if appropriate): <# .Synopsis Short description eg Check IP address .DESCRIPTION Long description eg Checks IP address on all local network adapters, and returns results .EXAMPLE Example of how to use this cmdlet .EXAMPLE Another example of how to use this cmdlet .INPUTS Inputs to this cmdlet (if any) .OUTPUTS Output from this cmdlet (if any) .NOTES General notes eg v1.0 .COMPONENT The component this cmdlet belongs to .ROLE The role this cmdlet belongs to .FUNCTIONALITY The functionality that best describes this cmdlet #> Bad Habits \u00b6 Assumes non-standard configurations Doesn't play well with other community scripts (reused names etc.) Script Parameters \u00b6 Useful Reference Script Examples \u00b6 RunAsUser (since Tactical RMM runs as system) https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Display_Message_To_User.ps1 Command Parameter Ninja https://github.com/amidaware/community-scripts/blob/main/scripts/Win_ScreenConnectAIO.ps1 Optional Command Parameters and testing for errors https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Computer_Rename.ps1 Volunteers Needed \u00b6 If you want to contribute back to the project there are a lot of scripts that need some TLC (Tender Loving Care) please peruse thru them in The Script WIP (Work In Progress): https://github.com/amidaware/community-scripts/tree/main/scripts_wip Discuss/ask questions in the Discord group here What you can add is: Add standardized Comment headers per above Parameterize scripts where appropriate Add $ExitCode and error conditions as appropriate Contact @silversword in Discord if you need help doing Github additions/edits/adding to the community Library and have questions about Script Library Naming Conventions","title":"Contributing to Community Scripts"},{"location":"contributing_community_scripts/#community-scripts","text":"","title":"Community Scripts"},{"location":"contributing_community_scripts/#script-library-naming-conventions","text":"","title":"Script Library Naming Conventions"},{"location":"contributing_community_scripts/#file-names","text":"Under /scripts the file name should generally follow this format: (Platform)_(Category or Function)_(What It Does).xxx Info Although Tactical RMM only has a Windows agent for now, we're planning for a future with more platform support Platform for now are: Win OSX Linux iOS Android Good filename examples include: Win_Azure_Mars_Cloud_Backup_Status.ps1 Win_AzureAD_Check_Connection_Status.ps1 Win_Network_DHCP_Set.bat Win_Network_DNS_Set_to_1.1.1.2.ps1 Info This is so that at a glance you can see if there is already a script with that function, and you can avoid duplication of functionality. If you can improve a script or allow Script Arguments/Parameters update existing if possible","title":"File names"},{"location":"contributing_community_scripts/#name-field-in-community_scriptsjson","text":"Consider they are viewed in 3 different locations: Script Manager List View (sortable by any column) Folder View (Grouped by Categories) Run or Add script Running scripts manually or adding tasks (or adding in Automation Manager) Info A good max length is 50-60 chars or less for display in these 3 locations Make sure your Name roughly follows the order of file naming as above Category or Function - What It Does Consider how the alphabetic sort will affect display","title":"Name field (in community_scripts.json)"},{"location":"contributing_community_scripts/#json-field-names","text":"Example { \"guid\" : \"bfd61545-839b-45da-8b3d-75ffc4d43272\" , \"filename\" : \"Win_Sophos_EndpointProtection_Install.ps1\" , \"submittedBy\" : \"https://github.com/bc24fl/\" , \"name\" : \"Sophos Endpoint Protection Install\" , \"description\" : \"Installs Sophos Endpoint Protection via the Sophos API. Products include Antivirus, InterceptX, MDR, Device Encryption. The script requires API credentials, Custom Fields, and Arguments passed to script. See script comments for details\" , \"args\" : [ \"-ClientId {{client.SophosClientId}}\" , \"-ClientSecret {{client.SophosClientSecret}}\" , \"-TenantName {{client.SophosTenantName}}\" , \"-Products antivirus,intercept\" ], \"default_timeout\" : \"3600\" , \"supported_platforms\" : [ \"windows\" ], \"shell\" : \"powershell\" , \"category\" : \"TRMM (Win):3rd Party Software\" }, Notes guid : Must be unique in the file filename : File with that name must exist in /scripts folder submittedBy : Get credit for creator args : default args pre-filled in arg field default_timeout : Sets the default timeout for the script supported_platforms : [\"windows\", \"linux\", \"darwin\"] (case sensitive, if missing, assumes all platforms are supported). darwin =MacOS shell : can be powershell , cmd , python , bash syntax : See scripting category : Preferably use existing categories and format structure for library sorting, add new as needed","title":"json field names"},{"location":"contributing_community_scripts/#making-script-files","text":"","title":"Making Script Files"},{"location":"contributing_community_scripts/#good-habits","text":"Try and make them fully self-contained. If they pull data from elsewhere, create comment notes at the top with references for others to audit/validate Good folder locations to use for standardized things: c:\\ProgramData\\TacticalRMM\\ c:\\ProgramData\\TacticalRMM\\scripts c:\\ProgramData\\TacticalRMM\\toolbox c:\\ProgramData\\TacticalRMM\\logs c:\\ProgramData\\TacticalRMM\\temp c:\\ProgramData\\TacticalRMM\\ Command Parameters are good. Optional command parameters for extra functions are better. Add standardized Comment headers to scripts (include the first 2, more if appropriate): <# .Synopsis Short description eg Check IP address .DESCRIPTION Long description eg Checks IP address on all local network adapters, and returns results .EXAMPLE Example of how to use this cmdlet .EXAMPLE Another example of how to use this cmdlet .INPUTS Inputs to this cmdlet (if any) .OUTPUTS Output from this cmdlet (if any) .NOTES General notes eg v1.0 .COMPONENT The component this cmdlet belongs to .ROLE The role this cmdlet belongs to .FUNCTIONALITY The functionality that best describes this cmdlet #>","title":"Good Habits"},{"location":"contributing_community_scripts/#bad-habits","text":"Assumes non-standard configurations Doesn't play well with other community scripts (reused names etc.)","title":"Bad Habits"},{"location":"contributing_community_scripts/#script-parameters","text":"","title":"Script Parameters"},{"location":"contributing_community_scripts/#useful-reference-script-examples","text":"RunAsUser (since Tactical RMM runs as system) https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Display_Message_To_User.ps1 Command Parameter Ninja https://github.com/amidaware/community-scripts/blob/main/scripts/Win_ScreenConnectAIO.ps1 Optional Command Parameters and testing for errors https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Computer_Rename.ps1","title":"Useful Reference Script Examples"},{"location":"contributing_community_scripts/#volunteers-needed","text":"If you want to contribute back to the project there are a lot of scripts that need some TLC (Tender Loving Care) please peruse thru them in The Script WIP (Work In Progress): https://github.com/amidaware/community-scripts/tree/main/scripts_wip Discuss/ask questions in the Discord group here What you can add is: Add standardized Comment headers per above Parameterize scripts where appropriate Add $ExitCode and error conditions as appropriate Contact @silversword in Discord if you need help doing Github additions/edits/adding to the community Library and have questions about Script Library Naming Conventions","title":"Volunteers Needed"},{"location":"contributing_using_a_remote_server/","text":"Contributing Using a Remote Server \u00b6 The below instructions are for a non-production server that has Tactical RMM installed and configured with a real domain. You can then use your own GitHub to push changes to and then submit a PR request to the TRMM develop branch ( https://github.com/amidaware/tacticalrmm ). Warning Do not attempt development of this kind on your production server. Install Tactical RMM \u00b6 1. Traditional install \u00b6 This guide assumes you have done a Traditional Install . 2. Install VSCode and Extensions \u00b6 Download VSCode here Download the Remote SSH Development Pack here Configure the Remote Development Server \u00b6 1. Connect \u00b6 The remote development server should already have Tactical RMM installed via the traditional install method. After the extension pack is installed in VSCode you will have a new button at the bottom-left of VSCode. You can select it and add your remote SSH host information. 2. Configure \u00b6 Configuring a remote server for development work is necessary so that as you make changes to the code base it will automatically refresh and you can see the changes. It may be necessary to do a full browser refresh if changing styles. Disable RMM and Daphne services sudo systemctl disable --now rmm.service && sudo systemctl disable --now daphne.service Open /rmm/web/.env and make it look like the following DEV_URL = \"http://api.EXAMPLE.COM:8000\" APP_URL = \"http://rmm.EXAMPLE.COM:8080\" Open /rmm/api/tacticalrmm/tacticalrmm/local_settings.py change DEBUG = True Remove CORS_ORIGIN_WHITELIST list Add CORS_ORIGIN_ALLOW_ALL = True Add the following to the ALLOWED HOSTS rmm.EXAMPLE.COM cd /rmm/api/tacticalrmm/ source ../env/bin/activate Install requirements pip install -r requirements-dev.txt -r requirements-test.txt Start Django backend python manage.py runserver 0 :8000 Open a new terminal and compile quasar frontend cd /rmm/web npm install npm install -g @quasar/cli quasar dev Info If you receive a CORS error when trying to log into your server via localhost or IP, try the following rm -rf node_modules .quasar npm install quasar dev You should now have a localhost and IP based URL to view that has a live reload feature. Configure GitHub with VSCode \u00b6 !!!info Make sure you are submitting Pull Requests to the develop branch. Follow this guide for a good introduction to GitHub: https://www.digitalocean.com/community/tutorials/how-to-create-a-pull-request-on-github Make sure u are on develop branch git checkout develop git remote -v should look like the following origin https://github.com/yourusername/tacticalrmm.git ( fetch ) origin https://github.com/yourusername/tacticalrmm.git ( push ) upstream https://github.com/amidaware/tacticalrmm.git ( fetch ) upstream https://github.com/amidaware/tacticalrmm.git ( push ) You will commit the change to your GitHub and from within GitHub you can then submit a PR to the develop branch of wh1te909 Tactical RMM. More to come...","title":"Contributing using a Remote Server"},{"location":"contributing_using_a_remote_server/#contributing-using-a-remote-server","text":"The below instructions are for a non-production server that has Tactical RMM installed and configured with a real domain. You can then use your own GitHub to push changes to and then submit a PR request to the TRMM develop branch ( https://github.com/amidaware/tacticalrmm ). Warning Do not attempt development of this kind on your production server.","title":"Contributing Using a Remote Server"},{"location":"contributing_using_a_remote_server/#install-tactical-rmm","text":"","title":"Install Tactical RMM"},{"location":"contributing_using_a_remote_server/#1-traditional-install","text":"This guide assumes you have done a Traditional Install .","title":"1. Traditional install"},{"location":"contributing_using_a_remote_server/#2-install-vscode-and-extensions","text":"Download VSCode here Download the Remote SSH Development Pack here","title":"2. Install VSCode and Extensions"},{"location":"contributing_using_a_remote_server/#configure-the-remote-development-server","text":"","title":"Configure the Remote Development Server"},{"location":"contributing_using_a_remote_server/#1-connect","text":"The remote development server should already have Tactical RMM installed via the traditional install method. After the extension pack is installed in VSCode you will have a new button at the bottom-left of VSCode. You can select it and add your remote SSH host information.","title":"1. Connect"},{"location":"contributing_using_a_remote_server/#2-configure","text":"Configuring a remote server for development work is necessary so that as you make changes to the code base it will automatically refresh and you can see the changes. It may be necessary to do a full browser refresh if changing styles. Disable RMM and Daphne services sudo systemctl disable --now rmm.service && sudo systemctl disable --now daphne.service Open /rmm/web/.env and make it look like the following DEV_URL = \"http://api.EXAMPLE.COM:8000\" APP_URL = \"http://rmm.EXAMPLE.COM:8080\" Open /rmm/api/tacticalrmm/tacticalrmm/local_settings.py change DEBUG = True Remove CORS_ORIGIN_WHITELIST list Add CORS_ORIGIN_ALLOW_ALL = True Add the following to the ALLOWED HOSTS rmm.EXAMPLE.COM cd /rmm/api/tacticalrmm/ source ../env/bin/activate Install requirements pip install -r requirements-dev.txt -r requirements-test.txt Start Django backend python manage.py runserver 0 :8000 Open a new terminal and compile quasar frontend cd /rmm/web npm install npm install -g @quasar/cli quasar dev Info If you receive a CORS error when trying to log into your server via localhost or IP, try the following rm -rf node_modules .quasar npm install quasar dev You should now have a localhost and IP based URL to view that has a live reload feature.","title":"2. Configure"},{"location":"contributing_using_a_remote_server/#configure-github-with-vscode","text":"!!!info Make sure you are submitting Pull Requests to the develop branch. Follow this guide for a good introduction to GitHub: https://www.digitalocean.com/community/tutorials/how-to-create-a-pull-request-on-github Make sure u are on develop branch git checkout develop git remote -v should look like the following origin https://github.com/yourusername/tacticalrmm.git ( fetch ) origin https://github.com/yourusername/tacticalrmm.git ( push ) upstream https://github.com/amidaware/tacticalrmm.git ( fetch ) upstream https://github.com/amidaware/tacticalrmm.git ( push ) You will commit the change to your GitHub and from within GitHub you can then submit a PR to the develop branch of wh1te909 Tactical RMM. More to come...","title":"Configure GitHub with VSCode"},{"location":"contributing_using_browser/","text":"Contributing Using Web Browser \u00b6 Getting Started \u00b6 1. Fork Project in Github \u00b6 This is making a duplicate of the code under your Github that you can edit https://github.com/amidaware/tacticalrmm 2. Make Edits \u00b6 Make some changes 3. Request your changes to be pulled into the primary repo (Pull Request) \u00b6 This is taking your changes and requesting they be integrated into the Tactical RMM develop branch. 3a. Check the status of your PR \u00b6 Look at a summary of the changes you've requested, monitor for them to be accepted, or commented on. https://github.com/amidaware/tacticalrmm/pulls Once they're accepted you can either: * Delete your fork * Sync your local fork 4. Sync your fork \u00b6 https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork Bring changes from original repo to your fork so you're current with changes made in original Github repo 5. Lather, Rinse, Repeat \u00b6 Goto Step 2. and contribute some more Notes \u00b6 After your changes are accepted, they won't be live in Tactical RMM until there is a new release . #BePatient","title":"Contributing Using Web Browser"},{"location":"contributing_using_browser/#contributing-using-web-browser","text":"","title":"Contributing Using Web Browser"},{"location":"contributing_using_browser/#getting-started","text":"","title":"Getting Started"},{"location":"contributing_using_browser/#1-fork-project-in-github","text":"This is making a duplicate of the code under your Github that you can edit https://github.com/amidaware/tacticalrmm","title":"1. Fork Project in Github"},{"location":"contributing_using_browser/#2-make-edits","text":"Make some changes","title":"2. Make Edits"},{"location":"contributing_using_browser/#3-request-your-changes-to-be-pulled-into-the-primary-repo-pull-request","text":"This is taking your changes and requesting they be integrated into the Tactical RMM develop branch.","title":"3. Request your changes to be pulled into the primary repo (Pull Request)"},{"location":"contributing_using_browser/#3a-check-the-status-of-your-pr","text":"Look at a summary of the changes you've requested, monitor for them to be accepted, or commented on. https://github.com/amidaware/tacticalrmm/pulls Once they're accepted you can either: * Delete your fork * Sync your local fork","title":"3a. Check the status of your PR"},{"location":"contributing_using_browser/#4-sync-your-fork","text":"https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork Bring changes from original repo to your fork so you're current with changes made in original Github repo","title":"4. Sync your fork"},{"location":"contributing_using_browser/#5-lather-rinse-repeat","text":"Goto Step 2. and contribute some more","title":"5. Lather, Rinse, Repeat"},{"location":"contributing_using_browser/#notes","text":"After your changes are accepted, they won't be live in Tactical RMM until there is a new release . #BePatient","title":"Notes"},{"location":"contributing_using_devbox/","text":"Hidden docs, needs work For local Hyper-v Devbox notes From https://raw.githubusercontent.com/silversword411/tacticalrmm-devdocs Needs an official install_devbox.sh script Setup local devbox in hyper-v VM \u00b6 Install Ubuntu 20.04 LTS \u00b6 Don't forget to sudo apt-get updates && sudo apt-get upgrade Optional \u00b6 Set all users in sudo group not to require password every time: sudo visudo Add this: %sudo ALL=(ALL) NOPASSWD: ALL Download customized install script and tweak \u00b6 Create folder to dump into sudo mkdir /rmm sudo chown ${ USER } : ${ USER } -R /rmm cd /rmm Get dev install script wget https://raw.githubusercontent.com/silversword411/tacticalrmm-devdocs/blob/main/install_devbox.sh Edit, and search for REPLACEMEWITHYOURFORKEDREPOURL and replace with your forked repo URL (example commented out below) Run it \u00b6 ./install_devbox.sh Watch for \u00b6 !!!Note Unlike regular installs, don't worry about the QR code Celebrate \u00b6 Misc commands \u00b6 Start mkdocs on dev box \u00b6 cd /rmm/api source env/bin/activate pip install --upgrade pip pip install --upgrade setuptools wheel pip install -r tacticalrmm/requirements-dev.txt cd /rmm/docs mkdocs serve Running tests locally \u00b6 Prep and update source /rmm/api/env/bin/activate cd /rmm/api/tacticalrmm pip install -r requirements.txt Then run tests python manage.py test Misc Notes \u00b6 Spinning up front end web interface in development \u00b6 cd /web npm run serve","title":"Contributing using devbox"},{"location":"contributing_using_devbox/#setup-local-devbox-in-hyper-v-vm","text":"","title":"Setup local devbox in hyper-v VM"},{"location":"contributing_using_devbox/#install-ubuntu-2004-lts","text":"Don't forget to sudo apt-get updates && sudo apt-get upgrade","title":"Install Ubuntu 20.04 LTS"},{"location":"contributing_using_devbox/#optional","text":"Set all users in sudo group not to require password every time: sudo visudo Add this: %sudo ALL=(ALL) NOPASSWD: ALL","title":"Optional"},{"location":"contributing_using_devbox/#download-customized-install-script-and-tweak","text":"Create folder to dump into sudo mkdir /rmm sudo chown ${ USER } : ${ USER } -R /rmm cd /rmm Get dev install script wget https://raw.githubusercontent.com/silversword411/tacticalrmm-devdocs/blob/main/install_devbox.sh Edit, and search for REPLACEMEWITHYOURFORKEDREPOURL and replace with your forked repo URL (example commented out below)","title":"Download customized install script and tweak"},{"location":"contributing_using_devbox/#run-it","text":"./install_devbox.sh","title":"Run it"},{"location":"contributing_using_devbox/#watch-for","text":"!!!Note Unlike regular installs, don't worry about the QR code","title":"Watch for"},{"location":"contributing_using_devbox/#celebrate","text":"","title":"Celebrate"},{"location":"contributing_using_devbox/#misc-commands","text":"","title":"Misc commands"},{"location":"contributing_using_devbox/#start-mkdocs-on-dev-box","text":"cd /rmm/api source env/bin/activate pip install --upgrade pip pip install --upgrade setuptools wheel pip install -r tacticalrmm/requirements-dev.txt cd /rmm/docs mkdocs serve","title":"Start mkdocs on dev box"},{"location":"contributing_using_devbox/#running-tests-locally","text":"Prep and update source /rmm/api/env/bin/activate cd /rmm/api/tacticalrmm pip install -r requirements.txt Then run tests python manage.py test","title":"Running tests locally"},{"location":"contributing_using_devbox/#misc-notes","text":"","title":"Misc Notes"},{"location":"contributing_using_devbox/#spinning-up-front-end-web-interface-in-development","text":"cd /web npm run serve","title":"Spinning up front end web interface in development"},{"location":"contributing_using_docker/","text":"Contributing using Docker \u00b6 Install WSL2 \u00b6 https://docs.microsoft.com/en-us/windows/wsl/install-win10 Install Docker Desktop \u00b6 https://www.docker.com/products/docker-desktop Configure Docker \u00b6 Make sure it doesn't look like this This is better Check and make sure WSL is v2 and set Ubuntu as default \u00b6 https://docs.microsoft.com/en-us/windows/wsl/install-win10#set-your-distribution-version-to-wsl-1-or-wsl-2 Install VSCode Extensions \u00b6 Remote - Containers Docker Connect to WSL and clone your Github fork \u00b6 Create .env file \u00b6 Under .devcontainer duplicate .env.example as .env Customize to your tastes (it doesn't need to be internet configured, just add records in your hosts file) eg 127.0.0.1 rmm.example.com api.example.com mesh.example.com Launch your Dev VM in Docker \u00b6 Right-click docker-compose.yml and choose Compose Up Wait, it'll take a while as docker downloads all the modules and gets running. Develop \u00b6 You're operational! Note Self-signed certs are in your dev environment. Navigate to https://api.example.com and https://rmm.example.com and accept the self signed certs to get rid of errors. View mkdocks live edits in browser \u00b6 Change stuff in /docs/docs/ mkdocs is Exposed on Port: 8005 Open: http://rmm.example.com:8005/ Note If you add new mkdocs extensions you might need to: - docker-compose down. - Then delete the /api/tacticalrmm/env/ folder. - Then docker-compose up and it will download/rebuild new extensions View django administration \u00b6 Open: http://rmm.example.com:8000/admin/","title":"Contributing using Docker"},{"location":"contributing_using_docker/#contributing-using-docker","text":"","title":"Contributing using Docker"},{"location":"contributing_using_docker/#install-wsl2","text":"https://docs.microsoft.com/en-us/windows/wsl/install-win10","title":"Install WSL2"},{"location":"contributing_using_docker/#install-docker-desktop","text":"https://www.docker.com/products/docker-desktop","title":"Install Docker Desktop"},{"location":"contributing_using_docker/#configure-docker","text":"Make sure it doesn't look like this This is better","title":"Configure Docker"},{"location":"contributing_using_docker/#check-and-make-sure-wsl-is-v2-and-set-ubuntu-as-default","text":"https://docs.microsoft.com/en-us/windows/wsl/install-win10#set-your-distribution-version-to-wsl-1-or-wsl-2","title":"Check and make sure WSL is v2 and set Ubuntu as default"},{"location":"contributing_using_docker/#install-vscode-extensions","text":"Remote - Containers Docker","title":"Install VSCode Extensions"},{"location":"contributing_using_docker/#connect-to-wsl-and-clone-your-github-fork","text":"","title":"Connect to WSL and clone your Github fork"},{"location":"contributing_using_docker/#create-env-file","text":"Under .devcontainer duplicate .env.example as .env Customize to your tastes (it doesn't need to be internet configured, just add records in your hosts file) eg 127.0.0.1 rmm.example.com api.example.com mesh.example.com","title":"Create .env file"},{"location":"contributing_using_docker/#launch-your-dev-vm-in-docker","text":"Right-click docker-compose.yml and choose Compose Up Wait, it'll take a while as docker downloads all the modules and gets running.","title":"Launch your Dev VM in Docker"},{"location":"contributing_using_docker/#develop","text":"You're operational! Note Self-signed certs are in your dev environment. Navigate to https://api.example.com and https://rmm.example.com and accept the self signed certs to get rid of errors.","title":"Develop"},{"location":"contributing_using_docker/#view-mkdocks-live-edits-in-browser","text":"Change stuff in /docs/docs/ mkdocs is Exposed on Port: 8005 Open: http://rmm.example.com:8005/ Note If you add new mkdocs extensions you might need to: - docker-compose down. - Then delete the /api/tacticalrmm/env/ folder. - Then docker-compose up and it will download/rebuild new extensions","title":"View mkdocks live edits in browser"},{"location":"contributing_using_docker/#view-django-administration","text":"Open: http://rmm.example.com:8000/admin/","title":"View django administration"},{"location":"contributing_using_vscode/","text":"Contributing Using VSCode \u00b6 Getting Started \u00b6 1. Install vscode \u00b6 https://code.visualstudio.com/download 2. Fork Project in Github \u00b6 This is making a duplicate of the code under your Github that you can edit https://github.com/amidaware/tacticalrmm 3. Add your (forked) repo to vscode \u00b6 Clone repository Login to your Github Choose local folder 3a. Install extra vscode Extensions \u00b6 GitLens Remote - SSH 4. Open Terminal \u00b6 https://code.visualstudio.com/docs/editor/integrated-terminal Ctrl+` 5. Configure a remote for your fork (in vscode) \u00b6 https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/configuring-a-remote-for-a-fork Configure your local fork and tell it where the original code repo is so you can compare and merge updates later when official repo is updated Check repos git remote -v Add upstream repo git remote add upstream https://github.com/amidaware/tacticalrmm Confirm changes git remote -v 6. Contribute code \u00b6 Make changes to something. Commit (update something) and notate what you did Push (from your local vscode to your github fork) Open browser and look at your repo (It should reflect your commit) 6a. Request your changes to be pulled into the primary repo (Pull Request) \u00b6 In browser create pull request 7. Sync your local fork \u00b6 https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork Bring changes from original repo to your local vscode copy so you're current with changes made in original Github repo In VSCode open TERMINAL Ctrl+` Tell git to pull from the GitHub upstream repo all new changes into your local directory git pull --rebase upstream develop 7a. Push your local updated copy to your Github fork \u00b6 Then you're push ing that updated local repo to your online Github fork 8. Verify and Repeat \u00b6 Check your Github fork in browser, should be up to date now with original. Repeat 6 or 7 as necessary Reference \u00b6 Customizing the Admin Web Interface \u00b6 Created using quasar, it's all your .vue files in web/src/components/modals/agents/RunScript.vue Learn stuff here https://quasar.dev/","title":"Contributing using VSCode"},{"location":"contributing_using_vscode/#contributing-using-vscode","text":"","title":"Contributing Using VSCode"},{"location":"contributing_using_vscode/#getting-started","text":"","title":"Getting Started"},{"location":"contributing_using_vscode/#1-install-vscode","text":"https://code.visualstudio.com/download","title":"1. Install vscode"},{"location":"contributing_using_vscode/#2-fork-project-in-github","text":"This is making a duplicate of the code under your Github that you can edit https://github.com/amidaware/tacticalrmm","title":"2. Fork Project in Github"},{"location":"contributing_using_vscode/#3-add-your-forked-repo-to-vscode","text":"Clone repository Login to your Github Choose local folder","title":"3. Add your (forked) repo to vscode"},{"location":"contributing_using_vscode/#3a-install-extra-vscode-extensions","text":"GitLens Remote - SSH","title":"3a. Install extra vscode Extensions"},{"location":"contributing_using_vscode/#4-open-terminal","text":"https://code.visualstudio.com/docs/editor/integrated-terminal Ctrl+`","title":"4. Open Terminal"},{"location":"contributing_using_vscode/#5-configure-a-remote-for-your-fork-in-vscode","text":"https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/configuring-a-remote-for-a-fork Configure your local fork and tell it where the original code repo is so you can compare and merge updates later when official repo is updated Check repos git remote -v Add upstream repo git remote add upstream https://github.com/amidaware/tacticalrmm Confirm changes git remote -v","title":"5. Configure a remote for your fork (in vscode)"},{"location":"contributing_using_vscode/#6-contribute-code","text":"Make changes to something. Commit (update something) and notate what you did Push (from your local vscode to your github fork) Open browser and look at your repo (It should reflect your commit)","title":"6. Contribute code"},{"location":"contributing_using_vscode/#6a-request-your-changes-to-be-pulled-into-the-primary-repo-pull-request","text":"In browser create pull request","title":"6a. Request your changes to be pulled into the primary repo (Pull Request)"},{"location":"contributing_using_vscode/#7-sync-your-local-fork","text":"https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork Bring changes from original repo to your local vscode copy so you're current with changes made in original Github repo In VSCode open TERMINAL Ctrl+` Tell git to pull from the GitHub upstream repo all new changes into your local directory git pull --rebase upstream develop","title":"7. Sync your local fork"},{"location":"contributing_using_vscode/#7a-push-your-local-updated-copy-to-your-github-fork","text":"Then you're push ing that updated local repo to your online Github fork","title":"7a. Push your local updated copy to your Github fork"},{"location":"contributing_using_vscode/#8-verify-and-repeat","text":"Check your Github fork in browser, should be up to date now with original. Repeat 6 or 7 as necessary","title":"8. Verify and Repeat"},{"location":"contributing_using_vscode/#reference","text":"","title":"Reference"},{"location":"contributing_using_vscode/#customizing-the-admin-web-interface","text":"Created using quasar, it's all your .vue files in web/src/components/modals/agents/RunScript.vue Learn stuff here https://quasar.dev/","title":"Customizing the Admin Web Interface"},{"location":"example_nginx/","text":"example of /etc/nginx/sites-available/rmm.conf DO NOT COPY PASTE INTO YOUR SERVER ONLY USE AS A REFERENCE server_tokens off; upstream tacticalrmm { server unix:////rmm/api/tacticalrmm/tacticalrmm.sock; } map $http_user_agent $ignore_ua { \"~python-requests.*\" 0; \"~go-resty.*\" 0; default 1; } server { listen 80; server_name api.example.com; return 301 https://$server_name$request_uri; } server { listen 443 ssl; server_name api.example.com; client_max_body_size 300M; access_log /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log combined if=$ignore_ua; error_log /rmm/api/tacticalrmm/tacticalrmm/private/log/error.log; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; location /static/ { root /rmm/api/tacticalrmm; } location /private/ { internal; add_header \"Access-Control-Allow-Origin\" \"https://rmm.example.com\"; alias /rmm/api/tacticalrmm/tacticalrmm/private/; } location ~ ^/(natsapi) { allow 127.0.0.1; deny all; uwsgi_pass tacticalrmm; include /etc/nginx/uwsgi_params; uwsgi_read_timeout 500s; uwsgi_ignore_client_abort on; } location ~ ^/ws/ { proxy_pass http://unix:/rmm/daphne.sock; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; } location / { uwsgi_pass tacticalrmm; include /etc/nginx/uwsgi_params; uwsgi_read_timeout 9999s; uwsgi_ignore_client_abort on; } }","title":"Example nginx"},{"location":"faq/","text":"FAQ \u00b6 Is Tactical RMM vulnerable to Log4j \u00b6 No Why isn't the Code Signing free? \u00b6 It's one way we're trying to monetize and get dev's paid. We had github sponsors up for many months before code signing. Very few people donated, some $5 and $10. maybe $40 a month. Once we announced code signing, sponsors came in like crazy, and many people upgraded their $5 to a $50 so while I would like to believe people would gladly donate, that's just not the case. We already tried. Linux Agent \u00b6 While linux support is in the post-alpha/beta mode: Code signing makes linux installs easy and is a benefit offered to code signing sponsors DIYer can read thru the code and....DIY This is primarily for 2 reasons: As this has been a sponsorship goal it seems only fair that those who contributed to make this a reality get early access to easy linux agent installs We're looking for good bug reports from active users to get the linux agent into production ready code. Who is Amidaware LLC? \u00b6 The Legal entity behind Tactical RMM Is it possible to use XXX with Tactical RMM \u00b6 While it may be possible to use XXX, we have not configured it and therefore it is Unsupported . We cannot help you configure XXX as it pertains to your environment . Is it possible to use XXX proxy server with Tactical RMM \u00b6 If you wish to stray from the easy install of a standard install in a VPS, you need to have the knowledge on how to troubleshoot your own custom environment. The most common reasons you're running a proxy is: Because you only have a single public IP and you already have something on Port 443. Workaround : Get another public IP from your ISP Because you want to monitor traffic for security reasons: You're a Networking Wizard . There are some implementations that others have done, but be aware it is Unsupported and if you're requesting help in Discord please let us know in advance. How do I do X feature in the web UI? \u00b6 A lot of features in the web UI are hidden behind right-click menus; almost everything has a right click menu so if you don't see something, try right clicking on it. Where are the Mac agents? \u00b6 Mac agents are currently under development. MeshCentral is a 2nd piece of software that installs along TRMM, it is Mac compatible but will only work when using your https://mesh.EXAMPLE.COM URL. It will NOT make agents appear in the TRMM admin interface. See the MeshCentral User Guide on how to configure/use MeshCentral. Can I run Tactical RMM locally behind NAT without exposing my RMM server to the internet? \u00b6 Yes, you will just need to setup local DNS for the 3 subdomains, either by editing host files on all your agents or through a local DNS server. Similarly asked: Can I use onsite DNS servers (I don\u2019t want my server accessible from the internet). Yes, you can use (only) internal DNS (if you want) for api, mesh and rmm domains. You don't have to put these records in your public DNS servers Note: You still must have an internet resolvable domain name and add the DNS TXT record to its public DNS server for the Let's Encrypt wildcard cert request process that is part of the install process. This does not require any inbound connection from the internet (port forwarding etc) to be enabled. This does not expose your RMM server to the internet in any way. The Let's Encrypt wildcard is done for nats I am locked out of the web UI. How do I reset my password? \u00b6 SSH into your server and run: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_password <username> How do I reset password or 2 factor token? \u00b6 From the web UI, click Settings > User Administration and then right-click on a user: Reset Password or 2FA token standard docker /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_2fa <username> docker exec -it trmm-backend /bin/bash Then simply log out of the web UI and next time the user logs in they will be redirected to the 2FA setup page which will present a barcode to be scanned with the Authenticator app. How do I recover my MeshCentral login credentials? \u00b6 From Tactical's web UI: Settings > Global Settings > MeshCentral Copy the username then ssh into the server and run: cd /meshcentral/ sudo systemctl stop meshcentral.service node node_modules/meshcentral --resetaccount <username> --pass <newpassword> sudo systemctl start meshcentral.service Help! I've been hacked there are weird agents appearing in my Tactical RMM \u00b6 No, you haven't. Your installer was scanned by an antivirus. It didn't recognize the exe. You have the option enabled to submit unknown applications for analysis. They ran it against their virtualization testing cluster. You allow anyone to connect to your rmm server (you should look into techniques to hide your server from the internet). Here are some examples of what that looks like. DNS can't find record \u00b6 Q. My dns isn\u2019t working. A. Make sure it\u2019s correctly formatted, most DNS providers add in the domain automatically. Self-Signed Certs \u00b6 Q. Why can\u2019t I use a self signed certificate for web etc. A. NATS over TLS needs a real certificate signed with a trusted root certificate. If you aren't a dev in a non-production environment, don't run nats with self signed certs: https://docs.nats.io/running-a-nats-service/configuration/securing_nats/tls#self-signed-certificates-for-testing License FAQ \u00b6 Question 1: Is okay if we as an MSP, use the RMM to monitor our customers, but charge them for this service? Answer 1: Yes please use it and charge your customers for it.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#is-tactical-rmm-vulnerable-to-log4j","text":"No","title":"Is Tactical RMM vulnerable to Log4j"},{"location":"faq/#why-isnt-the-code-signing-free","text":"It's one way we're trying to monetize and get dev's paid. We had github sponsors up for many months before code signing. Very few people donated, some $5 and $10. maybe $40 a month. Once we announced code signing, sponsors came in like crazy, and many people upgraded their $5 to a $50 so while I would like to believe people would gladly donate, that's just not the case. We already tried.","title":"Why isn't the Code Signing free?"},{"location":"faq/#linux-agent","text":"While linux support is in the post-alpha/beta mode: Code signing makes linux installs easy and is a benefit offered to code signing sponsors DIYer can read thru the code and....DIY This is primarily for 2 reasons: As this has been a sponsorship goal it seems only fair that those who contributed to make this a reality get early access to easy linux agent installs We're looking for good bug reports from active users to get the linux agent into production ready code.","title":"Linux Agent"},{"location":"faq/#who-is-amidaware-llc","text":"The Legal entity behind Tactical RMM","title":"Who is Amidaware LLC?"},{"location":"faq/#is-it-possible-to-use-xxx-with-tactical-rmm","text":"While it may be possible to use XXX, we have not configured it and therefore it is Unsupported . We cannot help you configure XXX as it pertains to your environment .","title":"Is it possible to use XXX with Tactical RMM"},{"location":"faq/#is-it-possible-to-use-xxx-proxy-server-with-tactical-rmm","text":"If you wish to stray from the easy install of a standard install in a VPS, you need to have the knowledge on how to troubleshoot your own custom environment. The most common reasons you're running a proxy is: Because you only have a single public IP and you already have something on Port 443. Workaround : Get another public IP from your ISP Because you want to monitor traffic for security reasons: You're a Networking Wizard . There are some implementations that others have done, but be aware it is Unsupported and if you're requesting help in Discord please let us know in advance.","title":"Is it possible to use XXX proxy server with Tactical RMM"},{"location":"faq/#how-do-i-do-x-feature-in-the-web-ui","text":"A lot of features in the web UI are hidden behind right-click menus; almost everything has a right click menu so if you don't see something, try right clicking on it.","title":"How do I do X feature in the web UI?"},{"location":"faq/#where-are-the-mac-agents","text":"Mac agents are currently under development. MeshCentral is a 2nd piece of software that installs along TRMM, it is Mac compatible but will only work when using your https://mesh.EXAMPLE.COM URL. It will NOT make agents appear in the TRMM admin interface. See the MeshCentral User Guide on how to configure/use MeshCentral.","title":"Where are the Mac agents?"},{"location":"faq/#can-i-run-tactical-rmm-locally-behind-nat-without-exposing-my-rmm-server-to-the-internet","text":"Yes, you will just need to setup local DNS for the 3 subdomains, either by editing host files on all your agents or through a local DNS server. Similarly asked: Can I use onsite DNS servers (I don\u2019t want my server accessible from the internet). Yes, you can use (only) internal DNS (if you want) for api, mesh and rmm domains. You don't have to put these records in your public DNS servers Note: You still must have an internet resolvable domain name and add the DNS TXT record to its public DNS server for the Let's Encrypt wildcard cert request process that is part of the install process. This does not require any inbound connection from the internet (port forwarding etc) to be enabled. This does not expose your RMM server to the internet in any way. The Let's Encrypt wildcard is done for nats","title":"Can I run Tactical RMM locally behind NAT without exposing my RMM server to the internet?"},{"location":"faq/#i-am-locked-out-of-the-web-ui-how-do-i-reset-my-password","text":"SSH into your server and run: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_password <username>","title":"I am locked out of the web UI. How do I reset my password?"},{"location":"faq/#how-do-i-reset-password-or-2-factor-token","text":"From the web UI, click Settings > User Administration and then right-click on a user: Reset Password or 2FA token standard docker /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_2fa <username> docker exec -it trmm-backend /bin/bash Then simply log out of the web UI and next time the user logs in they will be redirected to the 2FA setup page which will present a barcode to be scanned with the Authenticator app.","title":"How do I reset password or 2 factor token?"},{"location":"faq/#how-do-i-recover-my-meshcentral-login-credentials","text":"From Tactical's web UI: Settings > Global Settings > MeshCentral Copy the username then ssh into the server and run: cd /meshcentral/ sudo systemctl stop meshcentral.service node node_modules/meshcentral --resetaccount <username> --pass <newpassword> sudo systemctl start meshcentral.service","title":"How do I recover my MeshCentral login credentials?"},{"location":"faq/#help-ive-been-hacked-there-are-weird-agents-appearing-in-my-tactical-rmm","text":"No, you haven't. Your installer was scanned by an antivirus. It didn't recognize the exe. You have the option enabled to submit unknown applications for analysis. They ran it against their virtualization testing cluster. You allow anyone to connect to your rmm server (you should look into techniques to hide your server from the internet). Here are some examples of what that looks like.","title":"Help! I've been hacked there are weird agents appearing in my Tactical RMM"},{"location":"faq/#dns-cant-find-record","text":"Q. My dns isn\u2019t working. A. Make sure it\u2019s correctly formatted, most DNS providers add in the domain automatically.","title":"DNS can't find record"},{"location":"faq/#self-signed-certs","text":"Q. Why can\u2019t I use a self signed certificate for web etc. A. NATS over TLS needs a real certificate signed with a trusted root certificate. If you aren't a dev in a non-production environment, don't run nats with self signed certs: https://docs.nats.io/running-a-nats-service/configuration/securing_nats/tls#self-signed-certificates-for-testing","title":"Self-Signed Certs"},{"location":"faq/#license-faq","text":"Question 1: Is okay if we as an MSP, use the RMM to monitor our customers, but charge them for this service? Answer 1: Yes please use it and charge your customers for it.","title":"License FAQ"},{"location":"guide_gettingstarted/","text":"TLRD Version \u00b6 At Install \u00b6 Setup Email Alerts Setup SMS Alerts Setup Server Preferences General Time Zone Clear faults on agents that haven't checked in after (days) Setup Automation Manager Default Profile for workstations Every 75 days \u00b6 OS updates reboot Backup TRMM Update Biannually \u00b6","title":"TLRD Version"},{"location":"guide_gettingstarted/#tlrd-version","text":"","title":"TLRD Version"},{"location":"guide_gettingstarted/#at-install","text":"Setup Email Alerts Setup SMS Alerts Setup Server Preferences General Time Zone Clear faults on agents that haven't checked in after (days) Setup Automation Manager Default Profile for workstations","title":"At Install"},{"location":"guide_gettingstarted/#every-75-days","text":"OS updates reboot Backup TRMM Update","title":"Every 75 days"},{"location":"guide_gettingstarted/#biannually","text":"","title":"Biannually"},{"location":"howitallworks/","text":"How It All Works \u00b6 Understanding TRMM \u00b6 Anything you configure: scripts, tasks, patching etc is queued and scheduled on the server to do something. Everything that is queued, happens immediately when agents are online. The agent gets a nats command, server tells it to do xyz and it does it. When agents are not connected to the server nothing happens. The windows task scheduler says do x at some time, what it's asked to do is get x command from the server. If server is offline, nothing happens. If an agent comes online, every x interval (windows update, pending tasks etc) check and see is there something for me to do that I missed while I was offline. When that time occurs (eg agent sees if it needs to update itself at 35mins past every hr Update Agents ) it'll get requested on the online agent. That's the simplified general rule for everything TRMM. Still need graphics for 1. Agent installer steps 2. Agent checks/tasks and how they work on the workstation/interact with server Server \u00b6 Has a postgres database located here: Django Admin Description A web interface for the postgres database All Tactical RMM dependencies are listed here A complete list of all packages used by Tactical RMM are listed here Outbound Firewall Rules \u00b6 If you have strict firewall rules these are the only outbound rules from the server needed for all functionality: Outbound traffic to all agent IP scopes for reflect traffic from agents Server without Code Signing key \u00b6 No additional rules needed Server with Code Signing key \u00b6 No additional rules needed System Services \u00b6 This lists the system services used by the server. nginx web server \u00b6 Nginx is the web server for the rmm , api , and mesh domains. All sites redirect port 80 (HTTP) to port 443 (HTTPS). Warning nginx does not serve the NATS service on port 4222. nginx configuration (a.k.a. sites available) nginx configuration docs rmm.example.com api.example.com mesh.example.com default This serves the frontend website that you interact with. Config: /etc/nginx/sites-enabled/frontend.conf root: /var/www/rmm/dist Access log: /var/log/nginx/frontend-access.log Error log: /var/log/nginx/frontend-error.log TLS certificate: /etc/letsencrypt/live/example.com/fullchain.pem This serves the TRMM API for the frontend and agents. Config: /etc/nginx/sites-enabled/rmm.conf roots: /rmm/api/tacticalrmm/static/ /rmm/api/tacticalrmm/tacticalrmm/private/ Upstreams: unix://rmm/api/tacticalrmm/tacticalrmm.sock unix://rmm/daphne.sock Access log: /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log Error log: /rmm/api/tacticalrmm/tacticalrmm/private/log/error.log TLS certificate: /etc/letsencrypt/live/example.com/fullchain.pem This serves MeshCentral for remote access. Config: /etc/nginx/sites-enabled/meshcentral.conf Upstream: http://127.0.0.1:4430/ Access log: /var/log/nginx/access.log (uses default) Error log: /var/log/nginx/error.log (uses default) TLS certificate: /etc/letsencrypt/live/example.com/fullchain.pem This is the default site installed with nginx. This listens on port 80 only. Config: /etc/nginx/sites-enabled/default root: /var/www/rmm/dist Access log: /var/log/nginx/access.log (uses default) Error log: /var/log/nginx/error.log (uses default) systemd config status commands standard docker Status: systemctl status --full nginx.service Stop: systemctl stop nginx.service Start: systemctl start nginx.service Restart: systemctl restart nginx.service Restart: systemctl reload nginx.service reloads the config without restarting Test config: nginx -t Listening process: ss -tulnp | grep nginx Service: nginx.service Address: 0.0.0.0 Port: 443 Exec: /usr/sbin/nginx -g 'daemon on; master_process on;' Version: 1.18.0 From the docker host view container status - docker ps --filter \"name=trmm-nginx\" View logs: docker-compose logs tactical-nginx \"tail\" logs: docker-compose logs tactical-nginx | tail Shell access: docker exec -it trmm-nginx /bin/bash Tactical RMM (Django uWSGI) service \u00b6 Built on the Django framework, the Tactical RMM service is the heart of the system by serving the API for the frontend and agents. uWSGI config uWSGI docs status commands standard docker Status: systemctl status --full rmm.service Stop: systemctl stop rmm.service Start: systemctl start rmm.service Restart: systemctl restart rmm.service journalctl: \"tail\" the logs: journalctl --identifier uwsgi --follow View the logs: journalctl --identifier uwsgi --since \"30 minutes ago\" | less Debug logs for 5xx errors will be located in /rmm/api/tacticalrmm/tacticalrmm/private/logs Service: rmm.service Socket: /rmm/api/tacticalrmm/tacticalrmm.sock uWSGI config: /rmm/api/tacticalrmm/app.ini Log: None Journal identifier: uwsgi Version: 2.0.18 From the docker host view container status - docker ps --filter \"name=trmm-backend\" View logs: docker-compose logs tactical-backend \"tail\" logs: docker-compose logs tactical-backend | tail Shell access: docker exec -it trmm-backend /bin/bash Daphne: Django channels daemon \u00b6 Daphne is the official ASGI HTTP/WebSocket server maintained by the Channels project . Daphne config Django Channels configuration docs status commands standard docker Status: systemctl status --full daphne.service Stop: systemctl stop daphne.service Start: systemctl start daphne.service Restart: systemctl restart daphne.service journalctl (this provides only system start/stop logs, not the actual logs): \"tail\" the logs: journalctl --identifier daphne --follow View the logs: journalctl --identifier daphne --since \"30 minutes ago\" | less Service: daphne.service Socket: /rmm/daphne.sock Exec: /rmm/api/env/bin/daphne -u /rmm/daphne.sock tacticalrmm.asgi:application Config: /rmm/api/tacticalrmm/tacticalrmm/local_settings.py Log: /rmm/api/tacticalrmm/tacticalrmm/private/log/debug.log From the docker host view container status - docker ps --filter \"name=trmm-websockets\" View logs: docker-compose logs tactical-websockets \"tail\" logs: docker-compose logs tactical-websockets | tail Shell access: docker exec -it trmm-websockets /bin/bash NATS server service \u00b6 NATS is a messaging bus for \"live\" communication between the agent and server. NATS provides the framework for the server to push commands to the agent and receive information back. NATS config NATS server configuration docs status commands standard docker Status: systemctl status --full nats.service Stop: systemctl stop nats.service Start: systemctl start nats.service Restart: systemctl restart nats.service Restart: systemctl reload nats.service reloads the config without restarting journalctl: \"tail\" the logs: journalctl --identifier nats-server --follow View the logs: journalctl --identifier nats-server --since \"30 minutes ago\" | less Listening process: ss -tulnp | grep nats-server Service: nats.service Address: 0.0.0.0 Port: 4222 Exec: /usr/local/bin/nats-server --config /rmm/api/tacticalrmm/nats-rmm.conf Config: /rmm/api/tacticalrmm/nats-rmm.conf TLS: /etc/letsencrypt/live/example.com/fullchain.pem Log: None Version: v2.3.3 Get into bash in your docker with: docker exec -it trmm-nats /bin/bash Log: nats-api -log debug Shell access: docker exec -it trmm-nats /bin/bash NATS API service \u00b6 The NATS API service is a very light golang wrapper to replace traditional http requests sent to django. The agent sends the data to nats-api which is always listening for agent requests (on Port 4222). It then saves the data to postgres directly. NATS API config status commands standard docker Status: systemctl status --full nats-api.service Stop: systemctl stop nats-api.service Start: systemctl start nats-api.service Restart: systemctl restart nats-api.service journalctl: This application does not appear to log anything. Service: nats-api.service Exec: /usr/local/bin/nats-api --config /rmm/api/tacticalrmm/nats-api.conf Config: /rmm/api/tacticalrmm/nats-api.conf TLS: /etc/letsencrypt/live/example.com/fullchain.pem Log: None Get into bash in your docker with: docker exec -it trmm-nats /bin/bash Log: nats-api -log debug Celery service \u00b6 Celery is a task queue focused on real-time processing and is responsible for scheduling tasks to be sent to agents. Log located at /var/log/celery celery config Celery docs Celery configuration docs status commands standard docker Status: systemctl status --full celery.service Stop: systemctl stop celery.service Start: systemctl start celery.service Restart: systemctl restart celery.service journalctl: Celery executes sh causing the systemd identifier to be sh , thus mixing the celery and celerybeat logs together. \"tail\" the logs: journalctl --identifier sh --follow View the logs: journalctl --identifier sh --since \"30 minutes ago\" | less Tail logs: tail -F /var/log/celery/w*-*.log Service: celery.service Exec: /bin/sh -c '${CELERY_BIN} -A $CELERY_APP multi start $CELERYD_NODES --pidfile=${CELERYD_PID_FILE} --logfile=${CELERYD_LOG_FILE} --loglevel=\"${CELERYD_LOG_LEVEL}\" $CELERYD_OPTS' Config: /etc/conf.d/celery.conf Log: /var/log/celery/w*-*.log From the docker host view container status - docker ps --filter \"name=trmm-celery\" View logs: docker-compose logs tactical-celery \"tail\" logs: docker-compose logs tactical-celery | tail Shell access: docker exec -it trmm-celery /bin/bash Celery Beat service \u00b6 celery beat is a scheduler; It kicks off tasks at regular intervals, that are then executed by available worker nodes in the cluster. Celery Beat config Celery beat docs status commands standard docker Status: systemctl status --full celerybeat.service Stop: systemctl stop celerybeat.service Start: systemctl start celerybeat.service Restart: systemctl restart celerybeat.service journalctl: Celery executes sh causing the systemd identifier to be sh , thus mixing the celery and celerybeat logs together. \"tail\" the logs: journalctl --identifier sh --follow View the logs: journalctl --identifier sh --since \"30 minutes ago\" | less Tail logs: tail -F /var/log/celery/beat.log Service: celerybeat.service Exec: /bin/sh -c '${CELERY_BIN} -A ${CELERY_APP} beat --pidfile=${CELERYBEAT_PID_FILE} --logfile=${CELERYBEAT_LOG_FILE} --loglevel=${CELERYD_LOG_LEVEL}' Config: /etc/redis/redis.conf Log: /var/log/celery/beat.log From the docker host view container status - docker ps --filter \"name=trmm-celerybeat\" View logs: docker-compose logs tactical-celerybeat \"tail\" logs: docker-compose logs tactical-celerybeat | tail Shell access: docker exec -it trmm-celerybeat /bin/bash redis service \u00b6 redis is an in-memory data structure store, used as a database, cache, and message broker for django/celery. Log located at /var/log/redis redis config Redis docs status commands standard docker Status: systemctl status --full redis-server.service Stop: systemctl stop redis-server.service Start: systemctl start redis-server.service Restart: systemctl restart redis-server.service Tail logs: tail -F /var/log/redis/redis-server.log Service: redis-server.service Log: /var/log/redis/redis-server.log From the docker host view container status - docker ps --filter \"name=trmm-redis\" View logs: docker-compose logs tactical-redis \"tail\" logs: docker-compose logs tactical-redis | tail Shell access: docker exec -it trmm-redis /bin/bash MeshCentral \u00b6 MeshCentral is used for: \"Take Control\" (connecting to machine for remote access), and 2 screens of the \"Remote Background\" (Terminal, and File Browser). meshcentral MeshCentral docs status commands docker Debugging Status: systemctl status --full meshcentral Stop: systemctl stop meshcentral Start: systemctl start meshcentral Restart: systemctl restart meshcentral From the docker host view container status - docker ps --filter \"name=trmm-meshcentral\" View logs: docker-compose logs tactical-meshcentral \"tail\" logs: docker-compose logs tactical-meshcentral | tail Shell access: docker exec -it trmm-meshcentral /bin/bash Open either \"Take Control\" or \"Remote Background\" to get mesh login token Open https://mesh.example.com to open native mesh admin interface Left-side \"My Server\" > Choose \"Console\" > type agentstats To view detailed logging goto \"Trace\" > click Tracing button and choose categories MeshCentral Agent \u00b6 Get Mesh Agent Version info with this command. Should match server version. \"C:\\Program Files\\Mesh Agent\\MeshAgent.exe\" -info\" Compare the hash with the tags in the repo at https://github.com/Ylianst/MeshAgent/tags Other Dependencies \u00b6 Django - Framework to integrate the server to interact with browser. Django dependencies future==0.18.2 loguru==0.5.3 msgpack==1.0.2 packaging==20.9 psycopg2-binary==2.9.1 pycparser==2.20 pycryptodome==3.10.1 pyotp==2.6.0 pyparsing==2.4.7 pytz==2021.1 qrcode - Creating QR codes for 2FA. qrcode dependencies requests==2.25.1 six==1.16.0 sqlparse==0.4.1 twilio - Python SMS notification integration. twilio dependencies urllib3==1.26.5 uWSGI==2.0.19.1 validators==0.18.2 vine==5.0.0 websockets==9.1 zipp==3.4.1 Windows Agent \u00b6 Found in %programfiles%\\TacticalAgent When scripts/checks execute, they are: transferred from the server via nats saved to a randomly created file in c:\\windows\\temp\\trmm\\ executed Return info is captured and returned to the server via nats File in c:\\windows\\temp\\trmm\\ are removed automatically after execution/timeout. Outbound Firewall Rules \u00b6 If you have strict firewall rules these are the only outbound rules from the agent needed for all functionality: All agents have to be able to connect outbound to TRMM server on the 3 domain names on ports: 443 (agent and mesh) and 4222 (nats for checks/tasks/data) The agent uses https://icanhazip.tacticalrmm.io/ to get public IP info. If this site is down for whatever reason, the agent will fallback to https://icanhazip.com and then https://ifconfig.co/ip Unsigned Agents \u00b6 Unsigned agents require access to: https://github.com/amidaware/rmmagent/releases/* Signed Agents \u00b6 Signed agents will require: https://agents.tacticalrmm.com for downloading/updating agents Agent Installation Process \u00b6 Adds Defender AV exclusions Copies temp files to c:\\windows\\temp\\tacticalxxx folder. INNO setup installs app into %ProgramData%\\TacticalAgent\\ folder Agent Update Process \u00b6 Downloads latest winagent-vx.x.x-x86/64.exe to %programfiles% Executes the file (INNO setup exe) Files create c:\\Windows\\temp\\Tacticalxxxx\\ folder for install (and log files) Agent Debugging \u00b6 Mesh Agent Recovery \u00b6 Tactical Agent Recovery \u00b6 Windows Update Management \u00b6 Tactical RMM Agent sets: HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU AUOptions (REG_DWORD): 1: Keep my computer up to date is disabled in Automatic Updates. Uses this Microsoft API to handle updates: https://docs.microsoft.com/en-us/windows/win32/api/_wua/ Server Queries Agent every 8hrs to check for update status. Log files \u00b6 You can find 3 sets of detailed logs at /rmm/api/tacticalrmm/tacticalrmm/private/log error.log nginx log for all errors on all TRMM URL's: rmm, api and mesh access.log nginx log for access auditing on all URL's: rmm, api and mesh ( this is a large file, and should be cleaned periodically ) django_debug.log created by django webapp","title":"How it all Works"},{"location":"howitallworks/#how-it-all-works","text":"","title":"How It All Works"},{"location":"howitallworks/#understanding-trmm","text":"Anything you configure: scripts, tasks, patching etc is queued and scheduled on the server to do something. Everything that is queued, happens immediately when agents are online. The agent gets a nats command, server tells it to do xyz and it does it. When agents are not connected to the server nothing happens. The windows task scheduler says do x at some time, what it's asked to do is get x command from the server. If server is offline, nothing happens. If an agent comes online, every x interval (windows update, pending tasks etc) check and see is there something for me to do that I missed while I was offline. When that time occurs (eg agent sees if it needs to update itself at 35mins past every hr Update Agents ) it'll get requested on the online agent. That's the simplified general rule for everything TRMM. Still need graphics for 1. Agent installer steps 2. Agent checks/tasks and how they work on the workstation/interact with server","title":"Understanding TRMM"},{"location":"howitallworks/#server","text":"Has a postgres database located here: Django Admin Description A web interface for the postgres database All Tactical RMM dependencies are listed here A complete list of all packages used by Tactical RMM are listed here","title":"Server"},{"location":"howitallworks/#outbound-firewall-rules","text":"If you have strict firewall rules these are the only outbound rules from the server needed for all functionality: Outbound traffic to all agent IP scopes for reflect traffic from agents","title":"Outbound Firewall Rules"},{"location":"howitallworks/#server-without-code-signing-key","text":"No additional rules needed","title":"Server without Code Signing key"},{"location":"howitallworks/#server-with-code-signing-key","text":"No additional rules needed","title":"Server with Code Signing key"},{"location":"howitallworks/#system-services","text":"This lists the system services used by the server.","title":"System Services"},{"location":"howitallworks/#nginx-web-server","text":"Nginx is the web server for the rmm , api , and mesh domains. All sites redirect port 80 (HTTP) to port 443 (HTTPS). Warning nginx does not serve the NATS service on port 4222. nginx configuration (a.k.a. sites available) nginx configuration docs rmm.example.com api.example.com mesh.example.com default This serves the frontend website that you interact with. Config: /etc/nginx/sites-enabled/frontend.conf root: /var/www/rmm/dist Access log: /var/log/nginx/frontend-access.log Error log: /var/log/nginx/frontend-error.log TLS certificate: /etc/letsencrypt/live/example.com/fullchain.pem This serves the TRMM API for the frontend and agents. Config: /etc/nginx/sites-enabled/rmm.conf roots: /rmm/api/tacticalrmm/static/ /rmm/api/tacticalrmm/tacticalrmm/private/ Upstreams: unix://rmm/api/tacticalrmm/tacticalrmm.sock unix://rmm/daphne.sock Access log: /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log Error log: /rmm/api/tacticalrmm/tacticalrmm/private/log/error.log TLS certificate: /etc/letsencrypt/live/example.com/fullchain.pem This serves MeshCentral for remote access. Config: /etc/nginx/sites-enabled/meshcentral.conf Upstream: http://127.0.0.1:4430/ Access log: /var/log/nginx/access.log (uses default) Error log: /var/log/nginx/error.log (uses default) TLS certificate: /etc/letsencrypt/live/example.com/fullchain.pem This is the default site installed with nginx. This listens on port 80 only. Config: /etc/nginx/sites-enabled/default root: /var/www/rmm/dist Access log: /var/log/nginx/access.log (uses default) Error log: /var/log/nginx/error.log (uses default) systemd config status commands standard docker Status: systemctl status --full nginx.service Stop: systemctl stop nginx.service Start: systemctl start nginx.service Restart: systemctl restart nginx.service Restart: systemctl reload nginx.service reloads the config without restarting Test config: nginx -t Listening process: ss -tulnp | grep nginx Service: nginx.service Address: 0.0.0.0 Port: 443 Exec: /usr/sbin/nginx -g 'daemon on; master_process on;' Version: 1.18.0 From the docker host view container status - docker ps --filter \"name=trmm-nginx\" View logs: docker-compose logs tactical-nginx \"tail\" logs: docker-compose logs tactical-nginx | tail Shell access: docker exec -it trmm-nginx /bin/bash","title":"nginx web server"},{"location":"howitallworks/#tactical-rmm-django-uwsgi-service","text":"Built on the Django framework, the Tactical RMM service is the heart of the system by serving the API for the frontend and agents. uWSGI config uWSGI docs status commands standard docker Status: systemctl status --full rmm.service Stop: systemctl stop rmm.service Start: systemctl start rmm.service Restart: systemctl restart rmm.service journalctl: \"tail\" the logs: journalctl --identifier uwsgi --follow View the logs: journalctl --identifier uwsgi --since \"30 minutes ago\" | less Debug logs for 5xx errors will be located in /rmm/api/tacticalrmm/tacticalrmm/private/logs Service: rmm.service Socket: /rmm/api/tacticalrmm/tacticalrmm.sock uWSGI config: /rmm/api/tacticalrmm/app.ini Log: None Journal identifier: uwsgi Version: 2.0.18 From the docker host view container status - docker ps --filter \"name=trmm-backend\" View logs: docker-compose logs tactical-backend \"tail\" logs: docker-compose logs tactical-backend | tail Shell access: docker exec -it trmm-backend /bin/bash","title":"Tactical RMM (Django uWSGI) service"},{"location":"howitallworks/#daphne-django-channels-daemon","text":"Daphne is the official ASGI HTTP/WebSocket server maintained by the Channels project . Daphne config Django Channels configuration docs status commands standard docker Status: systemctl status --full daphne.service Stop: systemctl stop daphne.service Start: systemctl start daphne.service Restart: systemctl restart daphne.service journalctl (this provides only system start/stop logs, not the actual logs): \"tail\" the logs: journalctl --identifier daphne --follow View the logs: journalctl --identifier daphne --since \"30 minutes ago\" | less Service: daphne.service Socket: /rmm/daphne.sock Exec: /rmm/api/env/bin/daphne -u /rmm/daphne.sock tacticalrmm.asgi:application Config: /rmm/api/tacticalrmm/tacticalrmm/local_settings.py Log: /rmm/api/tacticalrmm/tacticalrmm/private/log/debug.log From the docker host view container status - docker ps --filter \"name=trmm-websockets\" View logs: docker-compose logs tactical-websockets \"tail\" logs: docker-compose logs tactical-websockets | tail Shell access: docker exec -it trmm-websockets /bin/bash","title":"Daphne: Django channels daemon"},{"location":"howitallworks/#nats-server-service","text":"NATS is a messaging bus for \"live\" communication between the agent and server. NATS provides the framework for the server to push commands to the agent and receive information back. NATS config NATS server configuration docs status commands standard docker Status: systemctl status --full nats.service Stop: systemctl stop nats.service Start: systemctl start nats.service Restart: systemctl restart nats.service Restart: systemctl reload nats.service reloads the config without restarting journalctl: \"tail\" the logs: journalctl --identifier nats-server --follow View the logs: journalctl --identifier nats-server --since \"30 minutes ago\" | less Listening process: ss -tulnp | grep nats-server Service: nats.service Address: 0.0.0.0 Port: 4222 Exec: /usr/local/bin/nats-server --config /rmm/api/tacticalrmm/nats-rmm.conf Config: /rmm/api/tacticalrmm/nats-rmm.conf TLS: /etc/letsencrypt/live/example.com/fullchain.pem Log: None Version: v2.3.3 Get into bash in your docker with: docker exec -it trmm-nats /bin/bash Log: nats-api -log debug Shell access: docker exec -it trmm-nats /bin/bash","title":"NATS server service"},{"location":"howitallworks/#nats-api-service","text":"The NATS API service is a very light golang wrapper to replace traditional http requests sent to django. The agent sends the data to nats-api which is always listening for agent requests (on Port 4222). It then saves the data to postgres directly. NATS API config status commands standard docker Status: systemctl status --full nats-api.service Stop: systemctl stop nats-api.service Start: systemctl start nats-api.service Restart: systemctl restart nats-api.service journalctl: This application does not appear to log anything. Service: nats-api.service Exec: /usr/local/bin/nats-api --config /rmm/api/tacticalrmm/nats-api.conf Config: /rmm/api/tacticalrmm/nats-api.conf TLS: /etc/letsencrypt/live/example.com/fullchain.pem Log: None Get into bash in your docker with: docker exec -it trmm-nats /bin/bash Log: nats-api -log debug","title":"NATS API service"},{"location":"howitallworks/#celery-service","text":"Celery is a task queue focused on real-time processing and is responsible for scheduling tasks to be sent to agents. Log located at /var/log/celery celery config Celery docs Celery configuration docs status commands standard docker Status: systemctl status --full celery.service Stop: systemctl stop celery.service Start: systemctl start celery.service Restart: systemctl restart celery.service journalctl: Celery executes sh causing the systemd identifier to be sh , thus mixing the celery and celerybeat logs together. \"tail\" the logs: journalctl --identifier sh --follow View the logs: journalctl --identifier sh --since \"30 minutes ago\" | less Tail logs: tail -F /var/log/celery/w*-*.log Service: celery.service Exec: /bin/sh -c '${CELERY_BIN} -A $CELERY_APP multi start $CELERYD_NODES --pidfile=${CELERYD_PID_FILE} --logfile=${CELERYD_LOG_FILE} --loglevel=\"${CELERYD_LOG_LEVEL}\" $CELERYD_OPTS' Config: /etc/conf.d/celery.conf Log: /var/log/celery/w*-*.log From the docker host view container status - docker ps --filter \"name=trmm-celery\" View logs: docker-compose logs tactical-celery \"tail\" logs: docker-compose logs tactical-celery | tail Shell access: docker exec -it trmm-celery /bin/bash","title":"Celery service"},{"location":"howitallworks/#celery-beat-service","text":"celery beat is a scheduler; It kicks off tasks at regular intervals, that are then executed by available worker nodes in the cluster. Celery Beat config Celery beat docs status commands standard docker Status: systemctl status --full celerybeat.service Stop: systemctl stop celerybeat.service Start: systemctl start celerybeat.service Restart: systemctl restart celerybeat.service journalctl: Celery executes sh causing the systemd identifier to be sh , thus mixing the celery and celerybeat logs together. \"tail\" the logs: journalctl --identifier sh --follow View the logs: journalctl --identifier sh --since \"30 minutes ago\" | less Tail logs: tail -F /var/log/celery/beat.log Service: celerybeat.service Exec: /bin/sh -c '${CELERY_BIN} -A ${CELERY_APP} beat --pidfile=${CELERYBEAT_PID_FILE} --logfile=${CELERYBEAT_LOG_FILE} --loglevel=${CELERYD_LOG_LEVEL}' Config: /etc/redis/redis.conf Log: /var/log/celery/beat.log From the docker host view container status - docker ps --filter \"name=trmm-celerybeat\" View logs: docker-compose logs tactical-celerybeat \"tail\" logs: docker-compose logs tactical-celerybeat | tail Shell access: docker exec -it trmm-celerybeat /bin/bash","title":"Celery Beat service"},{"location":"howitallworks/#redis-service","text":"redis is an in-memory data structure store, used as a database, cache, and message broker for django/celery. Log located at /var/log/redis redis config Redis docs status commands standard docker Status: systemctl status --full redis-server.service Stop: systemctl stop redis-server.service Start: systemctl start redis-server.service Restart: systemctl restart redis-server.service Tail logs: tail -F /var/log/redis/redis-server.log Service: redis-server.service Log: /var/log/redis/redis-server.log From the docker host view container status - docker ps --filter \"name=trmm-redis\" View logs: docker-compose logs tactical-redis \"tail\" logs: docker-compose logs tactical-redis | tail Shell access: docker exec -it trmm-redis /bin/bash","title":"redis service"},{"location":"howitallworks/#meshcentral","text":"MeshCentral is used for: \"Take Control\" (connecting to machine for remote access), and 2 screens of the \"Remote Background\" (Terminal, and File Browser). meshcentral MeshCentral docs status commands docker Debugging Status: systemctl status --full meshcentral Stop: systemctl stop meshcentral Start: systemctl start meshcentral Restart: systemctl restart meshcentral From the docker host view container status - docker ps --filter \"name=trmm-meshcentral\" View logs: docker-compose logs tactical-meshcentral \"tail\" logs: docker-compose logs tactical-meshcentral | tail Shell access: docker exec -it trmm-meshcentral /bin/bash Open either \"Take Control\" or \"Remote Background\" to get mesh login token Open https://mesh.example.com to open native mesh admin interface Left-side \"My Server\" > Choose \"Console\" > type agentstats To view detailed logging goto \"Trace\" > click Tracing button and choose categories","title":"MeshCentral"},{"location":"howitallworks/#meshcentral-agent","text":"Get Mesh Agent Version info with this command. Should match server version. \"C:\\Program Files\\Mesh Agent\\MeshAgent.exe\" -info\" Compare the hash with the tags in the repo at https://github.com/Ylianst/MeshAgent/tags","title":"MeshCentral Agent"},{"location":"howitallworks/#other-dependencies","text":"Django - Framework to integrate the server to interact with browser. Django dependencies future==0.18.2 loguru==0.5.3 msgpack==1.0.2 packaging==20.9 psycopg2-binary==2.9.1 pycparser==2.20 pycryptodome==3.10.1 pyotp==2.6.0 pyparsing==2.4.7 pytz==2021.1 qrcode - Creating QR codes for 2FA. qrcode dependencies requests==2.25.1 six==1.16.0 sqlparse==0.4.1 twilio - Python SMS notification integration. twilio dependencies urllib3==1.26.5 uWSGI==2.0.19.1 validators==0.18.2 vine==5.0.0 websockets==9.1 zipp==3.4.1","title":"Other Dependencies"},{"location":"howitallworks/#windows-agent","text":"Found in %programfiles%\\TacticalAgent When scripts/checks execute, they are: transferred from the server via nats saved to a randomly created file in c:\\windows\\temp\\trmm\\ executed Return info is captured and returned to the server via nats File in c:\\windows\\temp\\trmm\\ are removed automatically after execution/timeout.","title":"Windows Agent"},{"location":"howitallworks/#outbound-firewall-rules_1","text":"If you have strict firewall rules these are the only outbound rules from the agent needed for all functionality: All agents have to be able to connect outbound to TRMM server on the 3 domain names on ports: 443 (agent and mesh) and 4222 (nats for checks/tasks/data) The agent uses https://icanhazip.tacticalrmm.io/ to get public IP info. If this site is down for whatever reason, the agent will fallback to https://icanhazip.com and then https://ifconfig.co/ip","title":"Outbound Firewall Rules"},{"location":"howitallworks/#unsigned-agents","text":"Unsigned agents require access to: https://github.com/amidaware/rmmagent/releases/*","title":"Unsigned Agents"},{"location":"howitallworks/#signed-agents","text":"Signed agents will require: https://agents.tacticalrmm.com for downloading/updating agents","title":"Signed Agents"},{"location":"howitallworks/#agent-installation-process","text":"Adds Defender AV exclusions Copies temp files to c:\\windows\\temp\\tacticalxxx folder. INNO setup installs app into %ProgramData%\\TacticalAgent\\ folder","title":"Agent Installation Process"},{"location":"howitallworks/#agent-update-process","text":"Downloads latest winagent-vx.x.x-x86/64.exe to %programfiles% Executes the file (INNO setup exe) Files create c:\\Windows\\temp\\Tacticalxxxx\\ folder for install (and log files)","title":"Agent Update Process"},{"location":"howitallworks/#agent-debugging","text":"","title":"Agent Debugging"},{"location":"howitallworks/#mesh-agent-recovery","text":"","title":"Mesh Agent Recovery"},{"location":"howitallworks/#tactical-agent-recovery","text":"","title":"Tactical Agent Recovery"},{"location":"howitallworks/#windows-update-management","text":"Tactical RMM Agent sets: HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU AUOptions (REG_DWORD): 1: Keep my computer up to date is disabled in Automatic Updates. Uses this Microsoft API to handle updates: https://docs.microsoft.com/en-us/windows/win32/api/_wua/ Server Queries Agent every 8hrs to check for update status.","title":"Windows Update Management"},{"location":"howitallworks/#log-files","text":"You can find 3 sets of detailed logs at /rmm/api/tacticalrmm/tacticalrmm/private/log error.log nginx log for all errors on all TRMM URL's: rmm, api and mesh access.log nginx log for access auditing on all URL's: rmm, api and mesh ( this is a large file, and should be cleaned periodically ) django_debug.log created by django webapp","title":"Log files"},{"location":"install_agent/","text":"Installing a Windows agent \u00b6 Warning If you don't want to deal with AV flagging/deleting your agents, check the instructions for getting code signed agents You must add antivirus exlusions for the tactical agent. Any decent AV will flag the agent as a virus, since it technically is one due to the nature of this software. Adding the following exlucions will make sure everything works, including agent update: C:\\Program Files\\TacticalAgent\\* C:\\Program Files\\Mesh Agent\\* C:\\Windows\\Temp\\winagent-v*.exe C:\\Windows\\Temp\\trmm\\* C:\\temp\\tacticalrmm*.exe See here for other screenshot examples Dynamically generated executable \u00b6 The generated exe is simply a wrapper around the Manual install method, using a single exe/command without the need to pass any command line flags to the installer. All it does is download the generic installer from the agent's github release page and call it using predefined command line args that you choose from the web UI. It \"bakes\" the command line args into the executable. From the UI, click Agents > Install Agent You can also right click on a site > Install Agent . This will automatically fill in the client/site dropdown for you. Powershell \u00b6 The powershell method is very similar to the generated exe in that it simply downloads the installer from github and calls the exe for you. Manual \u00b6 The manual installation method requires you to first download the generic installer and call it using command line args. This is useful for scripting the installation using Group Policy or some other batch deployment method. Tip You can reuse the installer for any of the deployment methods, you don't need to constantly create a new installer for each new agent. The installer will be valid for however long you specify the token expiry time when generating an agent. Using a deployment link \u00b6 Creating a deployment link is the recommended way to deploy agents. The main benefit of this method is that the exectuable is generated only whenever the deployment download link is accessed, whereas with the other methods it's generated right away and the agent's version hardcoded into the exe. Using a deployment link will allow you to not worry about installing using an older version of an agent, which will fail to install if you have updated your RMM to a version that is not compatible with an older installer you might have lying around. To create a deployment, from the web UI click Agents > Manage Deployments . Tip Create a client/site named \"Default\" and create a deployment for it with a very long expiry to have a generic installer that can be deployed anytime at any client/site. You can then move the agent into the correct client/site from the web UI after it's been installed. Copy/paste the download link from the deployment into your browser. It will take a few seconds to dynamically generate the executable and then your browser will automatically download the exe. Optional installer args \u00b6 The following optional arguments can be passed to any of the installation method executables: -log debug Will print very verbose logging during agent install. Useful for troubleshooting agent install. -silent This will not popup any message boxes during install, either any error messages or the \"Installation was successfull\" message box that pops up at the end of a successfull install. -proxy \"http://proxyserver:port\" Use a http proxy -meshdir \"C:\\Program Files\\Your Company Name\\Mesh Agent\" Specify the full path to the directory containing MeshAgent.exe if using custom agent branding for your MeshCentral instance. -nomesh Do not install meshcentral agent during tactical agent install. Note: take control, remote terminal and file browser will not work. Scripting Agent Installation \u00b6 If you want to deploy the TRMM agent using AD, intune, mesh, teamviewer, Group Policy GPO etc this is a sample CMD script for deploying Tactical. Note You will need to replace deployment url with your custom deployment URL @ echo off REM Setup deployment URL set \"DeploymentURL=\" set \"Name=\" for /f \"usebackq tokens=* delims=\" %% # in ( `wmic service where \"name like 'tacticalrmm'\" get Name /Format:Value` ) do ( for /f \"tokens=* delims=\" %% g in ( \" %% #\" ) do set \"%%g\" ) if not defined Name ( echo Tactical RMM not found, installing now. if not exist C:\\TEMP\\TRMM md C:\\TEMP\\TRMM powershell Set-ExecutionPolicy -ExecutionPolicy Unrestricted powershell Add-MpPreference -ExclusionPath C:\\TEMP\\TRMM powershell Add-MpPreference -ExclusionPath \"C:\\Program Files\\TacticalAgent\\*\" powershell Add-MpPreference -ExclusionPath C:\\Windows\\Temp\\winagent-v*.exe powershell Add-MpPreference -ExclusionPath \"C:\\Program Files\\Mesh Agent\\*\" powershell Add-MpPreference -ExclusionPath C:\\Windows\\Temp\\TRMM\\* cd c:\\temp\\trmm powershell Invoke-WebRequest \" %DeploymentURL% \" -Outfile tactical.exe REM \"C:\\Program Files\\TacticalAgent\\unins000.exe\" /VERYSILENT tactical.exe powershell Remove-MpPreference -ExclusionPath C:\\TEMP\\TRMM rem exit /b 1 ) else ( echo Tactical RMM already installed Exiting Exit 0 ) There is also a full powershell version here Script for full agent uninstall \u00b6 You can always use this to silently uninstall agent on workstations \"C:\\Program Files\\TacticalAgent\\unins000.exe\" /VERYSILENT Reinstalling mesh and reconnecting to TRMM \u00b6 Run this from Send Command \"C:\\Program Files\\TacticalAgent\\meshagent.exe\" -fullinstall Then use Agent Recovery | Mesh Agent and choose Recover Install Linux Agent (beta) \u00b6 To install: 1. Go to rmm.yourdomain.com and login. 2. Click on Agents > Install Agent 3. Choose the Client, Site, Server or Workstation and Architecture (change expiry if required) as well as Linux. 4. Click Download. 5. If downloaded on the Linux machine you want to add as an agent (otherwise copy to machine using WinSCP or similar) open terminal 6. cd to the folder you have downloaded the script to 7. Run chmod +x rmm-clientname-sitename-type.sh 8. Run sudo ./rmm-clientname-sitename-type.sh and wait for script to complete. If you changed the expiry time you could upload the script to any accessible server and deploy to multiple devices. Linux Deployment Link \u00b6 Currently there are no deploy links for Linux Agents however you could use the following method if uploaded somewhere (website etc). An example deployment script would be: wget scripturl chmod +x rmm.sh ./rmm.sh","title":"Agent Installation"},{"location":"install_agent/#installing-a-windows-agent","text":"Warning If you don't want to deal with AV flagging/deleting your agents, check the instructions for getting code signed agents You must add antivirus exlusions for the tactical agent. Any decent AV will flag the agent as a virus, since it technically is one due to the nature of this software. Adding the following exlucions will make sure everything works, including agent update: C:\\Program Files\\TacticalAgent\\* C:\\Program Files\\Mesh Agent\\* C:\\Windows\\Temp\\winagent-v*.exe C:\\Windows\\Temp\\trmm\\* C:\\temp\\tacticalrmm*.exe See here for other screenshot examples","title":"Installing a Windows agent"},{"location":"install_agent/#dynamically-generated-executable","text":"The generated exe is simply a wrapper around the Manual install method, using a single exe/command without the need to pass any command line flags to the installer. All it does is download the generic installer from the agent's github release page and call it using predefined command line args that you choose from the web UI. It \"bakes\" the command line args into the executable. From the UI, click Agents > Install Agent You can also right click on a site > Install Agent . This will automatically fill in the client/site dropdown for you.","title":"Dynamically generated executable"},{"location":"install_agent/#powershell","text":"The powershell method is very similar to the generated exe in that it simply downloads the installer from github and calls the exe for you.","title":"Powershell"},{"location":"install_agent/#manual","text":"The manual installation method requires you to first download the generic installer and call it using command line args. This is useful for scripting the installation using Group Policy or some other batch deployment method. Tip You can reuse the installer for any of the deployment methods, you don't need to constantly create a new installer for each new agent. The installer will be valid for however long you specify the token expiry time when generating an agent.","title":"Manual"},{"location":"install_agent/#using-a-deployment-link","text":"Creating a deployment link is the recommended way to deploy agents. The main benefit of this method is that the exectuable is generated only whenever the deployment download link is accessed, whereas with the other methods it's generated right away and the agent's version hardcoded into the exe. Using a deployment link will allow you to not worry about installing using an older version of an agent, which will fail to install if you have updated your RMM to a version that is not compatible with an older installer you might have lying around. To create a deployment, from the web UI click Agents > Manage Deployments . Tip Create a client/site named \"Default\" and create a deployment for it with a very long expiry to have a generic installer that can be deployed anytime at any client/site. You can then move the agent into the correct client/site from the web UI after it's been installed. Copy/paste the download link from the deployment into your browser. It will take a few seconds to dynamically generate the executable and then your browser will automatically download the exe.","title":"Using a deployment link"},{"location":"install_agent/#optional-installer-args","text":"The following optional arguments can be passed to any of the installation method executables: -log debug Will print very verbose logging during agent install. Useful for troubleshooting agent install. -silent This will not popup any message boxes during install, either any error messages or the \"Installation was successfull\" message box that pops up at the end of a successfull install. -proxy \"http://proxyserver:port\" Use a http proxy -meshdir \"C:\\Program Files\\Your Company Name\\Mesh Agent\" Specify the full path to the directory containing MeshAgent.exe if using custom agent branding for your MeshCentral instance. -nomesh Do not install meshcentral agent during tactical agent install. Note: take control, remote terminal and file browser will not work.","title":"Optional installer args"},{"location":"install_agent/#scripting-agent-installation","text":"If you want to deploy the TRMM agent using AD, intune, mesh, teamviewer, Group Policy GPO etc this is a sample CMD script for deploying Tactical. Note You will need to replace deployment url with your custom deployment URL @ echo off REM Setup deployment URL set \"DeploymentURL=\" set \"Name=\" for /f \"usebackq tokens=* delims=\" %% # in ( `wmic service where \"name like 'tacticalrmm'\" get Name /Format:Value` ) do ( for /f \"tokens=* delims=\" %% g in ( \" %% #\" ) do set \"%%g\" ) if not defined Name ( echo Tactical RMM not found, installing now. if not exist C:\\TEMP\\TRMM md C:\\TEMP\\TRMM powershell Set-ExecutionPolicy -ExecutionPolicy Unrestricted powershell Add-MpPreference -ExclusionPath C:\\TEMP\\TRMM powershell Add-MpPreference -ExclusionPath \"C:\\Program Files\\TacticalAgent\\*\" powershell Add-MpPreference -ExclusionPath C:\\Windows\\Temp\\winagent-v*.exe powershell Add-MpPreference -ExclusionPath \"C:\\Program Files\\Mesh Agent\\*\" powershell Add-MpPreference -ExclusionPath C:\\Windows\\Temp\\TRMM\\* cd c:\\temp\\trmm powershell Invoke-WebRequest \" %DeploymentURL% \" -Outfile tactical.exe REM \"C:\\Program Files\\TacticalAgent\\unins000.exe\" /VERYSILENT tactical.exe powershell Remove-MpPreference -ExclusionPath C:\\TEMP\\TRMM rem exit /b 1 ) else ( echo Tactical RMM already installed Exiting Exit 0 ) There is also a full powershell version here","title":"Scripting Agent Installation"},{"location":"install_agent/#script-for-full-agent-uninstall","text":"You can always use this to silently uninstall agent on workstations \"C:\\Program Files\\TacticalAgent\\unins000.exe\" /VERYSILENT","title":"Script for full agent uninstall"},{"location":"install_agent/#reinstalling-mesh-and-reconnecting-to-trmm","text":"Run this from Send Command \"C:\\Program Files\\TacticalAgent\\meshagent.exe\" -fullinstall Then use Agent Recovery | Mesh Agent and choose Recover","title":"Reinstalling mesh and reconnecting to TRMM"},{"location":"install_agent/#install-linux-agent-beta","text":"To install: 1. Go to rmm.yourdomain.com and login. 2. Click on Agents > Install Agent 3. Choose the Client, Site, Server or Workstation and Architecture (change expiry if required) as well as Linux. 4. Click Download. 5. If downloaded on the Linux machine you want to add as an agent (otherwise copy to machine using WinSCP or similar) open terminal 6. cd to the folder you have downloaded the script to 7. Run chmod +x rmm-clientname-sitename-type.sh 8. Run sudo ./rmm-clientname-sitename-type.sh and wait for script to complete. If you changed the expiry time you could upload the script to any accessible server and deploy to multiple devices.","title":"Install Linux Agent (beta)"},{"location":"install_agent/#linux-deployment-link","text":"Currently there are no deploy links for Linux Agents however you could use the following method if uploaded somewhere (website etc). An example deployment script would be: wget scripturl chmod +x rmm.sh ./rmm.sh","title":"Linux Deployment Link"},{"location":"install_considerations/","text":"Install Considerations \u00b6 There's pluses and minuses to each install type. Be aware that: There is no migration script, once you've installed with one type there is no \"conversion\". You'll be installing a new server and migrating agents manually if you decide to go another way. Debian vs Ubuntu \u00b6 Base RAM Usage OS 80MB Clean install of Debian 300MB Clean install of Ubuntu Traditional Install \u00b6 It's a VM/machine. One storage device to backup if you want to do VM based backups You have a backup and restore script Much easier to troubleshoot when things go wrong Faster performance / easier to fine tune and customize to your needs Docker Install \u00b6 Docker is more complicated in concept: has volumes and images Backup/restore is via Docker methods only Docker has container replication/mirroring options for redundancy/multiple servers","title":"Install Considerations"},{"location":"install_considerations/#install-considerations","text":"There's pluses and minuses to each install type. Be aware that: There is no migration script, once you've installed with one type there is no \"conversion\". You'll be installing a new server and migrating agents manually if you decide to go another way.","title":"Install Considerations"},{"location":"install_considerations/#debian-vs-ubuntu","text":"Base RAM Usage OS 80MB Clean install of Debian 300MB Clean install of Ubuntu","title":"Debian vs Ubuntu"},{"location":"install_considerations/#traditional-install","text":"It's a VM/machine. One storage device to backup if you want to do VM based backups You have a backup and restore script Much easier to troubleshoot when things go wrong Faster performance / easier to fine tune and customize to your needs","title":"Traditional Install"},{"location":"install_considerations/#docker-install","text":"Docker is more complicated in concept: has volumes and images Backup/restore is via Docker methods only Docker has container replication/mirroring options for redundancy/multiple servers","title":"Docker Install"},{"location":"install_docker/","text":"Docker Setup \u00b6 1. Install Docker \u00b6 Install docker 2. Create the A records \u00b6 We'll be using example.com as our domain for this example. Info The RMM uses 3 different sites. The Vue frontend e.g. rmm.example.com which is where you'll be accessing your RMM from the browser, the REST backend e.g. api.example.com and Meshcentral e.g. mesh.example.com Get the public IP of your server with curl https://icanhazip.tacticalrmm.io Open the DNS manager of wherever the domain you purchased is hosted. Create 3 A records: rmm , api and mesh and point them to the public IP of your server: 3. Acquire Let's Encrypt Wildcard certs with certbot \u00b6 Warning If the Let's Encrypt wildcard certificates are not provided, a self-signed certificate will be generated and most agent functions won't work. A. Install Certbot \u00b6 sudo apt-get install certbot B. Generate the wildcard Let's Encrypt certificates \u00b6 We're using the DNS-01 challenge method a. Deploy the TXT record in your DNS manager \u00b6 Warning TXT records can take anywhere from 1 minute to a few hours to propagate depending on your DNS provider. You should verify the TXT record has been deployed first before pressing Enter. A quick way to check is with the following command: dig -t txt _acme-challenge.example.com or test using: https://viewdns.info/dnsrecord/ Enter: _acme-challenge.example.com b. Request Let's Encrypt Wildcard cert \u00b6 sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns Note Replace example.com with your root domain 4. Configure DNS and firewall \u00b6 You will need to add DNS entries so that the three subdomains resolve to the IP of the docker host. There is a reverse proxy running that will route the hostnames to the correct container. On the host, you will need to ensure the firewall is open on tcp ports 80, 443 and 4222. 5. Setting up the environment \u00b6 Get the docker-compose and .env.example file on the host you which to install on wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/docker/docker-compose.yml wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/docker/.env.example mv .env.example .env Change the values in .env to match your environment. When supplying certificates through Let's Encrypt, see the section below about base64 encoding the certificate files. A. Base64 encoding certificates to pass as env variables \u00b6 Use the below command to add the the correct values to the .env. Running this command multiple times will add redundant entries, so those will need to be removed. Let's encrypt certs paths are below. Replace ${rootdomain} with your own. public key /etc/letsencrypt/live/${rootdomain}/fullchain.pem private key /etc/letsencrypt/live/${rootdomain}/privkey.pem echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /path/to/pub/key ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /path/to/priv/key ) \" >> .env 6. Starting the environment \u00b6 Run the below command to start the environment. sudo docker-compose up -d Removing the -d will start the containers in the foreground and is useful for debugging. 7. Login \u00b6 Navigate to https://rmm.example.com and login with the username/password you created during install. Once logged in, you will be redirected to the initial setup page. Create your first client/site and choose the default timezone. Note about Backups \u00b6 The backup script does not work with docker. To backup your install use standard docker backup/restore processes. If your file system is btrfs something like: docker-compose stop btrfs subvolume snapshot -r /srv/tsd /srv/tsd/.snapshot- ` date +%F-%H%M%S ` or you can look at this","title":"Docker Install"},{"location":"install_docker/#docker-setup","text":"","title":"Docker Setup"},{"location":"install_docker/#1-install-docker","text":"Install docker","title":"1. Install Docker"},{"location":"install_docker/#2-create-the-a-records","text":"We'll be using example.com as our domain for this example. Info The RMM uses 3 different sites. The Vue frontend e.g. rmm.example.com which is where you'll be accessing your RMM from the browser, the REST backend e.g. api.example.com and Meshcentral e.g. mesh.example.com Get the public IP of your server with curl https://icanhazip.tacticalrmm.io Open the DNS manager of wherever the domain you purchased is hosted. Create 3 A records: rmm , api and mesh and point them to the public IP of your server:","title":"2. Create the A records"},{"location":"install_docker/#3-acquire-lets-encrypt-wildcard-certs-with-certbot","text":"Warning If the Let's Encrypt wildcard certificates are not provided, a self-signed certificate will be generated and most agent functions won't work.","title":"3. Acquire Let's Encrypt Wildcard certs with certbot"},{"location":"install_docker/#a-install-certbot","text":"sudo apt-get install certbot","title":"A. Install Certbot"},{"location":"install_docker/#b-generate-the-wildcard-lets-encrypt-certificates","text":"We're using the DNS-01 challenge method","title":"B. Generate the wildcard Let's Encrypt certificates"},{"location":"install_docker/#a-deploy-the-txt-record-in-your-dns-manager","text":"Warning TXT records can take anywhere from 1 minute to a few hours to propagate depending on your DNS provider. You should verify the TXT record has been deployed first before pressing Enter. A quick way to check is with the following command: dig -t txt _acme-challenge.example.com or test using: https://viewdns.info/dnsrecord/ Enter: _acme-challenge.example.com","title":"a. Deploy the TXT record in your DNS manager"},{"location":"install_docker/#b-request-lets-encrypt-wildcard-cert","text":"sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns Note Replace example.com with your root domain","title":"b. Request Let's Encrypt Wildcard cert"},{"location":"install_docker/#4-configure-dns-and-firewall","text":"You will need to add DNS entries so that the three subdomains resolve to the IP of the docker host. There is a reverse proxy running that will route the hostnames to the correct container. On the host, you will need to ensure the firewall is open on tcp ports 80, 443 and 4222.","title":"4. Configure DNS and firewall"},{"location":"install_docker/#5-setting-up-the-environment","text":"Get the docker-compose and .env.example file on the host you which to install on wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/docker/docker-compose.yml wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/docker/.env.example mv .env.example .env Change the values in .env to match your environment. When supplying certificates through Let's Encrypt, see the section below about base64 encoding the certificate files.","title":"5. Setting up the environment"},{"location":"install_docker/#a-base64-encoding-certificates-to-pass-as-env-variables","text":"Use the below command to add the the correct values to the .env. Running this command multiple times will add redundant entries, so those will need to be removed. Let's encrypt certs paths are below. Replace ${rootdomain} with your own. public key /etc/letsencrypt/live/${rootdomain}/fullchain.pem private key /etc/letsencrypt/live/${rootdomain}/privkey.pem echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /path/to/pub/key ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /path/to/priv/key ) \" >> .env","title":"A. Base64 encoding certificates to pass as env variables"},{"location":"install_docker/#6-starting-the-environment","text":"Run the below command to start the environment. sudo docker-compose up -d Removing the -d will start the containers in the foreground and is useful for debugging.","title":"6. Starting the environment"},{"location":"install_docker/#7-login","text":"Navigate to https://rmm.example.com and login with the username/password you created during install. Once logged in, you will be redirected to the initial setup page. Create your first client/site and choose the default timezone.","title":"7. Login"},{"location":"install_docker/#note-about-backups","text":"The backup script does not work with docker. To backup your install use standard docker backup/restore processes. If your file system is btrfs something like: docker-compose stop btrfs subvolume snapshot -r /srv/tsd /srv/tsd/.snapshot- ` date +%F-%H%M%S ` or you can look at this","title":"Note about Backups"},{"location":"install_server/","text":"Installation \u00b6 General Information \u00b6 Minimum requirements \u00b6 Hardware / OS \u00b6 A fresh linux VM running either Ubuntu 20.04 LTS or Debian 10/11 with 2GB RAM Warning The provided install script assumes a fresh server with no software installed on it. Attempting to run it on an existing server with other services will break things and the install will fail. Note The install script has been tested on the following public cloud providers: DigitalOcean, Linode, Vultr, BuyVM (highly recommended), Hetzner, AWS, Google Cloud and Azure, as well as behind NAT on Hyper-V, Proxmox and ESXi. Note CPU: 1 core is fine for < 200 agents with limited checks/tasks. Disk space and speed are dependent on your use case. Of course faster is better SSD/NVMe. Space is dependent on how long you're keeping historical data, and how many checks/script runs and their output size. 50GB should be fine for < 12months of history on < 200 agents with < 30 checks/tasks run at reasonable time intervals. Network Requirements \u00b6 A real (internet resolvable) domain is needed to generate a Let's Encrypt wildcard cert. If you cannot afford to purchase a domain ($12 a year) then you can get one for free at freenom.com example.local is NOT a real domain. No you don't have to expose your server to the internet A TOTP based authenticator app. Some popular ones are Google Authenticator, Authy and Microsoft Authenticator. Update Recommendations \u00b6 Note We highly recommend staying current with updates (at least every 3 months when you update your SSL certs is a good minimum) while Tactical RMM is still working towards its 1.0 release. Until we reach production release, there may be architectural changes that may be made to Tactical RMM and only a regular patching schedule is supported by developers. Option 1: Easy Install on a VPS \u00b6 Install on a VPS: DigitalOcean, Linode, Vultr, BuyVM (highly recommended), Hetzner, AWS, Google Cloud and Azure to name a few Use something that meets minimum specs Run Updates on OS \u00b6 SSH into the server as root . Download and run the prereqs and latest updates apt update apt install -y wget curl sudo apt -y upgrade If a new kernel is installed, then reboot the server with the reboot command Create a linux user \u00b6 Create a linux user named tactical to run the rmm and add it to the sudoers group. Create User Ubuntu Debian adduser tactical usermod -a -G sudo tactical useradd -m -s /bin/bash tactical usermod -a -G sudo tactical Tip Enable passwordless sudo to make your life easier in the future Setup the firewall (optional but highly recommended) \u00b6 Info Skip this step if your VM is not publicly exposed to the world e.g. running behind NAT. You should setup the firewall rules in your router instead (ports 22, 443 and 4222 TCP). ufw default deny incoming ufw default allow outgoing ufw allow https ufw allow proto tcp from any to any port 4222 Info SSH (port 22 tcp) is only required for you to remotely login and do basic linux server administration for your rmm. It is not needed for any agent communication. SSH Firewall Rule Restrict SSH Allow all SSH Allow ssh from only allowed IP's ( highly recommended) ufw allow proto tcp from X.X.X.X to any port 22 ufw allow proto tcp from X.X.X.X to any port 22 Allow ssh from everywhere ( not recommended) ufw allow ssh Enable and activate the firewall ufw enable && ufw reload Note You will never login to the server again as root again unless something has gone horribly wrong, and you're working with the developers. Create the A records \u00b6 We'll be using example.com as our domain for this example. Info The RMM uses 3 different sites. The Vue frontend e.g. rmm.example.com which is where you'll be accessing your RMM from the browser, the REST backend e.g. api.example.com and Meshcentral e.g. mesh.example.com Get the public IP of your server with curl https://icanhazip.tacticalrmm.io Open the DNS manager of wherever the domain you purchased is hosted. Create 3 A records: rmm , api and mesh and point them to the public IP of your server: Run the install script \u00b6 Switch to the tactical user su - tactical Download and run the install script wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/install.sh chmod +x install.sh ./install.sh Answer the initial questions when prompted. Replace example.com with your domain. Deploy the TXT record in your DNS manager for Lets Encrypt wildcard certs \u00b6 Warning TXT records can take anywhere from 1 minute to a few hours to propagate depending on your DNS provider. You should verify the TXT record has been deployed first before pressing Enter. A quick way to check is with the following command: dig -t txt _acme-challenge.example.com or test using: https://viewdns.info/dnsrecord/ Enter: _acme-challenge.example.com Create a login for the RMM web UI: A bunch of URLS / usernames / passwords will be printed out at the end of the install script. Save these somewhere safe. Recover them if you didn't Login \u00b6 Navigate to https://rmm.example.com and login with the username/password you created during install. Once logged in, you will be redirected to the initial setup page. Create your first client/site and choose the default timezone. You're Done \u00b6 Update Regularly Option 2: Install behind NAT Router \u00b6 Install in your local network using: Dedicated hardware, Hyper-V, Proxmox or ESXi. All been tested and work fine. Do everything from Option 1: Easy Install If you only have agents on the private network/subnet \u00b6 Make sure your local DNS server (or agents hosts file) have your Tactical RMM server IP addresses for the 3 domain names: rmm , api and mesh Agents exist outside the private network/subnet - Setup Port Forwarding \u00b6 If you have agents outside your local network: Make sure the public DNS servers have A records for the 3 Tactical RMM server domain names: rmm , api and mesh Login to your router/NAT device. Set your TRMM server as a static IP (Using a DHCP reservation is usually safer) Create 2 port forwarding rules. TCP Port 443 and TCP Port 4222 to your TRMM servers private IP address. Note https://portforward.com/ can help with Port Forwarding setup You're Done \u00b6 Update Regularly Option 3: Installs by Network Wizards \u00b6 Use the scripts above. Requirements \u00b6 TLD domain name which is internet resolvable (this is for a LetsEncrypt DNS wildcard request during the install script validated by DNS txt record ). Test using: https://viewdns.info/dnsrecord/ or https://dnschecker.org/ . Enter: _acme-challenge.example.com as TXT Agents need to be able to connect to your server via DNS lookup (hosts file, local DNS, smoke signals etc.). Test from agent: ping rmm.example.com . Should result in the IP of your Tactical RMM server Test from agent: ping api.example.com . Should result in the IP of your Tactical RMM server Test from agent: ping mesh.example.com . Should result in the IP of your Tactical RMM server Note Did you notice #2 doesn't need to be something publicly available? That's it. You're a wizard, you know how to satisfy these 2 items. You'll probably enjoy browsing thru the Unsupported section of the docs. Update Regularly \u00b6 We've said it before, we'll say it again. We recommend regular updates. Every 2-3 months. Do it when you update your SSL certs.","title":"Traditional Install"},{"location":"install_server/#installation","text":"","title":"Installation"},{"location":"install_server/#general-information","text":"","title":"General Information"},{"location":"install_server/#minimum-requirements","text":"","title":"Minimum requirements"},{"location":"install_server/#hardware-os","text":"A fresh linux VM running either Ubuntu 20.04 LTS or Debian 10/11 with 2GB RAM Warning The provided install script assumes a fresh server with no software installed on it. Attempting to run it on an existing server with other services will break things and the install will fail. Note The install script has been tested on the following public cloud providers: DigitalOcean, Linode, Vultr, BuyVM (highly recommended), Hetzner, AWS, Google Cloud and Azure, as well as behind NAT on Hyper-V, Proxmox and ESXi. Note CPU: 1 core is fine for < 200 agents with limited checks/tasks. Disk space and speed are dependent on your use case. Of course faster is better SSD/NVMe. Space is dependent on how long you're keeping historical data, and how many checks/script runs and their output size. 50GB should be fine for < 12months of history on < 200 agents with < 30 checks/tasks run at reasonable time intervals.","title":"Hardware / OS"},{"location":"install_server/#network-requirements","text":"A real (internet resolvable) domain is needed to generate a Let's Encrypt wildcard cert. If you cannot afford to purchase a domain ($12 a year) then you can get one for free at freenom.com example.local is NOT a real domain. No you don't have to expose your server to the internet A TOTP based authenticator app. Some popular ones are Google Authenticator, Authy and Microsoft Authenticator.","title":"Network Requirements"},{"location":"install_server/#update-recommendations","text":"Note We highly recommend staying current with updates (at least every 3 months when you update your SSL certs is a good minimum) while Tactical RMM is still working towards its 1.0 release. Until we reach production release, there may be architectural changes that may be made to Tactical RMM and only a regular patching schedule is supported by developers.","title":"Update Recommendations"},{"location":"install_server/#option-1-easy-install-on-a-vps","text":"Install on a VPS: DigitalOcean, Linode, Vultr, BuyVM (highly recommended), Hetzner, AWS, Google Cloud and Azure to name a few Use something that meets minimum specs","title":"Option 1: Easy Install on a VPS"},{"location":"install_server/#run-updates-on-os","text":"SSH into the server as root . Download and run the prereqs and latest updates apt update apt install -y wget curl sudo apt -y upgrade If a new kernel is installed, then reboot the server with the reboot command","title":"Run Updates on OS"},{"location":"install_server/#create-a-linux-user","text":"Create a linux user named tactical to run the rmm and add it to the sudoers group. Create User Ubuntu Debian adduser tactical usermod -a -G sudo tactical useradd -m -s /bin/bash tactical usermod -a -G sudo tactical Tip Enable passwordless sudo to make your life easier in the future","title":"Create a linux user"},{"location":"install_server/#setup-the-firewall-optional-but-highly-recommended","text":"Info Skip this step if your VM is not publicly exposed to the world e.g. running behind NAT. You should setup the firewall rules in your router instead (ports 22, 443 and 4222 TCP). ufw default deny incoming ufw default allow outgoing ufw allow https ufw allow proto tcp from any to any port 4222 Info SSH (port 22 tcp) is only required for you to remotely login and do basic linux server administration for your rmm. It is not needed for any agent communication. SSH Firewall Rule Restrict SSH Allow all SSH Allow ssh from only allowed IP's ( highly recommended) ufw allow proto tcp from X.X.X.X to any port 22 ufw allow proto tcp from X.X.X.X to any port 22 Allow ssh from everywhere ( not recommended) ufw allow ssh Enable and activate the firewall ufw enable && ufw reload Note You will never login to the server again as root again unless something has gone horribly wrong, and you're working with the developers.","title":"Setup the firewall (optional but highly recommended)"},{"location":"install_server/#create-the-a-records","text":"We'll be using example.com as our domain for this example. Info The RMM uses 3 different sites. The Vue frontend e.g. rmm.example.com which is where you'll be accessing your RMM from the browser, the REST backend e.g. api.example.com and Meshcentral e.g. mesh.example.com Get the public IP of your server with curl https://icanhazip.tacticalrmm.io Open the DNS manager of wherever the domain you purchased is hosted. Create 3 A records: rmm , api and mesh and point them to the public IP of your server:","title":"Create the A records"},{"location":"install_server/#run-the-install-script","text":"Switch to the tactical user su - tactical Download and run the install script wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/install.sh chmod +x install.sh ./install.sh Answer the initial questions when prompted. Replace example.com with your domain.","title":"Run the install script"},{"location":"install_server/#deploy-the-txt-record-in-your-dns-manager-for-lets-encrypt-wildcard-certs","text":"Warning TXT records can take anywhere from 1 minute to a few hours to propagate depending on your DNS provider. You should verify the TXT record has been deployed first before pressing Enter. A quick way to check is with the following command: dig -t txt _acme-challenge.example.com or test using: https://viewdns.info/dnsrecord/ Enter: _acme-challenge.example.com Create a login for the RMM web UI: A bunch of URLS / usernames / passwords will be printed out at the end of the install script. Save these somewhere safe. Recover them if you didn't","title":"Deploy the TXT record in your DNS manager for Lets Encrypt wildcard certs"},{"location":"install_server/#login","text":"Navigate to https://rmm.example.com and login with the username/password you created during install. Once logged in, you will be redirected to the initial setup page. Create your first client/site and choose the default timezone.","title":"Login"},{"location":"install_server/#youre-done","text":"Update Regularly","title":"You're Done"},{"location":"install_server/#option-2-install-behind-nat-router","text":"Install in your local network using: Dedicated hardware, Hyper-V, Proxmox or ESXi. All been tested and work fine. Do everything from Option 1: Easy Install","title":"Option 2: Install behind NAT Router"},{"location":"install_server/#if-you-only-have-agents-on-the-private-networksubnet","text":"Make sure your local DNS server (or agents hosts file) have your Tactical RMM server IP addresses for the 3 domain names: rmm , api and mesh","title":"If you only have agents on the private network/subnet"},{"location":"install_server/#agents-exist-outside-the-private-networksubnet-setup-port-forwarding","text":"If you have agents outside your local network: Make sure the public DNS servers have A records for the 3 Tactical RMM server domain names: rmm , api and mesh Login to your router/NAT device. Set your TRMM server as a static IP (Using a DHCP reservation is usually safer) Create 2 port forwarding rules. TCP Port 443 and TCP Port 4222 to your TRMM servers private IP address. Note https://portforward.com/ can help with Port Forwarding setup","title":"Agents exist outside the private network/subnet - Setup Port Forwarding"},{"location":"install_server/#youre-done_1","text":"Update Regularly","title":"You're Done"},{"location":"install_server/#option-3-installs-by-network-wizards","text":"Use the scripts above.","title":"Option 3: Installs by Network Wizards"},{"location":"install_server/#requirements","text":"TLD domain name which is internet resolvable (this is for a LetsEncrypt DNS wildcard request during the install script validated by DNS txt record ). Test using: https://viewdns.info/dnsrecord/ or https://dnschecker.org/ . Enter: _acme-challenge.example.com as TXT Agents need to be able to connect to your server via DNS lookup (hosts file, local DNS, smoke signals etc.). Test from agent: ping rmm.example.com . Should result in the IP of your Tactical RMM server Test from agent: ping api.example.com . Should result in the IP of your Tactical RMM server Test from agent: ping mesh.example.com . Should result in the IP of your Tactical RMM server Note Did you notice #2 doesn't need to be something publicly available? That's it. You're a wizard, you know how to satisfy these 2 items. You'll probably enjoy browsing thru the Unsupported section of the docs.","title":"Requirements"},{"location":"install_server/#update-regularly","text":"We've said it before, we'll say it again. We recommend regular updates. Every 2-3 months. Do it when you update your SSL certs.","title":"Update Regularly"},{"location":"license/","text":"Tactical RMM License Version 1.0 \u00b6 Text of license:\u2003\u2003\u2003Copyright \u00a9 2022 AmidaWare LLC. All rights reserved. \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 Amending the text of this license is not permitted. Trade Mark:\u2003\u2003\u2003\u2003\"Tactical RMM\" is a trade mark of AmidaWare LLC. Licensor:\u2003\u2003\u2003\u2003\u2003 AmidaWare LLC of 1968 S Coast Hwy PMB 3847 Laguna Beach, CA, USA. Licensed Software:\u2003 The software known as Tactical RMM Version v0.12.0 (and all subsequent releases and versions) and the Tactical RMM Agent v2.0.0 (and all subsequent releases and versions). 1. Preamble \u00b6 The Licensed Software is designed to facilitate the remote monitoring and management (RMM) of networks, systems, servers, computers and other devices. The Licensed Software is made available primarily for use by organisations and managed service providers for monitoring and management purposes. The Tactical RMM License is not an open-source software license. This license contains certain restrictions on the use of the Licensed Software. For example the functionality of the Licensed Software may not be made available as part of a SaaS (Software-as-a-Service) service or product to provide a commercial or for-profit service without the express prior permission of the Licensor. 2. License Grant \u00b6 Permission is hereby granted, free of charge, on a non-exclusive basis, to copy, modify, create derivative works and use the Licensed Software in source and binary forms subject to the following terms and conditions. No additional rights will be implied under this license. The hosting and use of the Licensed Software to monitor and manage in-house networks/systems and/or customer networks/systems is permitted. This license does not allow the functionality of the Licensed Software (whether in whole or in part) or a modified version of the Licensed Software or a derivative work to be used or otherwise made available as part of any other commercial or for-profit service, including, without limitation, any of the following: * a service allowing third parties to interact remotely through a computer network; * as part of a SaaS service or product; * as part of the provision of a managed hosting service or product; * the offering of installation and/or configuration services; * the offer for sale, distribution or sale of any service or product (whether or not branded as Tactical RMM). The prior written approval of AmidaWare LLC must be obtained for all commercial use and/or for-profit service use of the (i) Licensed Software (whether in whole or in part), (ii) a modified version of the Licensed Software and/or (iii) a derivative work. The terms of this license apply to all copies of the Licensed Software (including modified versions) and derivative works. All use of the Licensed Software must immediately cease if use breaches the terms of this license. 3. Derivative Works \u00b6 If a derivative work is created which is based on or otherwise incorporates all or any part of the Licensed Software, and the derivative work is made available to any other person, the complete corresponding machine readable source code (including all changes made to the Licensed Software) must accompany the derivative work and be made publicly available online. 4. Copyright Notice \u00b6 The following copyright notice shall be included in all copies of the Licensed Software: \u2003\u2003\u2003Copyright \u00a9 2022 AmidaWare LLC. \u2003\u2003\u2003Licensed under the Tactical RMM License Version 1.0 (the \u201cLicense\u201d). \u2003\u2003\u2003You may only use the Licensed Software in accordance with the License. \u2003\u2003\u2003A copy of the License is available at: https://license.tacticalrmm.com 5. Disclaimer of Warranty \u00b6 THE LICENSED SOFTWARE IS PROVIDED \"AS IS\". TO THE FULLEST EXTENT PERMISSIBLE AT LAW ALL CONDITIONS, WARRANTIES OR OTHER TERMS OF ANY KIND WHICH MIGHT HAVE EFFECT OR BE IMPLIED OR INCORPORATED, WHETHER BY STATUTE, COMMON LAW OR OTHERWISE ARE HEREBY EXCLUDED, INCLUDING THE CONDITIONS, WARRANTIES OR OTHER TERMS AS TO SATISFACTORY QUALITY AND/OR MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, THE USE OF REASONABLE SKILL AND CARE AND NON-INFRINGEMENT. 6. Limits of Liability \u00b6 THE FOLLOWING EXCLUSIONS SHALL APPLY TO THE FULLEST EXTENT PERMISSIBLE AT LAW. NEITHER THE AUTHORS NOR THE COPYRIGHT HOLDERS SHALL IN ANY CIRCUMSTANCES HAVE ANY LIABILITY FOR ANY CLAIM, LOSSES, DAMAGES OR OTHER LIABILITY, WHETHER THE SAME ARE SUFFERED DIRECTLY OR INDIRECTLY OR ARE IMMEDIATE OR CONSEQUENTIAL, AND WHETHER THE SAME ARISE IN CONTRACT, TORT OR DELICT (INCLUDING NEGLIGENCE) OR OTHERWISE HOWSOEVER ARISING FROM, OUT OF OR IN CONNECTION WITH THE LICENSED SOFTWARE OR THE USE OR INABILITY TO USE THE LICENSED SOFTWARE OR OTHER DEALINGS IN THE LICENSED SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH LOSS OR DAMAGE. THE FOREGOING EXCLUSIONS SHALL INCLUDE, WITHOUT LIMITATION, LIABILITY FOR ANY LOSSES OR DAMAGES WHICH FALL WITHIN ANY OF THE FOLLOWING CATEGORIES: SPECIAL, EXEMPLARY, OR INCIDENTAL LOSS OR DAMAGE, LOSS OF PROFITS, LOSS OF ANTICIPATED SAVINGS, LOSS OF BUSINESS OPPORTUNITY, LOSS OF GOODWILL, AND LOSS OR CORRUPTION OF DATA. 7. Termination \u00b6 This license shall terminate with immediate effect if there is a material breach of any of its terms. 8. No partnership, agency or joint venture \u00b6 Nothing in this license agreement is intended to, or shall be deemed to, establish any partnership or joint venture or any relationship of agency between AmidaWare LLC and any other person. 9. No endorsement \u00b6 The names of the authors and/or the copyright holders must not be used to promote or endorse any products or services which are in any way derived from the Licensed Software without prior written consent. 10. Trademarks \u00b6 No permission is granted to use the trademark \u201cTactical RMM\u201d or any other trade name, trademark, service mark or product name of AmidaWare LLC except to the extent necessary to comply with the notice requirements in Section 4 (Copyright Notice). 11. Entire agreement \u00b6 This license contains the whole agreement relating to its subject matter. 12. Severance \u00b6 If any provision or part-provision of this license is or becomes invalid, illegal or unenforceable, it shall be deemed deleted, but that shall not affect the validity and enforceability of the rest of this license. 13. Acceptance of these terms \u00b6 The terms and conditions of this license are accepted by copying, downloading, installing, redistributing, or otherwise using the Licensed Software.","title":"License"},{"location":"license/#tactical-rmm-license-version-10","text":"Text of license:\u2003\u2003\u2003Copyright \u00a9 2022 AmidaWare LLC. All rights reserved. \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 Amending the text of this license is not permitted. Trade Mark:\u2003\u2003\u2003\u2003\"Tactical RMM\" is a trade mark of AmidaWare LLC. Licensor:\u2003\u2003\u2003\u2003\u2003 AmidaWare LLC of 1968 S Coast Hwy PMB 3847 Laguna Beach, CA, USA. Licensed Software:\u2003 The software known as Tactical RMM Version v0.12.0 (and all subsequent releases and versions) and the Tactical RMM Agent v2.0.0 (and all subsequent releases and versions).","title":"Tactical RMM License Version 1.0"},{"location":"license/#1-preamble","text":"The Licensed Software is designed to facilitate the remote monitoring and management (RMM) of networks, systems, servers, computers and other devices. The Licensed Software is made available primarily for use by organisations and managed service providers for monitoring and management purposes. The Tactical RMM License is not an open-source software license. This license contains certain restrictions on the use of the Licensed Software. For example the functionality of the Licensed Software may not be made available as part of a SaaS (Software-as-a-Service) service or product to provide a commercial or for-profit service without the express prior permission of the Licensor.","title":"1. Preamble"},{"location":"license/#2-license-grant","text":"Permission is hereby granted, free of charge, on a non-exclusive basis, to copy, modify, create derivative works and use the Licensed Software in source and binary forms subject to the following terms and conditions. No additional rights will be implied under this license. The hosting and use of the Licensed Software to monitor and manage in-house networks/systems and/or customer networks/systems is permitted. This license does not allow the functionality of the Licensed Software (whether in whole or in part) or a modified version of the Licensed Software or a derivative work to be used or otherwise made available as part of any other commercial or for-profit service, including, without limitation, any of the following: * a service allowing third parties to interact remotely through a computer network; * as part of a SaaS service or product; * as part of the provision of a managed hosting service or product; * the offering of installation and/or configuration services; * the offer for sale, distribution or sale of any service or product (whether or not branded as Tactical RMM). The prior written approval of AmidaWare LLC must be obtained for all commercial use and/or for-profit service use of the (i) Licensed Software (whether in whole or in part), (ii) a modified version of the Licensed Software and/or (iii) a derivative work. The terms of this license apply to all copies of the Licensed Software (including modified versions) and derivative works. All use of the Licensed Software must immediately cease if use breaches the terms of this license.","title":"2. License Grant"},{"location":"license/#3-derivative-works","text":"If a derivative work is created which is based on or otherwise incorporates all or any part of the Licensed Software, and the derivative work is made available to any other person, the complete corresponding machine readable source code (including all changes made to the Licensed Software) must accompany the derivative work and be made publicly available online.","title":"3. Derivative Works"},{"location":"license/#4-copyright-notice","text":"The following copyright notice shall be included in all copies of the Licensed Software: \u2003\u2003\u2003Copyright \u00a9 2022 AmidaWare LLC. \u2003\u2003\u2003Licensed under the Tactical RMM License Version 1.0 (the \u201cLicense\u201d). \u2003\u2003\u2003You may only use the Licensed Software in accordance with the License. \u2003\u2003\u2003A copy of the License is available at: https://license.tacticalrmm.com","title":"4. Copyright Notice"},{"location":"license/#5-disclaimer-of-warranty","text":"THE LICENSED SOFTWARE IS PROVIDED \"AS IS\". TO THE FULLEST EXTENT PERMISSIBLE AT LAW ALL CONDITIONS, WARRANTIES OR OTHER TERMS OF ANY KIND WHICH MIGHT HAVE EFFECT OR BE IMPLIED OR INCORPORATED, WHETHER BY STATUTE, COMMON LAW OR OTHERWISE ARE HEREBY EXCLUDED, INCLUDING THE CONDITIONS, WARRANTIES OR OTHER TERMS AS TO SATISFACTORY QUALITY AND/OR MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, THE USE OF REASONABLE SKILL AND CARE AND NON-INFRINGEMENT.","title":"5. Disclaimer of Warranty"},{"location":"license/#6-limits-of-liability","text":"THE FOLLOWING EXCLUSIONS SHALL APPLY TO THE FULLEST EXTENT PERMISSIBLE AT LAW. NEITHER THE AUTHORS NOR THE COPYRIGHT HOLDERS SHALL IN ANY CIRCUMSTANCES HAVE ANY LIABILITY FOR ANY CLAIM, LOSSES, DAMAGES OR OTHER LIABILITY, WHETHER THE SAME ARE SUFFERED DIRECTLY OR INDIRECTLY OR ARE IMMEDIATE OR CONSEQUENTIAL, AND WHETHER THE SAME ARISE IN CONTRACT, TORT OR DELICT (INCLUDING NEGLIGENCE) OR OTHERWISE HOWSOEVER ARISING FROM, OUT OF OR IN CONNECTION WITH THE LICENSED SOFTWARE OR THE USE OR INABILITY TO USE THE LICENSED SOFTWARE OR OTHER DEALINGS IN THE LICENSED SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH LOSS OR DAMAGE. THE FOREGOING EXCLUSIONS SHALL INCLUDE, WITHOUT LIMITATION, LIABILITY FOR ANY LOSSES OR DAMAGES WHICH FALL WITHIN ANY OF THE FOLLOWING CATEGORIES: SPECIAL, EXEMPLARY, OR INCIDENTAL LOSS OR DAMAGE, LOSS OF PROFITS, LOSS OF ANTICIPATED SAVINGS, LOSS OF BUSINESS OPPORTUNITY, LOSS OF GOODWILL, AND LOSS OR CORRUPTION OF DATA.","title":"6. Limits of Liability"},{"location":"license/#7-termination","text":"This license shall terminate with immediate effect if there is a material breach of any of its terms.","title":"7. Termination"},{"location":"license/#8-no-partnership-agency-or-joint-venture","text":"Nothing in this license agreement is intended to, or shall be deemed to, establish any partnership or joint venture or any relationship of agency between AmidaWare LLC and any other person.","title":"8. No partnership, agency or joint venture"},{"location":"license/#9-no-endorsement","text":"The names of the authors and/or the copyright holders must not be used to promote or endorse any products or services which are in any way derived from the Licensed Software without prior written consent.","title":"9. No endorsement"},{"location":"license/#10-trademarks","text":"No permission is granted to use the trademark \u201cTactical RMM\u201d or any other trade name, trademark, service mark or product name of AmidaWare LLC except to the extent necessary to comply with the notice requirements in Section 4 (Copyright Notice).","title":"10. Trademarks"},{"location":"license/#11-entire-agreement","text":"This license contains the whole agreement relating to its subject matter.","title":"11. Entire agreement"},{"location":"license/#12-severance","text":"If any provision or part-provision of this license is or becomes invalid, illegal or unenforceable, it shall be deemed deleted, but that shall not affect the validity and enforceability of the rest of this license.","title":"12. Severance"},{"location":"license/#13-acceptance-of-these-terms","text":"The terms and conditions of this license are accepted by copying, downloading, installing, redistributing, or otherwise using the Licensed Software.","title":"13. Acceptance of these terms"},{"location":"management_cmds/","text":"Management Commands \u00b6 To run any of the management commands first login to your server as the user used to install TRMM (eg su - tactical ) and activate the python virtual env: Activate python virtual env standard docker Dev Docker cd /rmm/api/tacticalrmm source ../env/bin/activate docker exec -it trmm-backend /bin/bash /opt/venv/bin/python /opt/tactical/api/manage.py shell docker exec -it trmm-api-dev env/bin/python manage.py shell Bulk Delete old agents by last checkin date or agent version \u00b6 Test to see what will happen python manage.py bulk_delete_agents --days 60 python manage.py bulk_delete_agents --agentver 1 .5.0 Do the delete python manage.py bulk_delete_agents --days 60 --delete python manage.py bulk_delete_agents --agentver 1 .5.0 --delete Reset a user's password \u00b6 python manage.py reset_password <username> Reset a user's 2fa token \u00b6 python manage.py reset_2fa <username> Find all agents that have X software installed \u00b6 python manage.py find_software \"adobe\" Set specific Windows update to not install \u00b6 from winupdate.models import WinUpdate WinUpdate.objects.filter ( kb = \"KB5007186\" ) .update ( action = \"ignore\" , date_installed = None ) Show outdated online agents \u00b6 python manage.py show_outdated_agents Log out all active web sessions \u00b6 python manage.py delete_tokens Reset all Auth Tokens for Install agents and web sessions \u00b6 python manage.py shell from knox.models import AuthToken AuthToken.objects.all () .delete () Check for orphaned tasks on all agents and remove them \u00b6 python manage.py remove_orphaned_tasks Create a MeshCentral agent invite link \u00b6 python manage.py get_mesh_exe_url Bulk update agent offline/overdue time \u00b6 Change offline time on all agents to 5 minutes python manage.py bulk_change_checkin --offline --all 5 Change offline time on all agents in site named Example Site to 2 minutes python manage.py bulk_change_checkin --offline --site \"Example Site\" 2 Change offline time on all agents in client named Example Client to 12 minutes python manage.py bulk_change_checkin --offline --client \"Example Client\" 12 Change overdue time on all agents to 10 minutes python manage.py bulk_change_checkin --overdue --all 10 Change overdue time on all agents in site named Example Site to 4 minutes python manage.py bulk_change_checkin --overdue --site \"Example Site\" 4 Change overdue time on all agents in client named Example Client to 14 minutes python manage.py bulk_change_checkin --overdue --client \"Example Client\" 14","title":"Management Commands"},{"location":"management_cmds/#management-commands","text":"To run any of the management commands first login to your server as the user used to install TRMM (eg su - tactical ) and activate the python virtual env: Activate python virtual env standard docker Dev Docker cd /rmm/api/tacticalrmm source ../env/bin/activate docker exec -it trmm-backend /bin/bash /opt/venv/bin/python /opt/tactical/api/manage.py shell docker exec -it trmm-api-dev env/bin/python manage.py shell","title":"Management Commands"},{"location":"management_cmds/#bulk-delete-old-agents-by-last-checkin-date-or-agent-version","text":"Test to see what will happen python manage.py bulk_delete_agents --days 60 python manage.py bulk_delete_agents --agentver 1 .5.0 Do the delete python manage.py bulk_delete_agents --days 60 --delete python manage.py bulk_delete_agents --agentver 1 .5.0 --delete","title":"Bulk Delete old agents by last checkin date or agent version"},{"location":"management_cmds/#reset-a-users-password","text":"python manage.py reset_password <username>","title":"Reset a user's password"},{"location":"management_cmds/#reset-a-users-2fa-token","text":"python manage.py reset_2fa <username>","title":"Reset a user's 2fa token"},{"location":"management_cmds/#find-all-agents-that-have-x-software-installed","text":"python manage.py find_software \"adobe\"","title":"Find all agents that have X software installed"},{"location":"management_cmds/#set-specific-windows-update-to-not-install","text":"from winupdate.models import WinUpdate WinUpdate.objects.filter ( kb = \"KB5007186\" ) .update ( action = \"ignore\" , date_installed = None )","title":"Set specific Windows update to not install"},{"location":"management_cmds/#show-outdated-online-agents","text":"python manage.py show_outdated_agents","title":"Show outdated online agents"},{"location":"management_cmds/#log-out-all-active-web-sessions","text":"python manage.py delete_tokens","title":"Log out all active web sessions"},{"location":"management_cmds/#reset-all-auth-tokens-for-install-agents-and-web-sessions","text":"python manage.py shell from knox.models import AuthToken AuthToken.objects.all () .delete ()","title":"Reset all Auth Tokens for Install agents and web sessions"},{"location":"management_cmds/#check-for-orphaned-tasks-on-all-agents-and-remove-them","text":"python manage.py remove_orphaned_tasks","title":"Check for orphaned tasks on all agents and remove them"},{"location":"management_cmds/#create-a-meshcentral-agent-invite-link","text":"python manage.py get_mesh_exe_url","title":"Create a MeshCentral agent invite link"},{"location":"management_cmds/#bulk-update-agent-offlineoverdue-time","text":"Change offline time on all agents to 5 minutes python manage.py bulk_change_checkin --offline --all 5 Change offline time on all agents in site named Example Site to 2 minutes python manage.py bulk_change_checkin --offline --site \"Example Site\" 2 Change offline time on all agents in client named Example Client to 12 minutes python manage.py bulk_change_checkin --offline --client \"Example Client\" 12 Change overdue time on all agents to 10 minutes python manage.py bulk_change_checkin --overdue --all 10 Change overdue time on all agents in site named Example Site to 4 minutes python manage.py bulk_change_checkin --overdue --site \"Example Site\" 4 Change overdue time on all agents in client named Example Client to 14 minutes python manage.py bulk_change_checkin --overdue --client \"Example Client\" 14","title":"Bulk update agent offline/overdue time"},{"location":"mesh_integration/","text":"MeshCentral Integration \u00b6 Overview \u00b6 Tactical RMM integrates with MeshCentral for the following 3 functions: Take Control Real time shell Real time file browser Note MeshCentral Has issues with Firefox, use Chrome At some point in the future, these functions will be directly built into the Tactical Agent, removing the need for MeshCentral. It should be noted that Tactical RMM and MeshCentral are 2 completely separate products and can run independently of each other. They do not even have to run on the same box, however when you install Tactical RMM it simply installs meshcentral for you with some preconfigured settings to allow integration. It is highly recommended to use the MeshCentral instance that Tactical installs, since it allows the developers more control over it and to ensure things don't break. How does it work \u00b6 MeshCentral has an embedding feature that allows integration into existing products. See Section 14 - Embedding MeshCentral in the MeshCentral User Guide for a detailed explanation of how this works. The Tactical RMM Agent keeps track of your Mesh Agents, and periodically interacts with them to synchronize the mesh agent's unique ID with the tactical rmm database. When you do a take control / terminal / file browser on an agent using the Tactical UI, behind the scenes, Tactical generates a login token for meshcentral's website and then \"wraps\" MeshCentral's UI in an iframe for that specific agent only, using it's unique ID to know what agent to render in the iframe. Running your own existing or separate MeshCentral Server? \u00b6 We do testing to make sure everything works with the version found here (look for MESH_VER) Installation instructions for using your own MeshCentral server: Run standard installation When asked for mesh URL specify your existing mesh server URL After installation, you will need to run thru manually uploading installers and connecting token with this : Make sure DNS is pointing to your existing server","title":"MeshCentral Integration"},{"location":"mesh_integration/#meshcentral-integration","text":"","title":"MeshCentral Integration"},{"location":"mesh_integration/#overview","text":"Tactical RMM integrates with MeshCentral for the following 3 functions: Take Control Real time shell Real time file browser Note MeshCentral Has issues with Firefox, use Chrome At some point in the future, these functions will be directly built into the Tactical Agent, removing the need for MeshCentral. It should be noted that Tactical RMM and MeshCentral are 2 completely separate products and can run independently of each other. They do not even have to run on the same box, however when you install Tactical RMM it simply installs meshcentral for you with some preconfigured settings to allow integration. It is highly recommended to use the MeshCentral instance that Tactical installs, since it allows the developers more control over it and to ensure things don't break.","title":"Overview"},{"location":"mesh_integration/#how-does-it-work","text":"MeshCentral has an embedding feature that allows integration into existing products. See Section 14 - Embedding MeshCentral in the MeshCentral User Guide for a detailed explanation of how this works. The Tactical RMM Agent keeps track of your Mesh Agents, and periodically interacts with them to synchronize the mesh agent's unique ID with the tactical rmm database. When you do a take control / terminal / file browser on an agent using the Tactical UI, behind the scenes, Tactical generates a login token for meshcentral's website and then \"wraps\" MeshCentral's UI in an iframe for that specific agent only, using it's unique ID to know what agent to render in the iframe.","title":"How does it work"},{"location":"mesh_integration/#running-your-own-existing-or-separate-meshcentral-server","text":"We do testing to make sure everything works with the version found here (look for MESH_VER) Installation instructions for using your own MeshCentral server: Run standard installation When asked for mesh URL specify your existing mesh server URL After installation, you will need to run thru manually uploading installers and connecting token with this : Make sure DNS is pointing to your existing server","title":"Running your own existing or separate MeshCentral Server?"},{"location":"public_rsa_keys/","text":"Public RSA Keys \u00b6 If you would like to provide the developers SSH access to your server for troubleshooting, please add the following key to ~/username/.ssh/authorized_keys and ensure the file has 600 permissions. You may refer to this tutorial for reference. ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCz9gIvIiCZmmQHg4KWGrTSCIAeK2rsIILO5uiQ244FYVP2/s7P0r9gPwiq3/49bwsNLNxfnvVeoMR/D2bolBbYeFtplWtFuH6re7L1y4IEhjS+VmNwLZZVvabQZ5cHPs6+ZqGgxhoq0Lyd2r/WlD67dBmfMruYUR7SEoiRcA1ICRErUWt9+6w4q4hV9qYxSZkC5A7gCPKH6PgtyOlKmAVMMvcUtx0wjMoZ1Ta5Cx8/uZmpcBV2qwAqOTTVZ//t1BDsnqdP/qCOlAXVb4EyQBATjrtw/12QD5YRGFwPy8RHe4InPOMBqKwhM8/wrxa9/8+diGDU3bkKotAEU8Np865YxqFtdkOajarYKeicwXmKEutz5Tvbk3GF5ZeTC+cSCSmD3wgIXNC9kOn6SQoIa9ED34gVDyNAlqwzNAjrq7XvbEXOlZy91c5/5948DAlPru8/lSJgYu1Odsh0ZJrElim7LvvrwmkxhV6b9xYcaJ3Xv2lCNUedWKrMl861Y3VsL+jVihGFXFaKsC09TTJTjBshOsFHROiqloPBTLMuIkBBEQxjBUV0TRhwLhcOXefyOEhQBR9RQMdw3It8R3khtZMAsjbZ8uTfhEEKVlXFuZJLzk1KIbyEjHJummCxKqt2D5mNeVdx10AA1bGPBm1vrr62QNGXrwaSgVBK7hXWfLlorQ== support@amidaware","title":"Public RSA Keys"},{"location":"public_rsa_keys/#public-rsa-keys","text":"If you would like to provide the developers SSH access to your server for troubleshooting, please add the following key to ~/username/.ssh/authorized_keys and ensure the file has 600 permissions. You may refer to this tutorial for reference. ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCz9gIvIiCZmmQHg4KWGrTSCIAeK2rsIILO5uiQ244FYVP2/s7P0r9gPwiq3/49bwsNLNxfnvVeoMR/D2bolBbYeFtplWtFuH6re7L1y4IEhjS+VmNwLZZVvabQZ5cHPs6+ZqGgxhoq0Lyd2r/WlD67dBmfMruYUR7SEoiRcA1ICRErUWt9+6w4q4hV9qYxSZkC5A7gCPKH6PgtyOlKmAVMMvcUtx0wjMoZ1Ta5Cx8/uZmpcBV2qwAqOTTVZ//t1BDsnqdP/qCOlAXVb4EyQBATjrtw/12QD5YRGFwPy8RHe4InPOMBqKwhM8/wrxa9/8+diGDU3bkKotAEU8Np865YxqFtdkOajarYKeicwXmKEutz5Tvbk3GF5ZeTC+cSCSmD3wgIXNC9kOn6SQoIa9ED34gVDyNAlqwzNAjrq7XvbEXOlZy91c5/5948DAlPru8/lSJgYu1Odsh0ZJrElim7LvvrwmkxhV6b9xYcaJ3Xv2lCNUedWKrMl861Y3VsL+jVihGFXFaKsC09TTJTjBshOsFHROiqloPBTLMuIkBBEQxjBUV0TRhwLhcOXefyOEhQBR9RQMdw3It8R3khtZMAsjbZ8uTfhEEKVlXFuZJLzk1KIbyEjHJummCxKqt2D5mNeVdx10AA1bGPBm1vrr62QNGXrwaSgVBK7hXWfLlorQ== support@amidaware","title":"Public RSA Keys"},{"location":"restore/","text":"Restore \u00b6 Info It is currently not possible to restore to a different domain/subdomain, only to a different physical or virtual server. Danger The restore script will always restore to the latest available RMM version on github. Make sure you update your old RMM to the latest version using the update.sh script and then run a fresh backup to use with this restore script. Install the new server \u00b6 Run Updates on OS \u00b6 SSH into the server as root . Download and run the prereqs and latest updates apt update apt install -y wget curl sudo apt -y upgrade If a new kernel is installed, then reboot the server with the reboot command Create a linux user \u00b6 Create a linux user named tactical to run the rmm and add it to the sudoers group. For Ubuntu : adduser tactical usermod -a -G sudo tactical For Debian : useradd -m -s /bin/bash tactical usermod -a -G sudo tactical Tip Enable passwordless sudo to make your life easier in the future Setup the firewall (optional but highly recommended) \u00b6 Info Skip this step if your VM is not publicly exposed to the world e.g. running behind NAT. You should setup the firewall rules in your router instead (ports 22, 443 and 4222 TCP). ufw default deny incoming ufw default allow outgoing ufw allow https ufw allow proto tcp from any to any port 4222 Info SSH (port 22 tcp) is only required for you to remotely login and do basic linux server administration for your rmm. It is not needed for any agent communication. Allow ssh from everywhere ( not recommended) ufw allow ssh Allow ssh from only allowed IP's ( highly recommended) ufw allow proto tcp from X.X.X.X to any port 22 ufw allow proto tcp from X.X.X.X to any port 22 Enable and activate the firewall ufw enable && ufw reload Note You will never login to the server again as root again unless something has gone horribly wrong, and you're working with the developers. Change DNS A records \u00b6 Open the DNS manager of wherever your domain is hosted. Change the 3 A records rmm , api and mesh and point them to the public IP of your new server. Run the restore script \u00b6 Make sure you're logged in with the non-root user (eg tactical ) Copy the backup tar file you created during backup to the new server. Download the restore script. wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/restore.sh chmod +x restore.sh Call the restore script, passing it the backup file as the first argument: ./restore.sh rmm-backup-XXXXXXXXX.tar","title":"Restore"},{"location":"restore/#restore","text":"Info It is currently not possible to restore to a different domain/subdomain, only to a different physical or virtual server. Danger The restore script will always restore to the latest available RMM version on github. Make sure you update your old RMM to the latest version using the update.sh script and then run a fresh backup to use with this restore script.","title":"Restore"},{"location":"restore/#install-the-new-server","text":"","title":"Install the new server"},{"location":"restore/#run-updates-on-os","text":"SSH into the server as root . Download and run the prereqs and latest updates apt update apt install -y wget curl sudo apt -y upgrade If a new kernel is installed, then reboot the server with the reboot command","title":"Run Updates on OS"},{"location":"restore/#create-a-linux-user","text":"Create a linux user named tactical to run the rmm and add it to the sudoers group. For Ubuntu : adduser tactical usermod -a -G sudo tactical For Debian : useradd -m -s /bin/bash tactical usermod -a -G sudo tactical Tip Enable passwordless sudo to make your life easier in the future","title":"Create a linux user"},{"location":"restore/#setup-the-firewall-optional-but-highly-recommended","text":"Info Skip this step if your VM is not publicly exposed to the world e.g. running behind NAT. You should setup the firewall rules in your router instead (ports 22, 443 and 4222 TCP). ufw default deny incoming ufw default allow outgoing ufw allow https ufw allow proto tcp from any to any port 4222 Info SSH (port 22 tcp) is only required for you to remotely login and do basic linux server administration for your rmm. It is not needed for any agent communication. Allow ssh from everywhere ( not recommended) ufw allow ssh Allow ssh from only allowed IP's ( highly recommended) ufw allow proto tcp from X.X.X.X to any port 22 ufw allow proto tcp from X.X.X.X to any port 22 Enable and activate the firewall ufw enable && ufw reload Note You will never login to the server again as root again unless something has gone horribly wrong, and you're working with the developers.","title":"Setup the firewall (optional but highly recommended)"},{"location":"restore/#change-dns-a-records","text":"Open the DNS manager of wherever your domain is hosted. Change the 3 A records rmm , api and mesh and point them to the public IP of your new server.","title":"Change DNS A records"},{"location":"restore/#run-the-restore-script","text":"Make sure you're logged in with the non-root user (eg tactical ) Copy the backup tar file you created during backup to the new server. Download the restore script. wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/restore.sh chmod +x restore.sh Call the restore script, passing it the backup file as the first argument: ./restore.sh rmm-backup-XXXXXXXXX.tar","title":"Run the restore script"},{"location":"script_variables/","text":"Script Variables \u00b6 Tactical RMM allows passing dashboard data into script as arguments. This uses the syntax {{client.name}} . See below for the available options. Info Everything between {{}} is CaSe sEnSiTive Agent \u00b6 {{agent.version}} - Tactical RMM agent version {{agent.operating_system}} - Agent operating system example: Windows 10 Pro, 64 bit (build 19042.928) {{agent.plat}} - Will show the platform example: windows {{agent.plat_release}} - Will show the platform release {{agent.hostname}} - The hostname of the agent {{agent.local_ips}} - Local IP address of agent {{agent.public_ip}} - Public IP address of agent {{agent.agent_id}} - agent ID in database {{agent.last_seen}} - Date and Time Agent last seen {{agent.used_ram}} - Used RAM on agent. Returns an integer - example: 16 {{agent.total_ram}} - Total RAM on agent. Returns an integer - example: 16 {{agent.boot_time}} - Uptime of agent. Returns unix timestamp. example: 1619439603.0 {{agent.logged_in_username}} - Username of logged in user {{agent.last_logged_in_user}} - Username of last logged in user {{agent.monitoring_type}} - Returns a string of workstation or server {{agent.description}} - Description of agent in dashboard {{agent.mesh_node_id}} - The mesh node id used for linking the tactical agent to mesh. {{agent.overdue_email_alert}} - Returns true if overdue email alerts is enabled in TRMM {{agent.overdue_text_alert}} - Returns true if overdue SMS alerts is enabled in TRMM {{agent.overdue_dashboard_alert}} - Returns true if overdue agent alerts is enabled in TRMM {{agent.offline_time}} - Returns offline time setting for agent in TRMM {{agent.overdue_time}} - Returns overdue time setting for agent in TRMM {{agent.check_interval}} - Returns check interval time setting for agent in TRMM {{agent.needs_reboot}} - Returns true if reboot is pending on agent {{agent.choco_installed}} - Returns true if Chocolatey is installed {{agent.patches_last_installed}} - The date that patches were last installed by Tactical RMM. {{agent.needs_reboot}} - Returns true if the agent needs a reboot {{agent.time_zone}} - Returns timezone configured on agent {{agent.maintenance_mode}} - Returns true if agent is in maintenance mode {{agent.block_policy_inheritance}} - Returns true if agent has block policy inheritance {{agent.alert_template} - Returns true if agent has block policy inheritance Client \u00b6 {{client.name}} - Returns name of client Site \u00b6 {{site.name}} - Returns name of Site Alert \u00b6 Info Only available in failure and resolve actions on alert templates! {{alert.alert_time}} - Time of the alert {{alert.message}} - Alert message {{alert.severity}} - Severity of the alert info, warning, or error","title":"Reference: Script Variables"},{"location":"script_variables/#script-variables","text":"Tactical RMM allows passing dashboard data into script as arguments. This uses the syntax {{client.name}} . See below for the available options. Info Everything between {{}} is CaSe sEnSiTive","title":"Script Variables"},{"location":"script_variables/#agent","text":"{{agent.version}} - Tactical RMM agent version {{agent.operating_system}} - Agent operating system example: Windows 10 Pro, 64 bit (build 19042.928) {{agent.plat}} - Will show the platform example: windows {{agent.plat_release}} - Will show the platform release {{agent.hostname}} - The hostname of the agent {{agent.local_ips}} - Local IP address of agent {{agent.public_ip}} - Public IP address of agent {{agent.agent_id}} - agent ID in database {{agent.last_seen}} - Date and Time Agent last seen {{agent.used_ram}} - Used RAM on agent. Returns an integer - example: 16 {{agent.total_ram}} - Total RAM on agent. Returns an integer - example: 16 {{agent.boot_time}} - Uptime of agent. Returns unix timestamp. example: 1619439603.0 {{agent.logged_in_username}} - Username of logged in user {{agent.last_logged_in_user}} - Username of last logged in user {{agent.monitoring_type}} - Returns a string of workstation or server {{agent.description}} - Description of agent in dashboard {{agent.mesh_node_id}} - The mesh node id used for linking the tactical agent to mesh. {{agent.overdue_email_alert}} - Returns true if overdue email alerts is enabled in TRMM {{agent.overdue_text_alert}} - Returns true if overdue SMS alerts is enabled in TRMM {{agent.overdue_dashboard_alert}} - Returns true if overdue agent alerts is enabled in TRMM {{agent.offline_time}} - Returns offline time setting for agent in TRMM {{agent.overdue_time}} - Returns overdue time setting for agent in TRMM {{agent.check_interval}} - Returns check interval time setting for agent in TRMM {{agent.needs_reboot}} - Returns true if reboot is pending on agent {{agent.choco_installed}} - Returns true if Chocolatey is installed {{agent.patches_last_installed}} - The date that patches were last installed by Tactical RMM. {{agent.needs_reboot}} - Returns true if the agent needs a reboot {{agent.time_zone}} - Returns timezone configured on agent {{agent.maintenance_mode}} - Returns true if agent is in maintenance mode {{agent.block_policy_inheritance}} - Returns true if agent has block policy inheritance {{agent.alert_template} - Returns true if agent has block policy inheritance","title":"Agent"},{"location":"script_variables/#client","text":"{{client.name}} - Returns name of client","title":"Client"},{"location":"script_variables/#site","text":"{{site.name}} - Returns name of Site","title":"Site"},{"location":"script_variables/#alert","text":"Info Only available in failure and resolve actions on alert templates! {{alert.alert_time}} - Time of the alert {{alert.message}} - Alert message {{alert.severity}} - Severity of the alert info, warning, or error","title":"Alert"},{"location":"securing_nginx/","text":"DISCLAIMER \u00b6 All the settings covered in this document have been tested against Tactical RMM v0.7.2 and v0.8.0. Before applying these settings in production, use a pre-production environment so potential disruptions in your own environment and the service that you provide to your clients can be avoided. Warning Use the contents included in this guide and apply the security settings detailed here at your own discretion. Info Please check the following github issue for potential side effects of deploying these configs. Intro \u00b6 This section is structured in three main subsections: Enabling GeoIP in NGINX config with the purpose of filtering (blocking) web requests based on the country\u2019s source IP. Enabling anti \u201cbad\u201d bots/referrers in HTTP requests to the NGINX server. Compiling and enabling ModSec + OWASP CRS in NGINX server. Each section can be enabled independently. Hardening NGINX settings \u00b6 GeoIP Integration in NGINX - Blocking Requests by Country Code \u00b6 Install required packages and NGINX module for GeoIP: # apt-get install geoip-database libgeoip1 libnginx-mod-http-geoip Verify that the GeoIP database files have been placed in the right location: # ls -lrt /usr/share/GeoIP/ total 10004 -rw-r--r-- 1 root root 8138841 Jan 24 2020 GeoIPv6.dat -rw-r--r-- 1 root root 2099217 Jan 24 2020 GeoIP.dat Edit NGINX config file (\u201c/etc/nginx/nginx.conf\u201d) and add the following config under the \u201chttp {\u201c block: http { ## # Basic Settings ## # Load GeoIP Database geoip_country /usr/share/GeoIP/GeoIP.dat; The next settings will depend on the desired GeoIP blocking strategy. For \u201callow by default, deny by exception\u201d, the config would be: http { ## # Basic Settings ## # Load GeoIP Database geoip_country /usr/share/GeoIP/GeoIP.dat; # map the list of denied countries map $geoip_country_code $allowed_country { default yes; # BLOCKED_COUNTRY_1 COUNTRY_CODE_1 no; # BLOCKED_COUNTRY_2 COUNTRY_CODE_2 no; # BLOCKED_COUNTRY_3 COUNTRY_CODE_3 no; } (The macro can be modified to achieve the \u201cdeny by default, allow by exception\u201d approach). Finally, the following \u201cif\u201d statement needs to be placed in all the vhosts where the GeoIP blocking should take effect, under the \u201clocation\u201d section: location / { root /var/www/rmm/dist; try_files $uri $uri/ /index.html; add_header Cache-Control \"no-store, no-cache, must-revalidate\"; add_header Pragma \"no-cache\"; # block the country if ($allowed_country = no) { return 444; } } The HTTP Status = 444 is a good choice for NGINX not \u201cwasting\u201d too many resources in sending back the 4xx code to the client being blocked by GeoIP. Blocking \u201cbad bots\u201d and \u201cbad referrers\u201d \u00b6 Nginx Bad Bot and User-Agent Blocker, Spam Referrer Blocker, Anti DDOS, Bad IP Blocker and Wordpress Theme Detector Blocker Source: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker Download \u201cinstall-ngxblocker\u201d to your /usr/local/sbin/directory and make the script executable. sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/install-ngxblocker -O /usr/local/sbin/install-ngxblocker sudo chmod +x /usr/local/sbin/install-ngxblocker (OPTIONAL) Now run the \u201dinstall-ngxblocker\u201d script in DRY-MODE which will show you what changes it will make and what files it will download for you. This is only a DRY-RUN so no changes are being made yet. The install-ngxblocker downloads all required files including the setup and update scripts. cd /usr/local/sbin sudo ./install-ngxblocker This will show you output as follows of the changes that will be made (NOTE: this is only a DRY-RUN no changes have been made) Checking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt ** Dry Run ** | not updating files | run as 'install-ngxblocker -x' to install files. Creating directory: /etc/nginx/bots.d REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/conf.d/globalblacklist.conf [TO]=> /etc/nginx/conf.d/globalblacklist.conf Downloading [FROM]=> [REPO]/conf.d/botblocker-nginx-settings.conf [TO]=> /etc/nginx/conf.d/botblocker-nginx-settings.conf REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/bots.d/blockbots.conf [TO]=> /etc/nginx/bots.d/blockbots.conf Downloading [FROM]=> [REPO]/bots.d/ddos.conf [TO]=> /etc/nginx/bots.d/ddos.conf Downloading [FROM]=> [REPO]/bots.d/whitelist-ips.conf [TO]=> /etc/nginx/bots.d/whitelist-ips.conf Downloading [FROM]=> [REPO]/bots.d/whitelist-domains.conf [TO]=> /etc/nginx/bots.d/whitelist-domains.conf Downloading [FROM]=> [REPO]/bots.d/blacklist-user-agents.conf [TO]=> /etc/nginx/bots.d/blacklist-user-agents.conf Downloading [FROM]=> [REPO]/bots.d/blacklist-ips.conf [TO]=> /etc/nginx/bots.d/blacklist-ips.conf Downloading [FROM]=> [REPO]/bots.d/bad-referrer-words.conf [TO]=> /etc/nginx/bots.d/bad-referrer-words.conf Downloading [FROM]=> [REPO]/bots.d/custom-bad-referrers.conf [TO]=> /etc/nginx/bots.d/custom-bad-referrers.conf REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/setup-ngxblocker [TO]=> /usr/local/sbin/setup-ngxblocker Downloading [FROM]=> [REPO]/update-ngxblocker [TO]=> /usr/local/sbin/update-ngxblocker Now run the install script with the -x parameter to download all the necessary files from the repository: cd /usr/local/sbin/ sudo ./install-ngxblocker -x This will give you the following output: Checking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt Creating directory: /etc/nginx/bots.d REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/conf.d/globalblacklist.conf [TO]=> /etc/nginx/conf.d/globalblacklist.conf...OK Downloading [FROM]=> [REPO]/conf.d/botblocker-nginx-settings.conf [TO]=> /etc/nginx/conf.d/botblocker-nginx-settings.conf...OK REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/bots.d/blockbots.conf [TO]=> /etc/nginx/bots.d/blockbots.conf...OK Downloading [FROM]=> [REPO]/bots.d/ddos.conf [TO]=> /etc/nginx/bots.d/ddos.conf...OK Downloading [FROM]=> [REPO]/bots.d/whitelist-ips.conf [TO]=> /etc/nginx/bots.d/whitelist-ips.conf...OK Downloading [FROM]=> [REPO]/bots.d/whitelist-domains.conf [TO]=> /etc/nginx/bots.d/whitelist-domains.conf...OK Downloading [FROM]=> [REPO]/bots.d/blacklist-user-agents.conf [TO]=> /etc/nginx/bots.d/blacklist-user-agents.conf...OK Downloading [FROM]=> [REPO]/bots.d/blacklist-ips.conf [TO]=> /etc/nginx/bots.d/blacklist-ips.conf...OK Downloading [FROM]=> [REPO]/bots.d/bad-referrer-words.conf [TO]=> /etc/nginx/bots.d/bad-referrer-words.conf...OK Downloading [FROM]=> [REPO]/bots.d/custom-bad-referrers.conf [TO]=> /etc/nginx/bots.d/custom-bad-referrers.conf...OK REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/setup-ngxblocker [TO]=> /usr/local/sbin/setup-ngxblocker...OK Downloading [FROM]=> [REPO]/update-ngxblocker [TO]=> /usr/local/sbin/update-ngxblocker...OK All the required files have now been downloaded to the correct folders on Nginx for you direct from the repository. NOTE: The setup and update scripts can be used, however in this guide the config is done manually. For script execution, refer to the Github page linked above. Include any public IP addresses that should be whitelisted from bot and referrer analysis/blocking by editing the file \u201c/etc/nginx/bots.d/whitelist-ips.conf\u201d. Finally, edit every vhost file (\u201c/etc/nginx/sites-enabled/frontend.conf\u201d, \u201c/etc/nginx/sites-enabled/rmm.conf\u201d and \u201c/etc/nginx/sites-enabled/meshcentral.conf\u201d) and place the following include statements under the \u201cserver\u201d block: server { listen 443 ssl; include /etc/nginx/bots.d/ddos.conf; include /etc/nginx/bots.d/blockbots.conf; Enabling ModSec in NGINX \u00b6 All steps in this section taken from the NGINX blog post \u201cCompiling and Installing ModSecurity for NGINX Open Source\u201d: https://www.nginx.com/blog/compiling-and-installing-modsecurity-for-open-source-nginx/ Install Prerequisite Packages \u00b6 The first step is to install the packages required to complete the remaining steps in this tutorial. Run the following command, which is appropriate for a freshly installed Ubuntu/Debian system. The required packages might be different for RHEL/CentOS/Oracle Linux. apt-get install -y apt-utils autoconf automake build-essential git libcurl4-openssl-dev libgeoip-dev liblmdb-dev libpcre++-dev libtool libxml2-dev libyajl-dev pkgconf wget zlib1g-dev Download and Compile the ModSecurity 3.0 Source Code \u00b6 With the required prerequisite packages installed, the next step is to compile ModSecurity as an NGINX dynamic module. In ModSecurity 3.0\u2019s new modular architecture, libmodsecurity is the core component which includes all rules and functionality. The second main component in the architecture is a connector that links libmodsecurity to the web server it is running with. There are separate connectors for NGINX, Apache HTTP Server, and IIS. We cover the NGINX connector in the next section. To compile libmodsecurity: Clone the GitHub repository: git clone --depth 1 -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity Change to the ModSecurity directory and compile the source code: cd ModSecurity git submodule init git submodule update ./build.sh ./configure make make install cd .. The compilation takes about 15 minutes, depending on the processing power of your system. Note: It\u2019s safe to ignore messages like the following during the build process. Even when they appear, the compilation completes and creates a working object. fatal: No names found, cannot describe anything. Download the NGINX Connector for ModSecurity and Compile It as a Dynamic Module \u00b6 Compile the ModSecurity connector for NGINX as a dynamic module for NGINX. Clone the GitHub repository: git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git Determine which version of NGINX is running on the host where the ModSecurity module will be loaded: $ nginx -v nginx version: nginx/1.18.0 ( Ubuntu ) Download the source code corresponding to the installed version of NGINX (the complete sources are required even though only the dynamic module is being compiled): wget http://nginx.org/download/nginx-1.18.0.tar.gz tar zxvf nginx-1.18.0.tar.gz Compile the dynamic module and copy it to the standard directory for modules: cd nginx-1.18.0 ./configure --with-compat --add-dynamic-module = ../ModSecurity-nginx make modules cp objs/ngx_http_modsecurity_module.so /etc/nginx/modules cp objs/ngx_http_modsecurity_module.so /usr/share/nginx/modules/ cd .. Load the NGINX ModSecurity Connector Dynamic Module \u00b6 Add the following load_module directive to the main (top\u2011level) context in /etc/nginx/nginx.conf. It instructs NGINX to load the ModSecurity dynamic module when it processes the configuration: load_module modules/ngx_http_modsecurity_module.so; Configure and Enable ModSecurity \u00b6 The final step is to enable and test ModSecurity. Set up the appropriate ModSecurity configuration file. Here we\u2019re using the recommended ModSecurity configuration provided by TrustWave Spiderlabs, the corporate sponsors of ModSecurity. mkdir /etc/nginx/modsec wget -P /etc/nginx/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended mv /etc/nginx/modsec/modsecurity.conf-recommended /etc/nginx/modsec/modsecurity.conf To guarantee that ModSecurity can find the unicode.mapping file (distributed in the top\u2011level ModSecurity directory of the GitHub repo), copy it to /etc/nginx/modsec. cp ModSecurity/unicode.mapping /etc/nginx/modsec Change the SecRuleEngine directive in the configuration to change from the default \u201cdetection only\u201d mode to actively dropping malicious traffic. #SecRuleEngine DetectionOnly SecRuleEngine On Enabling OWASP Core Rule Set \u00b6 Clone OWASP CRS: cd /etc/nginx/modsec git clone https://github.com/coreruleset/coreruleset.git Create CRS setup config file: cp /etc/nginx/modsec/coreruleset/crs-setup.conf.example /etc/nginx/modsec/coreruleset/crs-setup.conf Edit config file and enable a paranoia level of 2 (comment out section below and modify the paranoia level from 1 - default to 2): SecAction \\ \"id:900000,\\ phase:1,\\ nolog,\\ pass,\\ t:none,\\ setvar:tx.paranoia_level=2\" A Paranoia level of 2 is a good combination of security rules to load by the ModSec engine while keeping low the number of false positives. The OWASP CRS team carried out some tests using BURP against ModSec + OWASP CRS: Create ModSecurity base config file (\u201c/etc/nginx/modsec/modsec-base-cfg.conf\u201d) and include the following lines (the order is important) : Include /etc/nginx/modsec/modsecurity.conf Include /etc/nginx/modsec/coreruleset/crs-setup.conf Include /etc/nginx/modsec/coreruleset/rules/*.conf Enable ModSec in all NGINX enabled sites: \u201c/etc/nginx/sites-enabled/frontend.conf\u201d, \u201c/etc/nginx/sites-enabled/rmm.conf\u201d and \u201c/etc/nginx/sites-enabled/meshcentral.conf\u201d: server { modsecurity on; modsecurity_rules_file /etc/nginx/modsec/modsec-base-cfg.conf; \u2026\u2026\u2026\u2026\u2026\u2026\u2026.. \u2026\u2026\u2026\u2026\u2026\u2026\u2026.. Tactical RMM custom rules: Access to the admin UI (front-end): We apply the \u201cdeny by default, allow by exception\u201d principle, whereby only a set of predefined public IPs should be allowed to access the UI API and Meshcentral: RMM agents and RMM UI (as referrer while an admin session is active) make web calls that get blocked by the OWASP CRS, specifically PUT, POST and PATCH methods. These three methods can be \u201cwhitelisted\u201d when the requested URI matches legitimate requests. Connection to Meshcentral during Tactical agent install. Create a .conf file under \u201c/etc/nginx/modsec/coreruleset/rules\u201d named \u201cRMM-RULES.conf\u201d, for example, with the following content: #ADMIN UI/FRONTEND ACCESS - DENY BY DEFAULT, ALLOW BY EXCEPTION SecRule SERVER_NAME \"rmm.EXAMPLE.COM\" \"id:1001,phase:1,nolog,msg:'Remote IP Not allowed',deny,chain\" ### ALLOWED PUBLIC IP 1 ######### SecRule REMOTE_ADDR \"!@eq IP1\" chain ### ALLOWED PUBLIC IP 2 ######### SecRule REMOTE_ADDR \"!@eq IP2\" \"t:none\" #API AND MESHCENTRAL - WHITELIST PUT, PATCH AND POST METHODS BY REQUESTED URI SecRule REQUEST_URI \"@beginsWith /api/v3/checkin\" \"id:1002,phase:1,t:none,nolog,allow,chain\" SecRule REQUEST_METHOD \"PUT|PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/checkrunner\" \"chain,id:'1003',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /alerts/alerts\" \"chain,id:'1004',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /agents/listagents\" \"chain,id:'1005',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/sysinfo\" \"chain,id:'1006',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/winupdates\" \"chain,id:'1007',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"POST\" ##REQUIRED FOR MANAGEMENT ACTIONS FROM ADMIN/FRONT-END UI. WHITELIST BY REFERRER's URL SecRule REQUEST_HEADERS:REFERER \"https://rmm.EXAMPLE.COM/\" \"id:1008,phase:1,nolog,ctl:ruleRemoveById=920170,allow\" #REQUIRED FOR NEW CLIENTS TO CONNECT TO MESH SERVICE WHILE INSTALLING THE AGENT SecRule REQUEST_URI \"@beginsWith /api/v3/meshexe\" \"id:1009,phase:1,nolog,ctl:ruleRemoveById=920170,allow\" ### NOTE ON RULE ID = 920170 (WHITELISTED IN CASES ABOVE FOR TACTICAL RMM) ### # Do not accept GET or HEAD requests with bodies # HTTP standard allows GET requests to have a body but this # feature is not used in real life. Attackers could try to force # a request body on an unsuspecting web applications. # # -=[ Rule Logic ]=- # This is a chained rule that first checks the Request Method. If it is a # GET or HEAD method, then it checks for the existence of a Content-Length # header. If the header exists and its payload is either not a 0 digit or not # empty, then it will match. # # -=[ References ]=- # http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3 ###","title":"Securing nginx"},{"location":"securing_nginx/#disclaimer","text":"All the settings covered in this document have been tested against Tactical RMM v0.7.2 and v0.8.0. Before applying these settings in production, use a pre-production environment so potential disruptions in your own environment and the service that you provide to your clients can be avoided. Warning Use the contents included in this guide and apply the security settings detailed here at your own discretion. Info Please check the following github issue for potential side effects of deploying these configs.","title":"DISCLAIMER"},{"location":"securing_nginx/#intro","text":"This section is structured in three main subsections: Enabling GeoIP in NGINX config with the purpose of filtering (blocking) web requests based on the country\u2019s source IP. Enabling anti \u201cbad\u201d bots/referrers in HTTP requests to the NGINX server. Compiling and enabling ModSec + OWASP CRS in NGINX server. Each section can be enabled independently.","title":"Intro"},{"location":"securing_nginx/#hardening-nginx-settings","text":"","title":"Hardening NGINX settings"},{"location":"securing_nginx/#geoip-integration-in-nginx-blocking-requests-by-country-code","text":"Install required packages and NGINX module for GeoIP: # apt-get install geoip-database libgeoip1 libnginx-mod-http-geoip Verify that the GeoIP database files have been placed in the right location: # ls -lrt /usr/share/GeoIP/ total 10004 -rw-r--r-- 1 root root 8138841 Jan 24 2020 GeoIPv6.dat -rw-r--r-- 1 root root 2099217 Jan 24 2020 GeoIP.dat Edit NGINX config file (\u201c/etc/nginx/nginx.conf\u201d) and add the following config under the \u201chttp {\u201c block: http { ## # Basic Settings ## # Load GeoIP Database geoip_country /usr/share/GeoIP/GeoIP.dat; The next settings will depend on the desired GeoIP blocking strategy. For \u201callow by default, deny by exception\u201d, the config would be: http { ## # Basic Settings ## # Load GeoIP Database geoip_country /usr/share/GeoIP/GeoIP.dat; # map the list of denied countries map $geoip_country_code $allowed_country { default yes; # BLOCKED_COUNTRY_1 COUNTRY_CODE_1 no; # BLOCKED_COUNTRY_2 COUNTRY_CODE_2 no; # BLOCKED_COUNTRY_3 COUNTRY_CODE_3 no; } (The macro can be modified to achieve the \u201cdeny by default, allow by exception\u201d approach). Finally, the following \u201cif\u201d statement needs to be placed in all the vhosts where the GeoIP blocking should take effect, under the \u201clocation\u201d section: location / { root /var/www/rmm/dist; try_files $uri $uri/ /index.html; add_header Cache-Control \"no-store, no-cache, must-revalidate\"; add_header Pragma \"no-cache\"; # block the country if ($allowed_country = no) { return 444; } } The HTTP Status = 444 is a good choice for NGINX not \u201cwasting\u201d too many resources in sending back the 4xx code to the client being blocked by GeoIP.","title":"GeoIP Integration in NGINX - Blocking Requests by Country Code"},{"location":"securing_nginx/#blocking-bad-bots-and-bad-referrers","text":"Nginx Bad Bot and User-Agent Blocker, Spam Referrer Blocker, Anti DDOS, Bad IP Blocker and Wordpress Theme Detector Blocker Source: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker Download \u201cinstall-ngxblocker\u201d to your /usr/local/sbin/directory and make the script executable. sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/install-ngxblocker -O /usr/local/sbin/install-ngxblocker sudo chmod +x /usr/local/sbin/install-ngxblocker (OPTIONAL) Now run the \u201dinstall-ngxblocker\u201d script in DRY-MODE which will show you what changes it will make and what files it will download for you. This is only a DRY-RUN so no changes are being made yet. The install-ngxblocker downloads all required files including the setup and update scripts. cd /usr/local/sbin sudo ./install-ngxblocker This will show you output as follows of the changes that will be made (NOTE: this is only a DRY-RUN no changes have been made) Checking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt ** Dry Run ** | not updating files | run as 'install-ngxblocker -x' to install files. Creating directory: /etc/nginx/bots.d REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/conf.d/globalblacklist.conf [TO]=> /etc/nginx/conf.d/globalblacklist.conf Downloading [FROM]=> [REPO]/conf.d/botblocker-nginx-settings.conf [TO]=> /etc/nginx/conf.d/botblocker-nginx-settings.conf REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/bots.d/blockbots.conf [TO]=> /etc/nginx/bots.d/blockbots.conf Downloading [FROM]=> [REPO]/bots.d/ddos.conf [TO]=> /etc/nginx/bots.d/ddos.conf Downloading [FROM]=> [REPO]/bots.d/whitelist-ips.conf [TO]=> /etc/nginx/bots.d/whitelist-ips.conf Downloading [FROM]=> [REPO]/bots.d/whitelist-domains.conf [TO]=> /etc/nginx/bots.d/whitelist-domains.conf Downloading [FROM]=> [REPO]/bots.d/blacklist-user-agents.conf [TO]=> /etc/nginx/bots.d/blacklist-user-agents.conf Downloading [FROM]=> [REPO]/bots.d/blacklist-ips.conf [TO]=> /etc/nginx/bots.d/blacklist-ips.conf Downloading [FROM]=> [REPO]/bots.d/bad-referrer-words.conf [TO]=> /etc/nginx/bots.d/bad-referrer-words.conf Downloading [FROM]=> [REPO]/bots.d/custom-bad-referrers.conf [TO]=> /etc/nginx/bots.d/custom-bad-referrers.conf REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/setup-ngxblocker [TO]=> /usr/local/sbin/setup-ngxblocker Downloading [FROM]=> [REPO]/update-ngxblocker [TO]=> /usr/local/sbin/update-ngxblocker Now run the install script with the -x parameter to download all the necessary files from the repository: cd /usr/local/sbin/ sudo ./install-ngxblocker -x This will give you the following output: Checking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt Creating directory: /etc/nginx/bots.d REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/conf.d/globalblacklist.conf [TO]=> /etc/nginx/conf.d/globalblacklist.conf...OK Downloading [FROM]=> [REPO]/conf.d/botblocker-nginx-settings.conf [TO]=> /etc/nginx/conf.d/botblocker-nginx-settings.conf...OK REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/bots.d/blockbots.conf [TO]=> /etc/nginx/bots.d/blockbots.conf...OK Downloading [FROM]=> [REPO]/bots.d/ddos.conf [TO]=> /etc/nginx/bots.d/ddos.conf...OK Downloading [FROM]=> [REPO]/bots.d/whitelist-ips.conf [TO]=> /etc/nginx/bots.d/whitelist-ips.conf...OK Downloading [FROM]=> [REPO]/bots.d/whitelist-domains.conf [TO]=> /etc/nginx/bots.d/whitelist-domains.conf...OK Downloading [FROM]=> [REPO]/bots.d/blacklist-user-agents.conf [TO]=> /etc/nginx/bots.d/blacklist-user-agents.conf...OK Downloading [FROM]=> [REPO]/bots.d/blacklist-ips.conf [TO]=> /etc/nginx/bots.d/blacklist-ips.conf...OK Downloading [FROM]=> [REPO]/bots.d/bad-referrer-words.conf [TO]=> /etc/nginx/bots.d/bad-referrer-words.conf...OK Downloading [FROM]=> [REPO]/bots.d/custom-bad-referrers.conf [TO]=> /etc/nginx/bots.d/custom-bad-referrers.conf...OK REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/setup-ngxblocker [TO]=> /usr/local/sbin/setup-ngxblocker...OK Downloading [FROM]=> [REPO]/update-ngxblocker [TO]=> /usr/local/sbin/update-ngxblocker...OK All the required files have now been downloaded to the correct folders on Nginx for you direct from the repository. NOTE: The setup and update scripts can be used, however in this guide the config is done manually. For script execution, refer to the Github page linked above. Include any public IP addresses that should be whitelisted from bot and referrer analysis/blocking by editing the file \u201c/etc/nginx/bots.d/whitelist-ips.conf\u201d. Finally, edit every vhost file (\u201c/etc/nginx/sites-enabled/frontend.conf\u201d, \u201c/etc/nginx/sites-enabled/rmm.conf\u201d and \u201c/etc/nginx/sites-enabled/meshcentral.conf\u201d) and place the following include statements under the \u201cserver\u201d block: server { listen 443 ssl; include /etc/nginx/bots.d/ddos.conf; include /etc/nginx/bots.d/blockbots.conf;","title":"Blocking \u201cbad bots\u201d and \u201cbad referrers\u201d"},{"location":"securing_nginx/#enabling-modsec-in-nginx","text":"All steps in this section taken from the NGINX blog post \u201cCompiling and Installing ModSecurity for NGINX Open Source\u201d: https://www.nginx.com/blog/compiling-and-installing-modsecurity-for-open-source-nginx/","title":"Enabling ModSec in NGINX"},{"location":"securing_nginx/#install-prerequisite-packages","text":"The first step is to install the packages required to complete the remaining steps in this tutorial. Run the following command, which is appropriate for a freshly installed Ubuntu/Debian system. The required packages might be different for RHEL/CentOS/Oracle Linux. apt-get install -y apt-utils autoconf automake build-essential git libcurl4-openssl-dev libgeoip-dev liblmdb-dev libpcre++-dev libtool libxml2-dev libyajl-dev pkgconf wget zlib1g-dev","title":"Install Prerequisite Packages"},{"location":"securing_nginx/#download-and-compile-the-modsecurity-30-source-code","text":"With the required prerequisite packages installed, the next step is to compile ModSecurity as an NGINX dynamic module. In ModSecurity 3.0\u2019s new modular architecture, libmodsecurity is the core component which includes all rules and functionality. The second main component in the architecture is a connector that links libmodsecurity to the web server it is running with. There are separate connectors for NGINX, Apache HTTP Server, and IIS. We cover the NGINX connector in the next section. To compile libmodsecurity: Clone the GitHub repository: git clone --depth 1 -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity Change to the ModSecurity directory and compile the source code: cd ModSecurity git submodule init git submodule update ./build.sh ./configure make make install cd .. The compilation takes about 15 minutes, depending on the processing power of your system. Note: It\u2019s safe to ignore messages like the following during the build process. Even when they appear, the compilation completes and creates a working object. fatal: No names found, cannot describe anything.","title":"Download and Compile the ModSecurity 3.0 Source Code"},{"location":"securing_nginx/#download-the-nginx-connector-for-modsecurity-and-compile-it-as-a-dynamic-module","text":"Compile the ModSecurity connector for NGINX as a dynamic module for NGINX. Clone the GitHub repository: git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git Determine which version of NGINX is running on the host where the ModSecurity module will be loaded: $ nginx -v nginx version: nginx/1.18.0 ( Ubuntu ) Download the source code corresponding to the installed version of NGINX (the complete sources are required even though only the dynamic module is being compiled): wget http://nginx.org/download/nginx-1.18.0.tar.gz tar zxvf nginx-1.18.0.tar.gz Compile the dynamic module and copy it to the standard directory for modules: cd nginx-1.18.0 ./configure --with-compat --add-dynamic-module = ../ModSecurity-nginx make modules cp objs/ngx_http_modsecurity_module.so /etc/nginx/modules cp objs/ngx_http_modsecurity_module.so /usr/share/nginx/modules/ cd ..","title":"Download the NGINX Connector for ModSecurity and Compile It as a Dynamic Module"},{"location":"securing_nginx/#load-the-nginx-modsecurity-connector-dynamic-module","text":"Add the following load_module directive to the main (top\u2011level) context in /etc/nginx/nginx.conf. It instructs NGINX to load the ModSecurity dynamic module when it processes the configuration: load_module modules/ngx_http_modsecurity_module.so;","title":"Load the NGINX ModSecurity Connector Dynamic Module"},{"location":"securing_nginx/#configure-and-enable-modsecurity","text":"The final step is to enable and test ModSecurity. Set up the appropriate ModSecurity configuration file. Here we\u2019re using the recommended ModSecurity configuration provided by TrustWave Spiderlabs, the corporate sponsors of ModSecurity. mkdir /etc/nginx/modsec wget -P /etc/nginx/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended mv /etc/nginx/modsec/modsecurity.conf-recommended /etc/nginx/modsec/modsecurity.conf To guarantee that ModSecurity can find the unicode.mapping file (distributed in the top\u2011level ModSecurity directory of the GitHub repo), copy it to /etc/nginx/modsec. cp ModSecurity/unicode.mapping /etc/nginx/modsec Change the SecRuleEngine directive in the configuration to change from the default \u201cdetection only\u201d mode to actively dropping malicious traffic. #SecRuleEngine DetectionOnly SecRuleEngine On","title":"Configure and Enable ModSecurity"},{"location":"securing_nginx/#enabling-owasp-core-rule-set","text":"Clone OWASP CRS: cd /etc/nginx/modsec git clone https://github.com/coreruleset/coreruleset.git Create CRS setup config file: cp /etc/nginx/modsec/coreruleset/crs-setup.conf.example /etc/nginx/modsec/coreruleset/crs-setup.conf Edit config file and enable a paranoia level of 2 (comment out section below and modify the paranoia level from 1 - default to 2): SecAction \\ \"id:900000,\\ phase:1,\\ nolog,\\ pass,\\ t:none,\\ setvar:tx.paranoia_level=2\" A Paranoia level of 2 is a good combination of security rules to load by the ModSec engine while keeping low the number of false positives. The OWASP CRS team carried out some tests using BURP against ModSec + OWASP CRS: Create ModSecurity base config file (\u201c/etc/nginx/modsec/modsec-base-cfg.conf\u201d) and include the following lines (the order is important) : Include /etc/nginx/modsec/modsecurity.conf Include /etc/nginx/modsec/coreruleset/crs-setup.conf Include /etc/nginx/modsec/coreruleset/rules/*.conf Enable ModSec in all NGINX enabled sites: \u201c/etc/nginx/sites-enabled/frontend.conf\u201d, \u201c/etc/nginx/sites-enabled/rmm.conf\u201d and \u201c/etc/nginx/sites-enabled/meshcentral.conf\u201d: server { modsecurity on; modsecurity_rules_file /etc/nginx/modsec/modsec-base-cfg.conf; \u2026\u2026\u2026\u2026\u2026\u2026\u2026.. \u2026\u2026\u2026\u2026\u2026\u2026\u2026.. Tactical RMM custom rules: Access to the admin UI (front-end): We apply the \u201cdeny by default, allow by exception\u201d principle, whereby only a set of predefined public IPs should be allowed to access the UI API and Meshcentral: RMM agents and RMM UI (as referrer while an admin session is active) make web calls that get blocked by the OWASP CRS, specifically PUT, POST and PATCH methods. These three methods can be \u201cwhitelisted\u201d when the requested URI matches legitimate requests. Connection to Meshcentral during Tactical agent install. Create a .conf file under \u201c/etc/nginx/modsec/coreruleset/rules\u201d named \u201cRMM-RULES.conf\u201d, for example, with the following content: #ADMIN UI/FRONTEND ACCESS - DENY BY DEFAULT, ALLOW BY EXCEPTION SecRule SERVER_NAME \"rmm.EXAMPLE.COM\" \"id:1001,phase:1,nolog,msg:'Remote IP Not allowed',deny,chain\" ### ALLOWED PUBLIC IP 1 ######### SecRule REMOTE_ADDR \"!@eq IP1\" chain ### ALLOWED PUBLIC IP 2 ######### SecRule REMOTE_ADDR \"!@eq IP2\" \"t:none\" #API AND MESHCENTRAL - WHITELIST PUT, PATCH AND POST METHODS BY REQUESTED URI SecRule REQUEST_URI \"@beginsWith /api/v3/checkin\" \"id:1002,phase:1,t:none,nolog,allow,chain\" SecRule REQUEST_METHOD \"PUT|PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/checkrunner\" \"chain,id:'1003',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /alerts/alerts\" \"chain,id:'1004',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /agents/listagents\" \"chain,id:'1005',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/sysinfo\" \"chain,id:'1006',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/winupdates\" \"chain,id:'1007',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"POST\" ##REQUIRED FOR MANAGEMENT ACTIONS FROM ADMIN/FRONT-END UI. WHITELIST BY REFERRER's URL SecRule REQUEST_HEADERS:REFERER \"https://rmm.EXAMPLE.COM/\" \"id:1008,phase:1,nolog,ctl:ruleRemoveById=920170,allow\" #REQUIRED FOR NEW CLIENTS TO CONNECT TO MESH SERVICE WHILE INSTALLING THE AGENT SecRule REQUEST_URI \"@beginsWith /api/v3/meshexe\" \"id:1009,phase:1,nolog,ctl:ruleRemoveById=920170,allow\" ### NOTE ON RULE ID = 920170 (WHITELISTED IN CASES ABOVE FOR TACTICAL RMM) ### # Do not accept GET or HEAD requests with bodies # HTTP standard allows GET requests to have a body but this # feature is not used in real life. Attackers could try to force # a request body on an unsuspecting web applications. # # -=[ Rule Logic ]=- # This is a chained rule that first checks the Request Method. If it is a # GET or HEAD method, then it checks for the existence of a Content-Length # header. If the header exists and its payload is either not a 0 digit or not # empty, then it will match. # # -=[ References ]=- # http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3 ###","title":"Enabling OWASP Core Rule Set"},{"location":"security/","text":"Security \u00b6 If you think that you have found a security vulnerability in Tactical RMM, please disclose it to us via our security e-mail address at security@amidaware.com Please do not make vulnerabilities public without notifying us and giving us at least 3 days to respond. If you are going to write about Tactical RMM's security, please get in touch, so we can make sure that all claims are correct.","title":"Security"},{"location":"security/#security","text":"If you think that you have found a security vulnerability in Tactical RMM, please disclose it to us via our security e-mail address at security@amidaware.com Please do not make vulnerabilities public without notifying us and giving us at least 3 days to respond. If you are going to write about Tactical RMM's security, please get in touch, so we can make sure that all claims are correct.","title":"Security"},{"location":"sponsor/","text":"Sponsor Tactical RMM \u00b6 Tactical RMM is a source available project maintained by @wh1te909 , @sadnub and a community of contributors. We work on behalf of the community to create new features, fix bugs, and maintain Tactical RMM. Tactical RMM is currently the only source available RMM available on the market. Responses from a recent survey have rated Tactical RMM as having the fastest and most reliable remote command and script execution compared to all other commercial RMM's. Sponsorships help keep this project alive and motivate the developers to continue to put in more time and effort into the advancement of Tactical RMM. Thousands of hours have been put in to developing, maintaining, improving, and supporting Tactical RMM. Your sponsorship would be greatly appreciated and helpful to keep this project going. Funds donated will be used to setup a company to purchase a code signing certificate to sign all executables that are used by the RMM, costs needed to maintain demo and documentation sites, to support development of new features and the Linux and Mac agents. If you have signed up to be a sponsor and have not been added to the Sponsors role on discord after a few hours, or if your github username is different than your discord username, please DM wh1te909 on Discord after sponsoring to be added to the Sponsors role. We are always looking for feedback and ways to improve Tactical RMM to better address your needs. Please feel free to open a github issue or drop us a message on Discord with your feedback or requests. Sponsor with Github Sponsor with Ko-fi","title":"Sponsor"},{"location":"sponsor/#sponsor-tactical-rmm","text":"Tactical RMM is a source available project maintained by @wh1te909 , @sadnub and a community of contributors. We work on behalf of the community to create new features, fix bugs, and maintain Tactical RMM. Tactical RMM is currently the only source available RMM available on the market. Responses from a recent survey have rated Tactical RMM as having the fastest and most reliable remote command and script execution compared to all other commercial RMM's. Sponsorships help keep this project alive and motivate the developers to continue to put in more time and effort into the advancement of Tactical RMM. Thousands of hours have been put in to developing, maintaining, improving, and supporting Tactical RMM. Your sponsorship would be greatly appreciated and helpful to keep this project going. Funds donated will be used to setup a company to purchase a code signing certificate to sign all executables that are used by the RMM, costs needed to maintain demo and documentation sites, to support development of new features and the Linux and Mac agents. If you have signed up to be a sponsor and have not been added to the Sponsors role on discord after a few hours, or if your github username is different than your discord username, please DM wh1te909 on Discord after sponsoring to be added to the Sponsors role. We are always looking for feedback and ways to improve Tactical RMM to better address your needs. Please feel free to open a github issue or drop us a message on Discord with your feedback or requests. Sponsor with Github Sponsor with Ko-fi","title":"Sponsor Tactical RMM"},{"location":"tidbits/","text":"Misc info \u00b6 Run Intervals for Checks \u00b6 You can modify at several locations/levels: Settings Menu > Automation Manager > Checks tab > Edit check Agent Level: Edit Agent > Run checks every Edit Check under agent > Run this check every (seconds) Note The interval under check will override agent check if set","title":"Misc info"},{"location":"tidbits/#misc-info","text":"","title":"Misc info"},{"location":"tidbits/#run-intervals-for-checks","text":"You can modify at several locations/levels: Settings Menu > Automation Manager > Checks tab > Edit check Agent Level: Edit Agent > Run checks every Edit Check under agent > Run this check every (seconds) Note The interval under check will override agent check if set","title":"Run Intervals for Checks"},{"location":"tipsntricks/","text":"Tips and Tricks \u00b6 Server Monitoring \u00b6 Monitor Network usage: https://humdi.net/vnstat/ Realtime Everything Usage: ( only run when needed because it uses a lot of resources ): https://learn.netdata.cloud/docs/agent/packaging/installer/methods/kickstart Customize User Interface \u00b6 At the top right of your web administration interface, click your Username > preferences. Set default tab: Servers|Workstations|Mixed Use the filters in the agent list \u00b6 MeshCentral \u00b6 Tactical RMM is actually 2 products: An RMM service with agent, and a secondary MeshCentral install that handles the Take Control and Remote Background stuff. Want to download multiple files? ZIP zip's the currently selected file(s) and saves it in the current directory. Then you can download the ZIP. It doesn't download and ZIP on the fly. Adjust Settings \u00b6 Right-click the connect button in Remote Background | Terminal for shell options Right-click the connect button in Take Control for connect options Enable Remote Control options \u00b6 Note These settings are independent of Tactical RMM. Enable features (like auto remove inactive devices) with caution Remote background a machine then go to mesh.EXAMPLE.COM Click on My Account Click on the device group you want to enable notifications or accept connection etc on (probably TacticalRMM) Next to User Consent click edit (the wee pencil) You can also change features by ticking whatever boxes you want in there (Features: Sync server device name to hostname, Automatically remove inactive devices, Notify/Prompt for Consent/Connection Toolbar settings) Ok your way out Agent online/offline logs \u00b6 In mesh from the agent | General Tab Scripts \u00b6 When Running Scripts \u00b6 Use the (i) at the end of the script name to: Hover: see script parameter syntax help Left Click: Opens the script source in Github","title":"Tips n' Tricks"},{"location":"tipsntricks/#tips-and-tricks","text":"","title":"Tips and Tricks"},{"location":"tipsntricks/#server-monitoring","text":"Monitor Network usage: https://humdi.net/vnstat/ Realtime Everything Usage: ( only run when needed because it uses a lot of resources ): https://learn.netdata.cloud/docs/agent/packaging/installer/methods/kickstart","title":"Server Monitoring"},{"location":"tipsntricks/#customize-user-interface","text":"At the top right of your web administration interface, click your Username > preferences. Set default tab: Servers|Workstations|Mixed","title":"Customize User Interface"},{"location":"tipsntricks/#use-the-filters-in-the-agent-list","text":"","title":"Use the filters in the agent list"},{"location":"tipsntricks/#meshcentral","text":"Tactical RMM is actually 2 products: An RMM service with agent, and a secondary MeshCentral install that handles the Take Control and Remote Background stuff. Want to download multiple files? ZIP zip's the currently selected file(s) and saves it in the current directory. Then you can download the ZIP. It doesn't download and ZIP on the fly.","title":"MeshCentral"},{"location":"tipsntricks/#adjust-settings","text":"Right-click the connect button in Remote Background | Terminal for shell options Right-click the connect button in Take Control for connect options","title":"Adjust Settings"},{"location":"tipsntricks/#enable-remote-control-options","text":"Note These settings are independent of Tactical RMM. Enable features (like auto remove inactive devices) with caution Remote background a machine then go to mesh.EXAMPLE.COM Click on My Account Click on the device group you want to enable notifications or accept connection etc on (probably TacticalRMM) Next to User Consent click edit (the wee pencil) You can also change features by ticking whatever boxes you want in there (Features: Sync server device name to hostname, Automatically remove inactive devices, Notify/Prompt for Consent/Connection Toolbar settings) Ok your way out","title":"Enable Remote Control options"},{"location":"tipsntricks/#agent-onlineoffline-logs","text":"In mesh from the agent | General Tab","title":"Agent online/offline logs"},{"location":"tipsntricks/#scripts","text":"","title":"Scripts"},{"location":"tipsntricks/#when-running-scripts","text":"Use the (i) at the end of the script name to: Hover: see script parameter syntax help Left Click: Opens the script source in Github","title":"When Running Scripts"},{"location":"troubleshooting/","text":"Troubleshooting \u00b6 Server Troubleshooting Script \u00b6 If you've asked for help in #support please run this, and send a screenshot at the top of the thread created for troubleshooting your issue. Blur your domains if you desire privacy. wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/troubleshoot_server.sh chmod +x troubleshoot_server.sh ./troubleshoot_server.sh Make sure DNS (name resolution) was setup properly \u00b6 From the agent \u00b6 Open command prompt ping rmm.example.com ping api.example.com ping mesh.example.com The IP address for all 3 should reflect your Tactical RMM server Problems after new server install \u00b6 In the very unlikely event you have issues after install please wipe the box and install again (following all the steps including downloading the install script but not running it yet ) use the following command which will log the install progress and if you continue to have issues will assist with support of the installation. bash -x install.sh 2 > & 1 | tee install.log Note Logging of installs isn\u2019t desirable as it logs extremely sensitive information which is why this isn\u2019t done by default! Do not post the raw log publicly only provide it if requested and then by dm only. Authorized users in Discord are: @BurningTimes#1938 @sadnub#6992 @dinger1986#1734 @silversword#9652 \"Bad credentials\" error when trying to login to the Web UI \u00b6 If you are sure you are using the correct credentials and still getting a \"bad credentials\" error, open your browser's dev tools ( Ctrl + Shift + J on chrome) and check the Console tab to see the real error. It will most probably be a CORS error which means you need to check your DNS settings and make sure whatever computer you're trying to access the UI from resolves your 3 subdomains to the correct IP of the server running the RMM (public IP if running in the cloud, or private IP if running behind NAT). If you see an error about SSL or certificate expired, then your Let's Encrypt cert has probably expired and you'll need to renew it. Refer to the Let's Encrypt cert renewal instructions here Agents not installing or updating \u00b6 The most common problem we've seen of agents not installing or updating is due to Antivirus blocking the updater executable. Windows Defender will 100% of the time block the updater from running unless an exclusion is set. Refer to the Agent Installation instructions for AV exceptions to set and manually doing an agent update with logging to troubleshoot further. Agents will also not automatically update if they are too old. Since Tactical RMM is still in alpha and the developers makes breaking changes pretty frequently, there is no promise of backwards compatibility. If you have agents that are relatively old, you will need to uninstall them manually and reinstall using the latest version. The mesh installer is created at time of install. Make sure it's working, run on TRMM server Check TRMM connection to MeshCentral Standard Install docker /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py check_mesh sudo docker-compose exec tactical-backend python manage.py check_mesh Collect Update debug logs for troubleshooting agents that don't update Agents not checking in or showing up / General agent issues \u00b6 These are nats problems. Try quickfix first: from Admin Web Interface \u00b6 First, reload NATS from tactical's web UI: Tools > Server Maintenance > Reload Nats Configuration If that doesn't work, check each part starting with the server: Server SSH login \u00b6 Reload NATS: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reload_nats sudo systemctl restart nats.service Look at nats service errors (make sure it's running) sudo systemctl status nats.service If nats isn't running see detailed reason why it isn't: sudo systemctl stop nats.service nats-server -DVV -c /rmm/api/tacticalrmm/nats-rmm.conf Fix the problem, then restart nats. sudo systemctl restart nats.service From Agent Install \u00b6 Open CMD as admin on the problem computer and stop the agent services: net stop tacticalrmm Run the tacticalrmm service manually with debug logging: \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" -m svc -log debug -logto stdout This will print out a ton of info. You should be able to see the error from the debug log output. Please then copy/paste the logs and post them either in our Discord support chat , or create a github issue . If all else fails, simply uninstall the agent either from control panel or silently with \"C:\\Program Files\\TacticalAgent\\unins000.exe\" /VERYSILENT and then reinstall the agent. All other errors \u00b6 First, run the update script with the --force flag. This will fix permissions and reinstall python/node packages that might have gotten corrupted. ./update.sh --force Check the debug log from the web UI: File > Debug Log Open your browser's dev tools ( Ctrl + Shift + J on chrome) and check the Console tab for any errors Check all the systemd services that the rmm uses to function and check to make sure they're all active/running and enabled: sudo systemctl status rmm.service sudo systemctl status daphne.service sudo systemctl status celery.service sudo systemctl status celerybeat.service sudo systemctl status nginx.service sudo systemctl status nats.service sudo systemctl status nats-api.service sudo systemctl status meshcentral.service sudo systemctl status mongod.service sudo systemctl status postgresql.service sudo systemctl status redis-server.service or you can use systemctl --failed to see any failed services on your machine. Read through the log files in the following folders and check for errors: /rmm/api/tacticalrmm/tacticalrmm/private/log /var/log/celery Using Cloudflare DNS \u00b6 rmm.example.com can be proxied. api.example.com can NOT be proxied. mesh.example.com can be proxied with the caveat that Mesh checks the cert presented to the agent is the same one on the server. I.e. no MITM. You'll need to copy Cloudflare's edge cert to your server if you want to proxy this domain. If you're getting Invalid group id at the end of the install you're probably doing something wrong/wrong IP for api. Testing Network Connectivity between agent and server \u00b6 Use powershell, make sure you can connect to 443 and 4222 from agent to server: Test-NetConnection -ComputerName api . example . com -Port 4222 Test-NetConnection -ComputerName api . example . com -Port 443 Test-NetConnection -ComputerName rmm . example . com -Port 443 Check your SSL certs to make sure they are what they should be (no proxy stuff): https://www.digicert.com/help/ Are you trying to use a proxy to share your single public IP with multiple services on 443? This is complicated and unsupported by Tactical RMM , test your setup. Take Control or Remote Background missing button / can't connect \u00b6 This is a MeshCentral Connection problem Don't use Firefox (test in vanilla Chrome first) Open mesh.domain.com and see if you see the agent is there If you don't see your agent (or it's offline), restart TRMM server (or service ) Restart Mesh Agent on client PC. Check again. Still not appearing in mesh.domain.com in mesh goto \"My Server\" > Trace tab > Click tracing button > Check MeshAgent traffic. Restart Mesh Agent on client PC. You should see something in trace like If you don't, you have firewall/connectivity issues (open mesh.domain.com from agent and troubleshoot. You aren't using a proxy right?) Need to recover your mesh token? \u00b6 Login to server with SSH and run: node /meshcentral/node_modules/meshcentral --logintokenkey Mesh Agent Not Connecting to server \u00b6 When agents don't show up in your mesh console (after logging into https://mesh.EXAMPLE.COM), and all data is blank. Your AV has most likely blocked the agent. Error 500 \u00b6 These are always logged to /rmm/api/tacticalrmm/tacticalrmm/private/log/django_debug.log use this to check.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#server-troubleshooting-script","text":"If you've asked for help in #support please run this, and send a screenshot at the top of the thread created for troubleshooting your issue. Blur your domains if you desire privacy. wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/troubleshoot_server.sh chmod +x troubleshoot_server.sh ./troubleshoot_server.sh","title":"Server Troubleshooting Script"},{"location":"troubleshooting/#make-sure-dns-name-resolution-was-setup-properly","text":"","title":"Make sure DNS (name resolution) was setup properly"},{"location":"troubleshooting/#from-the-agent","text":"Open command prompt ping rmm.example.com ping api.example.com ping mesh.example.com The IP address for all 3 should reflect your Tactical RMM server","title":"From the agent"},{"location":"troubleshooting/#problems-after-new-server-install","text":"In the very unlikely event you have issues after install please wipe the box and install again (following all the steps including downloading the install script but not running it yet ) use the following command which will log the install progress and if you continue to have issues will assist with support of the installation. bash -x install.sh 2 > & 1 | tee install.log Note Logging of installs isn\u2019t desirable as it logs extremely sensitive information which is why this isn\u2019t done by default! Do not post the raw log publicly only provide it if requested and then by dm only. Authorized users in Discord are: @BurningTimes#1938 @sadnub#6992 @dinger1986#1734 @silversword#9652","title":"Problems after new server install"},{"location":"troubleshooting/#bad-credentials-error-when-trying-to-login-to-the-web-ui","text":"If you are sure you are using the correct credentials and still getting a \"bad credentials\" error, open your browser's dev tools ( Ctrl + Shift + J on chrome) and check the Console tab to see the real error. It will most probably be a CORS error which means you need to check your DNS settings and make sure whatever computer you're trying to access the UI from resolves your 3 subdomains to the correct IP of the server running the RMM (public IP if running in the cloud, or private IP if running behind NAT). If you see an error about SSL or certificate expired, then your Let's Encrypt cert has probably expired and you'll need to renew it. Refer to the Let's Encrypt cert renewal instructions here","title":"\"Bad credentials\" error when trying to login to the Web UI"},{"location":"troubleshooting/#agents-not-installing-or-updating","text":"The most common problem we've seen of agents not installing or updating is due to Antivirus blocking the updater executable. Windows Defender will 100% of the time block the updater from running unless an exclusion is set. Refer to the Agent Installation instructions for AV exceptions to set and manually doing an agent update with logging to troubleshoot further. Agents will also not automatically update if they are too old. Since Tactical RMM is still in alpha and the developers makes breaking changes pretty frequently, there is no promise of backwards compatibility. If you have agents that are relatively old, you will need to uninstall them manually and reinstall using the latest version. The mesh installer is created at time of install. Make sure it's working, run on TRMM server Check TRMM connection to MeshCentral Standard Install docker /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py check_mesh sudo docker-compose exec tactical-backend python manage.py check_mesh Collect Update debug logs for troubleshooting agents that don't update","title":"Agents not installing or updating"},{"location":"troubleshooting/#agents-not-checking-in-or-showing-up-general-agent-issues","text":"These are nats problems. Try quickfix first:","title":"Agents not checking in or showing up / General agent issues"},{"location":"troubleshooting/#from-admin-web-interface","text":"First, reload NATS from tactical's web UI: Tools > Server Maintenance > Reload Nats Configuration If that doesn't work, check each part starting with the server:","title":"from Admin Web Interface"},{"location":"troubleshooting/#server-ssh-login","text":"Reload NATS: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reload_nats sudo systemctl restart nats.service Look at nats service errors (make sure it's running) sudo systemctl status nats.service If nats isn't running see detailed reason why it isn't: sudo systemctl stop nats.service nats-server -DVV -c /rmm/api/tacticalrmm/nats-rmm.conf Fix the problem, then restart nats. sudo systemctl restart nats.service","title":"Server SSH login"},{"location":"troubleshooting/#from-agent-install","text":"Open CMD as admin on the problem computer and stop the agent services: net stop tacticalrmm Run the tacticalrmm service manually with debug logging: \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" -m svc -log debug -logto stdout This will print out a ton of info. You should be able to see the error from the debug log output. Please then copy/paste the logs and post them either in our Discord support chat , or create a github issue . If all else fails, simply uninstall the agent either from control panel or silently with \"C:\\Program Files\\TacticalAgent\\unins000.exe\" /VERYSILENT and then reinstall the agent.","title":"From Agent Install"},{"location":"troubleshooting/#all-other-errors","text":"First, run the update script with the --force flag. This will fix permissions and reinstall python/node packages that might have gotten corrupted. ./update.sh --force Check the debug log from the web UI: File > Debug Log Open your browser's dev tools ( Ctrl + Shift + J on chrome) and check the Console tab for any errors Check all the systemd services that the rmm uses to function and check to make sure they're all active/running and enabled: sudo systemctl status rmm.service sudo systemctl status daphne.service sudo systemctl status celery.service sudo systemctl status celerybeat.service sudo systemctl status nginx.service sudo systemctl status nats.service sudo systemctl status nats-api.service sudo systemctl status meshcentral.service sudo systemctl status mongod.service sudo systemctl status postgresql.service sudo systemctl status redis-server.service or you can use systemctl --failed to see any failed services on your machine. Read through the log files in the following folders and check for errors: /rmm/api/tacticalrmm/tacticalrmm/private/log /var/log/celery","title":"All other errors"},{"location":"troubleshooting/#using-cloudflare-dns","text":"rmm.example.com can be proxied. api.example.com can NOT be proxied. mesh.example.com can be proxied with the caveat that Mesh checks the cert presented to the agent is the same one on the server. I.e. no MITM. You'll need to copy Cloudflare's edge cert to your server if you want to proxy this domain. If you're getting Invalid group id at the end of the install you're probably doing something wrong/wrong IP for api.","title":"Using Cloudflare DNS"},{"location":"troubleshooting/#testing-network-connectivity-between-agent-and-server","text":"Use powershell, make sure you can connect to 443 and 4222 from agent to server: Test-NetConnection -ComputerName api . example . com -Port 4222 Test-NetConnection -ComputerName api . example . com -Port 443 Test-NetConnection -ComputerName rmm . example . com -Port 443 Check your SSL certs to make sure they are what they should be (no proxy stuff): https://www.digicert.com/help/ Are you trying to use a proxy to share your single public IP with multiple services on 443? This is complicated and unsupported by Tactical RMM , test your setup.","title":"Testing Network Connectivity between agent and server"},{"location":"troubleshooting/#take-control-or-remote-background-missing-button-cant-connect","text":"This is a MeshCentral Connection problem Don't use Firefox (test in vanilla Chrome first) Open mesh.domain.com and see if you see the agent is there If you don't see your agent (or it's offline), restart TRMM server (or service ) Restart Mesh Agent on client PC. Check again. Still not appearing in mesh.domain.com in mesh goto \"My Server\" > Trace tab > Click tracing button > Check MeshAgent traffic. Restart Mesh Agent on client PC. You should see something in trace like If you don't, you have firewall/connectivity issues (open mesh.domain.com from agent and troubleshoot. You aren't using a proxy right?)","title":"Take Control or Remote Background missing button / can't connect"},{"location":"troubleshooting/#need-to-recover-your-mesh-token","text":"Login to server with SSH and run: node /meshcentral/node_modules/meshcentral --logintokenkey","title":"Need to recover your mesh token?"},{"location":"troubleshooting/#mesh-agent-not-connecting-to-server","text":"When agents don't show up in your mesh console (after logging into https://mesh.EXAMPLE.COM), and all data is blank. Your AV has most likely blocked the agent.","title":"Mesh Agent Not Connecting to server"},{"location":"troubleshooting/#error-500","text":"These are always logged to /rmm/api/tacticalrmm/tacticalrmm/private/log/django_debug.log use this to check.","title":"Error 500"},{"location":"unsupported_guidelines/","text":"Unsupported Guidelines \u00b6 General Information \u00b6 Tactical RMM is designed to be secure by default. You CAN expose it to the internet, and start deploying agents. You CAN not expose it to the internet, and start deploying agents. Period \u00b6 Info BIG PERIOD . <--- See, it's really really big \ud83d\ude42 That said \u00b6 There are those that wish to add layers to their security onion. For the benefit of others following in their footsteps, we have added here for your convenience additional information on a range of subjects and technologies that have been graciously donated to us by the community at large. Please be aware that those providing help and assistance in the Discord #support channel will generally assume that you are not one of these wizards of networking magic. Should you employ any one or several of these unsupported technologies: Proxies Firewalls GeoIP filters fail2ban filters alternate methods of SSL cert management IDSs IPSs SDNs Did anything other than follow the installation instructions exactly and any/all other magical ABC thru XYZ technologies Please let us know BEFORE we start troubleshooting and looking for software bugs that you are...in fact...a \ud83e\uddd9...and using something non-standard \ud83d\ude09 These are \"unsupported\" because then we are troubleshooting your environment, not Tactical RMM. You need to have knowledge about how things work if you're going to stray from the easy path of the standard install. Help us maximize keeping developer time and resources focused on new releases...not support goosechases. Thank you and #KeepDeploying","title":"Unsupported Guidelines"},{"location":"unsupported_guidelines/#unsupported-guidelines","text":"","title":"Unsupported Guidelines"},{"location":"unsupported_guidelines/#general-information","text":"Tactical RMM is designed to be secure by default. You CAN expose it to the internet, and start deploying agents. You CAN not expose it to the internet, and start deploying agents.","title":"General Information"},{"location":"unsupported_guidelines/#period","text":"Info BIG PERIOD . <--- See, it's really really big \ud83d\ude42","title":"Period"},{"location":"unsupported_guidelines/#that-said","text":"There are those that wish to add layers to their security onion. For the benefit of others following in their footsteps, we have added here for your convenience additional information on a range of subjects and technologies that have been graciously donated to us by the community at large. Please be aware that those providing help and assistance in the Discord #support channel will generally assume that you are not one of these wizards of networking magic. Should you employ any one or several of these unsupported technologies: Proxies Firewalls GeoIP filters fail2ban filters alternate methods of SSL cert management IDSs IPSs SDNs Did anything other than follow the installation instructions exactly and any/all other magical ABC thru XYZ technologies Please let us know BEFORE we start troubleshooting and looking for software bugs that you are...in fact...a \ud83e\uddd9...and using something non-standard \ud83d\ude09 These are \"unsupported\" because then we are troubleshooting your environment, not Tactical RMM. You need to have knowledge about how things work if you're going to stray from the easy path of the standard install. Help us maximize keeping developer time and resources focused on new releases...not support goosechases. Thank you and #KeepDeploying","title":"That said"},{"location":"unsupported_platforms/","text":"Unsupported Install Platforms \u00b6 LXC installs \u00b6 Read source Tactical RMM install on LXC: redis not starting Symptoms \u00b6 Agent exe install shows 'Server error (503)' pop-up during the installation process Running the troubleshoot_server.sh reports redis-server Service isnt running (Tactical wont work without this) service redis start reports a problem \"Job for redis-server.service failed because the control process exited with error code. See \"systemctl status redis-server.service\" and \"journalctl -xe\" for details.\" Checking the systemctrl: ` systemctl status redis-server.service ` Produces the following: \"Job for redis-server.service failed because the control process exited with error code. See \"systemctl status redis-server.service\" and \"journalctl -xe\" for details. root@rmm:/home/tactical# systemctl status redis-server.service \u25cf redis-server.service - Advanced key-value store Loaded: loaded (/lib/systemd/system/redis-server.service; enabled; vendor preset: enabled) Active: failed (Result: exit-code) since Fri 2022-04-01 21:35:05 UTC; 1min 26s ago Docs: http://redis.io/documentation, man:redis-server(1) Process: 14975 ExecStart=/usr/bin/redis-server /etc/redis/redis.conf --supervised systemd --daemonize no (code=exited, status=2> Main PID: 14975 (code=exited, status=226/NAMESPACE) Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Main process exited, code=exited, status=226/NAMESPACE Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Failed with result 'exit-code'. Apr 01 21:35:05 rmm systemd[1]: Failed to start Advanced key-value store. Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Scheduled restart job, restart counter is at 5. Apr 01 21:35:05 rmm systemd[1]: Stopped Advanced key-value store. Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Start request repeated too quickly. Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Failed with result 'exit-code'. Apr 01 21:35:05 rmm systemd[1]: Failed to start Advanced key-value store. lines 1-16/16 (END)\" The Fix \u00b6 (https://stackoverflow.com/questions/49670211/failed-to-start-advanced-key-value-store-redis-server-service-control-process-e) Remove the server that comes with Tactical RMM: apt-get --purge redis-server and delete the /var/log/redis directory then apt-get install redis-server Then installation would look like this: \"Reading package lists... Done Building dependency tree... Done Reading state information... Done The following NEW packages will be installed: redis-server 0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded. Need to get 0 B/98.2 kB of archives. After this operation, 196 kB of additional disk space will be used. Selecting previously unselected package redis-server. (Reading database ... 36187 files and directories currently installed.) Preparing to unpack .../redis-server_5%3a6.0.16-1+deb11u2_amd64.deb ... Unpacking redis-server (5:6.0.16-1+deb11u2) ... Setting up redis-server (5:6.0.16-1+deb11u2) ... Created symlink /etc/systemd/system/redis.service \u2192 /lib/systemd/system/redis-server.service. Created symlink /etc/systemd/system/multi-user.target.wants/redis-server.service \u2192 /lib/systemd/system/redis-server.service. Job for redis-server.service failed because the control process exited with error code. See \"systemctl status redis-server.service\" and \"journalctl -xe\" for details. Processing triggers for man-db (2.9.4-2) ...\" Running the redis-server would shed more light on the issue /usr/bin/redis-server /etc/redis/redis.conf *** FATAL CONFIG FILE ERROR (Redis 6.0.16) *** Reading the configuration file, at line 260 >>> 'logfile /var/log/redis/redis-server.log' Can't open the log file: No such file or directory' Apparently, /ver/log/redis has to be created manually 'mkdir /var/log/redis chown -R redis:redis /var/log/redis chmod -R u+rwX,g+rwX,u+rx /var/log/redis' then run redis-server su -s /bin/bash -c '/usr/bin/redis-server /etc/redis/redis.conf' redis then confirm with ps ax | grep redis All done! Thanks [FWG]SSOO","title":"Installing on other platforms"},{"location":"unsupported_platforms/#unsupported-install-platforms","text":"","title":"Unsupported Install Platforms"},{"location":"unsupported_platforms/#lxc-installs","text":"Read source Tactical RMM install on LXC: redis not starting","title":"LXC installs"},{"location":"unsupported_platforms/#symptoms","text":"Agent exe install shows 'Server error (503)' pop-up during the installation process Running the troubleshoot_server.sh reports redis-server Service isnt running (Tactical wont work without this) service redis start reports a problem \"Job for redis-server.service failed because the control process exited with error code. See \"systemctl status redis-server.service\" and \"journalctl -xe\" for details.\" Checking the systemctrl: ` systemctl status redis-server.service ` Produces the following: \"Job for redis-server.service failed because the control process exited with error code. See \"systemctl status redis-server.service\" and \"journalctl -xe\" for details. root@rmm:/home/tactical# systemctl status redis-server.service \u25cf redis-server.service - Advanced key-value store Loaded: loaded (/lib/systemd/system/redis-server.service; enabled; vendor preset: enabled) Active: failed (Result: exit-code) since Fri 2022-04-01 21:35:05 UTC; 1min 26s ago Docs: http://redis.io/documentation, man:redis-server(1) Process: 14975 ExecStart=/usr/bin/redis-server /etc/redis/redis.conf --supervised systemd --daemonize no (code=exited, status=2> Main PID: 14975 (code=exited, status=226/NAMESPACE) Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Main process exited, code=exited, status=226/NAMESPACE Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Failed with result 'exit-code'. Apr 01 21:35:05 rmm systemd[1]: Failed to start Advanced key-value store. Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Scheduled restart job, restart counter is at 5. Apr 01 21:35:05 rmm systemd[1]: Stopped Advanced key-value store. Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Start request repeated too quickly. Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Failed with result 'exit-code'. Apr 01 21:35:05 rmm systemd[1]: Failed to start Advanced key-value store. lines 1-16/16 (END)\"","title":"Symptoms"},{"location":"unsupported_platforms/#the-fix","text":"(https://stackoverflow.com/questions/49670211/failed-to-start-advanced-key-value-store-redis-server-service-control-process-e) Remove the server that comes with Tactical RMM: apt-get --purge redis-server and delete the /var/log/redis directory then apt-get install redis-server Then installation would look like this: \"Reading package lists... Done Building dependency tree... Done Reading state information... Done The following NEW packages will be installed: redis-server 0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded. Need to get 0 B/98.2 kB of archives. After this operation, 196 kB of additional disk space will be used. Selecting previously unselected package redis-server. (Reading database ... 36187 files and directories currently installed.) Preparing to unpack .../redis-server_5%3a6.0.16-1+deb11u2_amd64.deb ... Unpacking redis-server (5:6.0.16-1+deb11u2) ... Setting up redis-server (5:6.0.16-1+deb11u2) ... Created symlink /etc/systemd/system/redis.service \u2192 /lib/systemd/system/redis-server.service. Created symlink /etc/systemd/system/multi-user.target.wants/redis-server.service \u2192 /lib/systemd/system/redis-server.service. Job for redis-server.service failed because the control process exited with error code. See \"systemctl status redis-server.service\" and \"journalctl -xe\" for details. Processing triggers for man-db (2.9.4-2) ...\" Running the redis-server would shed more light on the issue /usr/bin/redis-server /etc/redis/redis.conf *** FATAL CONFIG FILE ERROR (Redis 6.0.16) *** Reading the configuration file, at line 260 >>> 'logfile /var/log/redis/redis-server.log' Can't open the log file: No such file or directory' Apparently, /ver/log/redis has to be created manually 'mkdir /var/log/redis chown -R redis:redis /var/log/redis chmod -R u+rwX,g+rwX,u+rx /var/log/redis' then run redis-server su -s /bin/bash -c '/usr/bin/redis-server /etc/redis/redis.conf' redis then confirm with ps ax | grep redis All done! Thanks [FWG]SSOO","title":"The Fix"},{"location":"unsupported_proxies/","text":"Unsupported Proxies \u00b6 Note Using Proxies/reverse proxies with Tactical RMM is not a supported configuration, the information below is provided here for your reference. Although these aren't officially supported configurations, we generally will help point you in the right direction. Please use the Discord #unsupported channel to discuss issues related to these complex installations General Notes on Proxies and Tactical RMM \u00b6 Port 443 \u00b6 Make sure websockets option is enabled. All 3 URL's will need to be configured: rmm , api , mesh For mesh see the Section 10. TLS Offloading of the MeshCentral 2 User Guide Port 4222 \u00b6 Is NATS ( https://nats.io ). You'll need a TCP forwarder as NATS only talks TCP not HTTP. Traefikv2 \u00b6 Offsite Resource: https://gitlab.com/NiceGuyIT/tactical-goodies/-/tree/main/traefik This section will assume that by default Traefik will reverse proxy everything on port 443. Here is a basic Traefik config with docker-composer note the file.directory and file.watch are important. version: \"3.7\" services: traefik: container_name: traefik24 image: traefik:v2.4 restart: unless-stopped command: - --entryPoints.http.address = :80 - --entryPoints.https.address = :443 - --providers.docker = true - --providers.docker.endpoint = unix:///var/run/docker.sock - --providers.docker.defaultrule = HostHeader ( ` {{ index .Labels \"com.docker.compose.service\" }} . $DOMAINNAME ` ) ## This is important, to load the config for RMM and Mesh - --providers.file.directory = rules # Load dynamic configuration from one or more .toml or .yml files in a directory. - --providers.file.watch = true # Only works on top level files in the rules folder #### - --certificatesresolvers.dns-cloudflare.acme.dnschallenge = true - --certificatesResolvers.dns-cloudflare.acme.email = $CLOUDFLARE_EMAIL - --certificatesResolvers.dns-cloudflare.acme.storage = /acme.json - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider = cloudflare - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers = 1 .1.1.1:53,1.0.0.1:53 ports: - target: 80 published: 80 protocol: tcp mode: host - target: 443 published: 443 protocol: tcp mode: host volumes: ##The rules that we will load## - $USERDIR /docker/traefik2/rules:/rules ## - /var/run/docker.sock:/var/run/docker.sock:ro - $USERDIR /docker/traefik2/acme/acme.json:/acme.json - $USERDIR /docker/traefik2/traefik.log:/traefik.log environment: - CF_API_EMAIL = $CLOUDFLARE_EMAIL - CF_API_KEY = $CLOUDFLARE_API_KEY labels: - \"traefik.enable=true\" # HTTP-to-HTTPS Redirect - \"traefik.http.routers.http-catchall.entrypoints=http\" - \"traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)\" - \"traefik.http.routers.http-catchall.middlewares=redirect-to-https\" - \"traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\" # HTTP Routers - \"traefik.http.routers.traefik-rtr.entrypoints=https\" - \"traefik.http.routers.traefik-rtr.rule=HostHeader(`traefik. $DOMAINNAME `)\" - \"traefik.http.routers.traefik-rtr.tls=true\" - \"traefik.http.routers.traefik-rtr.tls.domains[0].main= $DOMAINNAME \" - \"traefik.http.routers.traefik-rtr.tls.domains[0].sans=*. $DOMAINNAME \" Before proceeding, we need to change the port 443 to 4430 and 80 to 800 because the port 443 and 80 are already used by Traefik. Here is a snippet of the only thing you should modify into docker-compose file of the installation. # container for tactical reverse proxy tactical-nginx: container_name: trmm-nginx image: ${ IMAGE_REPO } tactical-nginx: ${ VERSION } restart: always environment: APP_HOST: ${ APP_HOST } API_HOST: ${ API_HOST } MESH_HOST: ${ MESH_HOST } CERT_PUB_KEY: ${ CERT_PUB_KEY } CERT_PRIV_KEY: ${ CERT_PRIV_KEY } networks: proxy: ipv4_address: 172 .20.0.20 ports: - \"800:80\" ## port 800 instead of 80 - \"4430:443\" ## port 4430 instead of 443 Once save, make sure you run the docker-compose or installation script at least once, so all the directory structure are created. Once you have your certificate (acme.json) generated by traefikv2 we will be able to extract it for rmm. Copy the acme.json create by traefik into the root of your rmm directory (In my case its $USERDIR/docker/rmm) which you should have already define. After that we can run this docker to extract the certificates for us. version: \"3.7\" services: ##Copy the acme.json of Traefik2 at volumes: (userdir/docker/rmm in this case) traefik-certs-dumper: image: ldez/traefik-certs-dumper:v2.7.4 entrypoint: sh -c ' apk add jq ; while ! [ -e /data/acme.json ] || ! [ `jq \".[] | .Certificates | length\" /data/acme.json` != 0 ]; do sleep 1 ; done && traefik-certs-dumper file --version v2 --watch --source /data/acme.json --dest data/certs' volumes: - $USERDIR /docker/rmm:/data Once completed, you should have 1 new folder into you rmm directory $USERDIR/docker/rmm/ certs in this example. As the installation instruction, we will pass those to the .env echo \"CERT_PUB_KEY= $( sudo base64 -w 0 $USERDIR /docker/rmm/certs/certs/**yourdomaine.com.crt** ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 $USERDIR /docker/rmm/certs/private/**yourdomaine.com.key** ) \" >> .env Next we can create 3 rules to tell traefik to correctly route the https and agent For that we will create 2 rules into traefik directory as per it configuration. folder/traefik/rules create nano app-mesh.toml and inside it we add [ http.routers ] [ http.routers.mesh-rtr ] entryPoints = [ \"https\" ] rule = \"Host(`mesh.**yourdomain.com**`)\" service = \"mesh-svc\" ##middleware with 2fa [ http.services ] [ http.services.mesh-svc ] [ http.services.mesh-svc.loadBalancer ] passHostHeader = true [[ http.services.mesh-svc.loadBalancer.servers ]] url = \"https://**xxx.xxx.xxx.xxx**:4430\" # or whatever your external host's IP is create nano app-meshagent.toml and inside it we add [ http.routers ] [ http.routers.mesh-rtr1 ] entryPoints = [ \"https\" ] rule = \"\"\"Host(`mesh.**yourdomain.com**`) && PathPrefix( `/agent.ashx`, `/meshrelay.ashx`, ) && Headers(`X-Forwarded-Proto`, `wss`) \"\"\" ##Don't add middle where, the agent wont work. [ http.services ] [ http.services.mesh-svc1 ] [ http.services.mesh-svc.loadBalancer ] passHostHeader = true [[ http.services.mesh-svc1.loadBalancer.servers ]] url = \"https://**xxx.xxx.xxx.xxx**:4430\" # or whatever your external host's IP is create nano app-rmm.toml and inside it we add [ http.routers ] [ http.routers.rmm-rtr ] entryPoints = [ \"https\" ] rule = \"Host(`rmm.**yourdomain.com**`)\" service = \"rmm-svc\" ##middleware with 2fa [ http.services ] [ http.services.rmm-svc ] [ http.services.rmm-svc.loadBalancer ] passHostHeader = true [[ http.services.rmm-svc.loadBalancer.servers ]] url = \"https://xxx.xxx.xxx.xxx:4430\" # or whatever your external host's IP:port is That it, you can now restart Tactical rmm and mesh.yourdomain.com should work, same for the agent. Please note that if you have a middleware with 2FA you can still use it with the inside mesh.toml but do not add it with the agent. HAProxy \u00b6 Check/Change the mesh central config.json, some of the values may be set already, CertUrl must be changed to point to the HAProxy server. Meshcentral Adjustment \u00b6 Credit to @bradhawkins Edit Meshcentral config nano /meshcentral/meshcentral-data/config.json Insert this (modify HAProxyIP to your network) { \"settings\": { \"Port\": 4430, \"AliasPort\": 443, \"RedirPort\": 800, \"TlsOffload\": \"127.0.0.1\", }, \"domains\": { \"\": { \"CertUrl\": \"https://HAProxyIP:443/\", } } } Restart meshcentral service meshcentral restart HAProxy Config \u00b6 The order of use_backend is important Tactical-Mesh-WebSocket_ipvANY must be before Tactical-Mesh_ipvANY The values of timeout connect , timeout server , timeout tunnel in Tactical-Mesh-WebSocket have been configured to maintain a stable agent connection, however you may need to adjust these values to suit your environment. frontend HTTPS-merged bind 0.0.0.0:443 name 0.0.0.0:443 ssl crt-list /var/etc/haproxy/HTTPS.crt_list #ADJUST THIS TO YOUR OWN SSL CERTIFICATES mode http log global option socket-stats option dontlognull option http-server-close option forwardfor acl https ssl_fc http-request set-header X-Forwarded-Proto http if !https http-request set-header X-Forwarded-Proto https if https timeout client 30000 acl RMM var(txn.txnhost) -m sub -i rmm.example.com acl aclcrt_RMM var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ acl API var(txn.txnhost) -m sub -i api.example.com acl aclcrt_API var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ acl is_websocket hdr(Upgrade) -i WebSocket acl is_mesh var(txn.txnhost) -m beg -i mesh.example.com acl aclcrt_MESH-WebSocket var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ acl MESH var(txn.txnhost) -m sub -i mesh.example.com acl aclcrt_MESH var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ #PUT OTHER USE_BACKEND IN HERE use_backend Tactical_ipvANY if RMM aclcrt_RMM use_backend Tactical_ipvANY if API aclcrt_API use_backend Tactical-Mesh-WebSocket_ipvANY if is_websocket is_mesh aclcrt_MESH-WebSocket use_backend Tactical-Mesh_ipvANY if MESH aclcrt_MESH frontend http-to-https bind 0.0.0.0:80 mode http log global option http-keep-alive timeout client 30000 http-request redirect scheme https backend Tactical_ipvANY mode http id 100 log global timeout connect 30000 timeout server 30000 retries 3 option httpchk GET / server tactical 192.168.10.123:443 id 101 ssl check inter 1000 verify none backend Tactical-Mesh-WebSocket_ipvANY mode http id 113 log global timeout connect 3000 timeout server 3000 retries 3 timeout tunnel 3600000 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server tactical 192.168.10.123:443 id 101 ssl verify none backend Tactical-Mesh_ipvANY mode http id 112 log global timeout connect 15000 timeout server 15000 retries 3 option httpchk GET / timeout tunnel 15000 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server tactical 192.168.10.123:443 id 101 ssl check inter 1000 verify none Apache Proxy \u00b6 howto - proxy on apache TRMM SERVER \u00b6 edit file /etc/nginx/sites-available/rmm.conf add the lines from 'real_ip' module inside server tag: set_real_ip_from 192.168.0.200; #IP Address of your apache proxy real_ip_header X-Forwarded-For; restart nginx systemctl restart nginx.service APACHE \u00b6 enable ssl proxy, rewriteEngine. set proxy to preserve host. set upgrade rule to websocket. set proxypass rules redirecting to rmm location on your apache ssl config example: <VirtualHost *:443> ServerName rmm.blablabla.com.br:443 ServerAlias mesh.blablabla.com.br:443 api.blablabla.com.br:443 SSLEngine on SSLCertificateFile \"C:/Apache24/conf/ssl-rmm.blablabla.com.br/_.blablabla.com.br-chain.pem\" SSLCertificateKeyFile \"C:/Apache24/conf/ssl-rmm.blablabla.com.br/_.blablabla.com.br-key.pem\" SSLProxyEngine on RewriteEngine On ProxyPreserveHost On # When Upgrade:websocket header is present, redirect to ws # Using NC flag (case-insensitive) as some browsers will pass Websocket RewriteCond %{HTTP:Upgrade} =websocket [NC] RewriteRule ^/(.*) wss://192.168.0.212/$1 [P,L] ProxyPass \"/\" \"https://192.168.0..212/\" retry=3 ProxyPassReverse \"/\" \"https://192.168.0.212/\" retry=3 BrowserMatch \"MSIE [2-5]\" \\ nokeepalive ssl-unclean-shutdown \\ downgrade-1.0 force-response-1.0 Updating certificate: \u00b6 In my case, auto DNS Challenge from apache, so every time we get new cert files, it must be copied inside rmm too. just overwrite default location: /etc/letsencrypt/archive/blablablabla or change certs location on nginx conf to whatever you want. nginx Proxy \u00b6 Having mesh connection issues? See https://info.meshcentral.com/downloads/MeshCentral2/MeshCentral2UserGuide.pdf page 30. Nginx Proxy Manager \u00b6 In NPM, declare the hosts with the parameters: api.{domain} https | TRMM server IP | 433 ON: Cache Assets | Block Common Exploits | Websockets Support mesh.{domain} https | TRMM server IP | 443 ON: Cache Assets | Block Common Exploits | Websockets Support rmm.{domain} https | TRMM server IP | 443 ON: Cache Assets | Block Common Exploits | Websockets Support proxy.{domain} http | NPM server IP | 81 (NPM web UI port) Then connect in SSH to your TRMM server to modify the nginx config of Mesh: nano meshcentral/meshcentral-data/config.json Then modify in this file the TlsOffload field to put the local IP address of your NPM and the port that goes with it, then also modify the \"CertUrl\" field to put the public domain name of your NPM. { \"settings\": { \"Cert\": \"${meshdomain}\", \"MongoDb\": \"mongodb://127.0.0.1:27017\", \"MongoDbName\": \"meshcentral\", \"WANonly\": true, \"Minify\": 1, \"Port\": 4430, \"AliasPort\": 443, \"RedirPort\": 800, \"AllowLoginToken\": true, \"AllowFraming\": true, \"_AgentPing\": 60, \"AgentPong\": 300, \"AllowHighQualityDesktop\": true, \"TlsOffload\": \"{NPM LAN IP}:81\", \"agentCoreDump\": false, \"Compression\": true, \"WsCompression\": true, \"AgentWsCompression\": true, \"MaxInvalidLogin\": { \"time\": 5, \"count\": 5, \"coolofftime\": 30 } }, \"domains\": { \"\": { \"Title\": \"Tactical RMM\", \"Title2\": \"Tactical RMM\", \"NewAccounts\": false, \"CertUrl\": \"https://proxy.{domain}:443/\", \"GeoLocation\": true, \"CookieIpCheck\": false, \"mstsc\": true } } } Then restart your mesh systemctl restart meshcentral.service At which point agents should be working. Use the \"Recover Connection\" button if necessary Synology NAS reverse proxy portal \u00b6 Follow HAProxy And set the \"CertUrl\" to point to the IP address of my NAS that was running the reserve proxy and had the certificates installed. In Synology NAS reverse proxy portal and added websockets to the rmm domains, especially the mesh domain under custom headers, by just clicking the create button and choosing WebSocket:","title":"Unsupported Proxies"},{"location":"unsupported_proxies/#unsupported-proxies","text":"Note Using Proxies/reverse proxies with Tactical RMM is not a supported configuration, the information below is provided here for your reference. Although these aren't officially supported configurations, we generally will help point you in the right direction. Please use the Discord #unsupported channel to discuss issues related to these complex installations","title":"Unsupported Proxies"},{"location":"unsupported_proxies/#general-notes-on-proxies-and-tactical-rmm","text":"","title":"General Notes on Proxies and Tactical RMM"},{"location":"unsupported_proxies/#port-443","text":"Make sure websockets option is enabled. All 3 URL's will need to be configured: rmm , api , mesh For mesh see the Section 10. TLS Offloading of the MeshCentral 2 User Guide","title":"Port 443"},{"location":"unsupported_proxies/#port-4222","text":"Is NATS ( https://nats.io ). You'll need a TCP forwarder as NATS only talks TCP not HTTP.","title":"Port 4222"},{"location":"unsupported_proxies/#traefikv2","text":"Offsite Resource: https://gitlab.com/NiceGuyIT/tactical-goodies/-/tree/main/traefik This section will assume that by default Traefik will reverse proxy everything on port 443. Here is a basic Traefik config with docker-composer note the file.directory and file.watch are important. version: \"3.7\" services: traefik: container_name: traefik24 image: traefik:v2.4 restart: unless-stopped command: - --entryPoints.http.address = :80 - --entryPoints.https.address = :443 - --providers.docker = true - --providers.docker.endpoint = unix:///var/run/docker.sock - --providers.docker.defaultrule = HostHeader ( ` {{ index .Labels \"com.docker.compose.service\" }} . $DOMAINNAME ` ) ## This is important, to load the config for RMM and Mesh - --providers.file.directory = rules # Load dynamic configuration from one or more .toml or .yml files in a directory. - --providers.file.watch = true # Only works on top level files in the rules folder #### - --certificatesresolvers.dns-cloudflare.acme.dnschallenge = true - --certificatesResolvers.dns-cloudflare.acme.email = $CLOUDFLARE_EMAIL - --certificatesResolvers.dns-cloudflare.acme.storage = /acme.json - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider = cloudflare - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers = 1 .1.1.1:53,1.0.0.1:53 ports: - target: 80 published: 80 protocol: tcp mode: host - target: 443 published: 443 protocol: tcp mode: host volumes: ##The rules that we will load## - $USERDIR /docker/traefik2/rules:/rules ## - /var/run/docker.sock:/var/run/docker.sock:ro - $USERDIR /docker/traefik2/acme/acme.json:/acme.json - $USERDIR /docker/traefik2/traefik.log:/traefik.log environment: - CF_API_EMAIL = $CLOUDFLARE_EMAIL - CF_API_KEY = $CLOUDFLARE_API_KEY labels: - \"traefik.enable=true\" # HTTP-to-HTTPS Redirect - \"traefik.http.routers.http-catchall.entrypoints=http\" - \"traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)\" - \"traefik.http.routers.http-catchall.middlewares=redirect-to-https\" - \"traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\" # HTTP Routers - \"traefik.http.routers.traefik-rtr.entrypoints=https\" - \"traefik.http.routers.traefik-rtr.rule=HostHeader(`traefik. $DOMAINNAME `)\" - \"traefik.http.routers.traefik-rtr.tls=true\" - \"traefik.http.routers.traefik-rtr.tls.domains[0].main= $DOMAINNAME \" - \"traefik.http.routers.traefik-rtr.tls.domains[0].sans=*. $DOMAINNAME \" Before proceeding, we need to change the port 443 to 4430 and 80 to 800 because the port 443 and 80 are already used by Traefik. Here is a snippet of the only thing you should modify into docker-compose file of the installation. # container for tactical reverse proxy tactical-nginx: container_name: trmm-nginx image: ${ IMAGE_REPO } tactical-nginx: ${ VERSION } restart: always environment: APP_HOST: ${ APP_HOST } API_HOST: ${ API_HOST } MESH_HOST: ${ MESH_HOST } CERT_PUB_KEY: ${ CERT_PUB_KEY } CERT_PRIV_KEY: ${ CERT_PRIV_KEY } networks: proxy: ipv4_address: 172 .20.0.20 ports: - \"800:80\" ## port 800 instead of 80 - \"4430:443\" ## port 4430 instead of 443 Once save, make sure you run the docker-compose or installation script at least once, so all the directory structure are created. Once you have your certificate (acme.json) generated by traefikv2 we will be able to extract it for rmm. Copy the acme.json create by traefik into the root of your rmm directory (In my case its $USERDIR/docker/rmm) which you should have already define. After that we can run this docker to extract the certificates for us. version: \"3.7\" services: ##Copy the acme.json of Traefik2 at volumes: (userdir/docker/rmm in this case) traefik-certs-dumper: image: ldez/traefik-certs-dumper:v2.7.4 entrypoint: sh -c ' apk add jq ; while ! [ -e /data/acme.json ] || ! [ `jq \".[] | .Certificates | length\" /data/acme.json` != 0 ]; do sleep 1 ; done && traefik-certs-dumper file --version v2 --watch --source /data/acme.json --dest data/certs' volumes: - $USERDIR /docker/rmm:/data Once completed, you should have 1 new folder into you rmm directory $USERDIR/docker/rmm/ certs in this example. As the installation instruction, we will pass those to the .env echo \"CERT_PUB_KEY= $( sudo base64 -w 0 $USERDIR /docker/rmm/certs/certs/**yourdomaine.com.crt** ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 $USERDIR /docker/rmm/certs/private/**yourdomaine.com.key** ) \" >> .env Next we can create 3 rules to tell traefik to correctly route the https and agent For that we will create 2 rules into traefik directory as per it configuration. folder/traefik/rules create nano app-mesh.toml and inside it we add [ http.routers ] [ http.routers.mesh-rtr ] entryPoints = [ \"https\" ] rule = \"Host(`mesh.**yourdomain.com**`)\" service = \"mesh-svc\" ##middleware with 2fa [ http.services ] [ http.services.mesh-svc ] [ http.services.mesh-svc.loadBalancer ] passHostHeader = true [[ http.services.mesh-svc.loadBalancer.servers ]] url = \"https://**xxx.xxx.xxx.xxx**:4430\" # or whatever your external host's IP is create nano app-meshagent.toml and inside it we add [ http.routers ] [ http.routers.mesh-rtr1 ] entryPoints = [ \"https\" ] rule = \"\"\"Host(`mesh.**yourdomain.com**`) && PathPrefix( `/agent.ashx`, `/meshrelay.ashx`, ) && Headers(`X-Forwarded-Proto`, `wss`) \"\"\" ##Don't add middle where, the agent wont work. [ http.services ] [ http.services.mesh-svc1 ] [ http.services.mesh-svc.loadBalancer ] passHostHeader = true [[ http.services.mesh-svc1.loadBalancer.servers ]] url = \"https://**xxx.xxx.xxx.xxx**:4430\" # or whatever your external host's IP is create nano app-rmm.toml and inside it we add [ http.routers ] [ http.routers.rmm-rtr ] entryPoints = [ \"https\" ] rule = \"Host(`rmm.**yourdomain.com**`)\" service = \"rmm-svc\" ##middleware with 2fa [ http.services ] [ http.services.rmm-svc ] [ http.services.rmm-svc.loadBalancer ] passHostHeader = true [[ http.services.rmm-svc.loadBalancer.servers ]] url = \"https://xxx.xxx.xxx.xxx:4430\" # or whatever your external host's IP:port is That it, you can now restart Tactical rmm and mesh.yourdomain.com should work, same for the agent. Please note that if you have a middleware with 2FA you can still use it with the inside mesh.toml but do not add it with the agent.","title":"Traefikv2"},{"location":"unsupported_proxies/#haproxy","text":"Check/Change the mesh central config.json, some of the values may be set already, CertUrl must be changed to point to the HAProxy server.","title":"HAProxy"},{"location":"unsupported_proxies/#meshcentral-adjustment","text":"Credit to @bradhawkins Edit Meshcentral config nano /meshcentral/meshcentral-data/config.json Insert this (modify HAProxyIP to your network) { \"settings\": { \"Port\": 4430, \"AliasPort\": 443, \"RedirPort\": 800, \"TlsOffload\": \"127.0.0.1\", }, \"domains\": { \"\": { \"CertUrl\": \"https://HAProxyIP:443/\", } } } Restart meshcentral service meshcentral restart","title":"Meshcentral Adjustment"},{"location":"unsupported_proxies/#haproxy-config","text":"The order of use_backend is important Tactical-Mesh-WebSocket_ipvANY must be before Tactical-Mesh_ipvANY The values of timeout connect , timeout server , timeout tunnel in Tactical-Mesh-WebSocket have been configured to maintain a stable agent connection, however you may need to adjust these values to suit your environment. frontend HTTPS-merged bind 0.0.0.0:443 name 0.0.0.0:443 ssl crt-list /var/etc/haproxy/HTTPS.crt_list #ADJUST THIS TO YOUR OWN SSL CERTIFICATES mode http log global option socket-stats option dontlognull option http-server-close option forwardfor acl https ssl_fc http-request set-header X-Forwarded-Proto http if !https http-request set-header X-Forwarded-Proto https if https timeout client 30000 acl RMM var(txn.txnhost) -m sub -i rmm.example.com acl aclcrt_RMM var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ acl API var(txn.txnhost) -m sub -i api.example.com acl aclcrt_API var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ acl is_websocket hdr(Upgrade) -i WebSocket acl is_mesh var(txn.txnhost) -m beg -i mesh.example.com acl aclcrt_MESH-WebSocket var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ acl MESH var(txn.txnhost) -m sub -i mesh.example.com acl aclcrt_MESH var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ #PUT OTHER USE_BACKEND IN HERE use_backend Tactical_ipvANY if RMM aclcrt_RMM use_backend Tactical_ipvANY if API aclcrt_API use_backend Tactical-Mesh-WebSocket_ipvANY if is_websocket is_mesh aclcrt_MESH-WebSocket use_backend Tactical-Mesh_ipvANY if MESH aclcrt_MESH frontend http-to-https bind 0.0.0.0:80 mode http log global option http-keep-alive timeout client 30000 http-request redirect scheme https backend Tactical_ipvANY mode http id 100 log global timeout connect 30000 timeout server 30000 retries 3 option httpchk GET / server tactical 192.168.10.123:443 id 101 ssl check inter 1000 verify none backend Tactical-Mesh-WebSocket_ipvANY mode http id 113 log global timeout connect 3000 timeout server 3000 retries 3 timeout tunnel 3600000 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server tactical 192.168.10.123:443 id 101 ssl verify none backend Tactical-Mesh_ipvANY mode http id 112 log global timeout connect 15000 timeout server 15000 retries 3 option httpchk GET / timeout tunnel 15000 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server tactical 192.168.10.123:443 id 101 ssl check inter 1000 verify none","title":"HAProxy Config"},{"location":"unsupported_proxies/#apache-proxy","text":"howto - proxy on apache","title":"Apache Proxy"},{"location":"unsupported_proxies/#trmm-server","text":"edit file /etc/nginx/sites-available/rmm.conf add the lines from 'real_ip' module inside server tag: set_real_ip_from 192.168.0.200; #IP Address of your apache proxy real_ip_header X-Forwarded-For; restart nginx systemctl restart nginx.service","title":"TRMM SERVER"},{"location":"unsupported_proxies/#apache","text":"enable ssl proxy, rewriteEngine. set proxy to preserve host. set upgrade rule to websocket. set proxypass rules redirecting to rmm location on your apache ssl config example: <VirtualHost *:443> ServerName rmm.blablabla.com.br:443 ServerAlias mesh.blablabla.com.br:443 api.blablabla.com.br:443 SSLEngine on SSLCertificateFile \"C:/Apache24/conf/ssl-rmm.blablabla.com.br/_.blablabla.com.br-chain.pem\" SSLCertificateKeyFile \"C:/Apache24/conf/ssl-rmm.blablabla.com.br/_.blablabla.com.br-key.pem\" SSLProxyEngine on RewriteEngine On ProxyPreserveHost On # When Upgrade:websocket header is present, redirect to ws # Using NC flag (case-insensitive) as some browsers will pass Websocket RewriteCond %{HTTP:Upgrade} =websocket [NC] RewriteRule ^/(.*) wss://192.168.0.212/$1 [P,L] ProxyPass \"/\" \"https://192.168.0..212/\" retry=3 ProxyPassReverse \"/\" \"https://192.168.0.212/\" retry=3 BrowserMatch \"MSIE [2-5]\" \\ nokeepalive ssl-unclean-shutdown \\ downgrade-1.0 force-response-1.0","title":"APACHE"},{"location":"unsupported_proxies/#updating-certificate","text":"In my case, auto DNS Challenge from apache, so every time we get new cert files, it must be copied inside rmm too. just overwrite default location: /etc/letsencrypt/archive/blablablabla or change certs location on nginx conf to whatever you want.","title":"Updating certificate:"},{"location":"unsupported_proxies/#nginx-proxy","text":"Having mesh connection issues? See https://info.meshcentral.com/downloads/MeshCentral2/MeshCentral2UserGuide.pdf page 30.","title":"nginx Proxy"},{"location":"unsupported_proxies/#nginx-proxy-manager","text":"In NPM, declare the hosts with the parameters: api.{domain} https | TRMM server IP | 433 ON: Cache Assets | Block Common Exploits | Websockets Support mesh.{domain} https | TRMM server IP | 443 ON: Cache Assets | Block Common Exploits | Websockets Support rmm.{domain} https | TRMM server IP | 443 ON: Cache Assets | Block Common Exploits | Websockets Support proxy.{domain} http | NPM server IP | 81 (NPM web UI port) Then connect in SSH to your TRMM server to modify the nginx config of Mesh: nano meshcentral/meshcentral-data/config.json Then modify in this file the TlsOffload field to put the local IP address of your NPM and the port that goes with it, then also modify the \"CertUrl\" field to put the public domain name of your NPM. { \"settings\": { \"Cert\": \"${meshdomain}\", \"MongoDb\": \"mongodb://127.0.0.1:27017\", \"MongoDbName\": \"meshcentral\", \"WANonly\": true, \"Minify\": 1, \"Port\": 4430, \"AliasPort\": 443, \"RedirPort\": 800, \"AllowLoginToken\": true, \"AllowFraming\": true, \"_AgentPing\": 60, \"AgentPong\": 300, \"AllowHighQualityDesktop\": true, \"TlsOffload\": \"{NPM LAN IP}:81\", \"agentCoreDump\": false, \"Compression\": true, \"WsCompression\": true, \"AgentWsCompression\": true, \"MaxInvalidLogin\": { \"time\": 5, \"count\": 5, \"coolofftime\": 30 } }, \"domains\": { \"\": { \"Title\": \"Tactical RMM\", \"Title2\": \"Tactical RMM\", \"NewAccounts\": false, \"CertUrl\": \"https://proxy.{domain}:443/\", \"GeoLocation\": true, \"CookieIpCheck\": false, \"mstsc\": true } } } Then restart your mesh systemctl restart meshcentral.service At which point agents should be working. Use the \"Recover Connection\" button if necessary","title":"Nginx Proxy Manager"},{"location":"unsupported_proxies/#synology-nas-reverse-proxy-portal","text":"Follow HAProxy And set the \"CertUrl\" to point to the IP address of my NAS that was running the reserve proxy and had the certificates installed. In Synology NAS reverse proxy portal and added websockets to the rmm domains, especially the mesh domain under custom headers, by just clicking the create button and choosing WebSocket:","title":"Synology NAS reverse proxy portal"},{"location":"unsupported_scripts/","text":"Unsupported Reference Scripts \u00b6 Note These are not supported scripts/configurations by Tactical RMM, but it's provided here for your reference. Although these aren't officially supported configurations, we generally will help point you in the right direction. Please use the Discord #unsupported channel to discuss issues related to these complex installations fail2ban \u00b6 Install fail2ban \u00b6 sudo apt install -y fail2ban Set Tactical fail2ban filter conf File \u00b6 tacticalfail2banfilter = \" $( cat << EOF [Definition] failregex = ^<HOST>.*400.17.*$ ignoreregex = ^<HOST>.*200.*$ EOF ) \" sudo echo \" ${ tacticalfail2banfilter } \" > /etc/fail2ban/filter.d/tacticalrmm.conf Set Tactical fail2ban jail conf File \u00b6 tacticalfail2banjail = \" $( cat << EOF [tacticalrmm] enabled = true port = 80,443 filter = tacticalrmm action = iptables-allports[name=tactical] logpath = /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log maxretry = 3 bantime = 14400 findtime = 14400 EOF ) \" sudo echo \" ${ tacticalfail2banjail } \" > /etc/fail2ban/jail.d/tacticalrmm.local Restart fail2ban \u00b6 sudo systemctl restart fail2ban.service Using purchased SSL certs instead of LetsEncrypt wildcards \u00b6 Credit to @dinger1986 How to change certs used by Tactical RMM to purchased ones (this can be a wildcard cert). You need to add the certificate private key and public keys to the following files: /etc/nginx/sites-available/rmm.conf /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-available/frontend.conf /rmm/api/tacticalrmm/tacticalrmm/local_settings.py create a new folder for certs and allow tactical user permissions (assumed to be tactical) sudo mkdir /certs sudo chown -R tactical:tactical /certs\" Now move your certs into that folder. Open the api file and add the api certificate or if its a wildcard the directory should be /certs/EXAMPLE.COM/ sudo nano /etc/nginx/sites-available/rmm.conf replace ssl_certificate /etc/letsencrypt/live/EXAMPLE.COM/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/EXAMPLE.COM/privkey.pem; with ssl_certificate /certs/api.EXAMPLE.COM/fullchain.pem; ssl_certificate_key /certs/api.EXAMPLE.COM/privkey.pem; Repeat the process for /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-available/frontend.conf but change api. to: mesh. and rmm. respectively. Add the following to the last lines of /rmm/api/tacticalrmm/tacticalrmm/local_settings.py nano /rmm/api/tacticalrmm/tacticalrmm/local_settings.py add CERT_FILE = \"/certs/api.EXAMPLE.COM/fullchain.pem\" KEY_FILE = \"/certs/api.EXAMPLE.COM/privkey.pem\" Regenerate Nats Conf cd /rmm/api/tacticalrmm source ../env/bin/activate python manage.py reload_nats Restart services sudo systemctl restart rmm.service celery.service celerybeat.service nginx.service nats.service nats-api.service Use certbot to do acme challenge over http \u00b6 The standard SSL cert process in Tactical uses a DNS challenge that requires dns txt files to be updated in your public DNS with every cert renewal. The below script uses http challenge on the 3 separate ssl certs, one for each subdomain: rmm, api, mesh. They still have the same 3 month expiry. Restart the Tactical RMM server about every 2.5 months (80 days) for auto-renewed certs to become active. Note Your Tactical RMM server will need to have TCP Port: 80 exposed to the internet #!/bin/bash ###Set colours same as Tactical RMM install and Update YELLOW = '\\033[1;33m' GREEN = '\\033[0;32m' RED = '\\033[0;31m' NC = '\\033[0m' ### Ubuntu 20.04 Check UBU20 = $( grep 20 .04 \"/etc/\" * \"release\" ) if ! [[ $UBU20 ]] ; then echo -ne \"\\033[0;31mThis script will only work on Ubuntu 20.04\\e[0m\\n\" exit 1 fi cls () { printf \"\\033c\" } print_green () { printf > & 2 \" ${ GREEN } %0.s- ${ NC } \" { 1 ..80 } printf > & 2 \"\\n\" printf > & 2 \" ${ GREEN }${ 1 }${ NC } \\n\" printf > & 2 \" ${ GREEN } %0.s- ${ NC } \" { 1 ..80 } printf > & 2 \"\\n\" } cls ### Set variables for domains while [[ $rmmdomain ! = * [ . ] * [ . ] * ]] do echo -ne \" ${ YELLOW } Enter the subdomain used for the backend (e.g. api.example.com) ${ NC } : \" read rmmdomain done while [[ $frontenddomain ! = * [ . ] * [ . ] * ]] do echo -ne \" ${ YELLOW } Enter the subdomain used for the frontend (e.g. rmm.example.com) ${ NC } : \" read frontenddomain done while [[ $meshdomain ! = * [ . ] * [ . ] * ]] do echo -ne \" ${ YELLOW } Enter the subdomain used for meshcentral (e.g. mesh.example.com) ${ NC } : \" read meshdomain done echo -ne \" ${ YELLOW } Enter the current root domain (e.g. example.com or example.co.uk) ${ NC } : \" read rootdomain ### Setup Certificate Variables CERT_PRIV_KEY = /etc/letsencrypt/live/ ${ rootdomain } /privkey.pem CERT_PUB_KEY = /etc/letsencrypt/live/ ${ rootdomain } /fullchain.pem ### Make Letsencrypt directories sudo mkdir /var/www/letsencrypt sudo mkdir /var/www/letsencrypt/.mesh sudo mkdir /var/www/letsencrypt/.rmm sudo mkdir /var/www/letsencrypt/.api ### Remove config files for nginx sudo rm /etc/nginx/sites-available/rmm.conf sudo rm /etc/nginx/sites-available/meshcentral.conf sudo rm /etc/nginx/sites-available/frontend.conf sudo rm /etc/nginx/sites-enabled/rmm.conf sudo rm /etc/nginx/sites-enabled/meshcentral.conf sudo rm /etc/nginx/sites-enabled/frontend.conf ### Setup tactical nginx config files for letsencrypt nginxrmm = \" $( cat << EOF server_tokens off; upstream tacticalrmm { server unix:////rmm/api/tacticalrmm/tacticalrmm.sock; } map \\$http_user_agent \\$ignore_ua { \"~python-requests.*\" 0; \"~go-resty.*\" 0; default 1; } server { listen 80; server_name ${rmmdomain}; location /.well-known/acme-challenge/ { root /var/www/letsencrypt/.api/;} location / { return 301 https://\\$server_name\\$request_uri;} } server { listen 443 ssl; server_name ${rmmdomain}; client_max_body_size 300M; access_log /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log; error_log /rmm/api/tacticalrmm/tacticalrmm/private/log/error.log; ssl_certificate ${CERT_PUB_KEY}; ssl_certificate_key ${CERT_PRIV_KEY}; ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; location /static/ { root /rmm/api/tacticalrmm; } location /private/ { internal; add_header \"Access-Control-Allow-Origin\" \"https://${frontenddomain}\"; alias /rmm/api/tacticalrmm/tacticalrmm/private/; } location ~ ^/ws/ { proxy_pass http://unix:/rmm/daphne.sock; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; } location /saltscripts/ { internal; add_header \"Access-Control-Allow-Origin\" \"https://${frontenddomain}\"; alias /srv/salt/scripts/userdefined/; } location /builtin/ { internal; add_header \"Access-Control-Allow-Origin\" \"https://${frontenddomain}\"; alias /srv/salt/scripts/; } location ~ ^/(natsapi) { allow 127.0.0.1; deny all; uwsgi_pass tacticalrmm; include /etc/nginx/uwsgi_params; uwsgi_read_timeout 500s; uwsgi_ignore_client_abort on; } location / { uwsgi_pass tacticalrmm; include /etc/nginx/uwsgi_params; uwsgi_read_timeout 9999s; uwsgi_ignore_client_abort on; } } EOF ) \" echo \" ${ nginxrmm } \" | sudo tee /etc/nginx/sites-available/rmm.conf > /dev/null nginxmesh = \" $( cat << EOF server { listen 80; server_name ${meshdomain}; location /.well-known/acme-challenge/ { root /var/www/letsencrypt/.mesh/;} location / { return 301 https://\\$server_name\\$request_uri;} } server { listen 443 ssl; proxy_send_timeout 330s; proxy_read_timeout 330s; server_name ${meshdomain}; ssl_certificate ${CERT_PUB_KEY}; ssl_certificate_key ${CERT_PRIV_KEY}; ssl_session_cache shared:WEBSSL:10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / { proxy_pass http://127.0.0.1:4430/; proxy_http_version 1.1; proxy_set_header Host \\$host; proxy_set_header Upgrade \\$http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Forwarded-Host \\$host:\\$server_port; proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto \\$scheme; } } EOF ) \" echo \" ${ nginxmesh } \" | sudo tee /etc/nginx/sites-available/meshcentral.conf > /dev/null nginxfrontend = \" $( cat << EOF server { server_name ${frontenddomain}; charset utf-8; location / { root /var/www/rmm/dist; try_files \\$uri \\$uri/ /index.html; add_header Cache-Control \"no-store, no-cache, must-revalidate\"; add_header Pragma \"no-cache\"; } error_log /var/log/nginx/frontend-error.log; access_log /var/log/nginx/frontend-access.log; listen 443 ssl; ssl_certificate ${CERT_PUB_KEY}; ssl_certificate_key ${CERT_PRIV_KEY}; ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; } server { listen 80; server_name ${frontenddomain}; location /.well-known/acme-challenge/ { root /var/www/letsencrypt/.rmm/;} location / { return 301 https://\\$host\\$request_uri;} } EOF ) \" echo \" ${ nginxfrontend } \" | sudo tee /etc/nginx/sites-available/frontend.conf > /dev/null ### Relink nginx config files sudo ln -s /etc/nginx/sites-available/rmm.conf /etc/nginx/sites-enabled/rmm.conf sudo ln -s /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-enabled/meshcentral.conf sudo ln -s /etc/nginx/sites-available/frontend.conf /etc/nginx/sites-enabled/frontend.conf ### Restart nginx sudo systemctl restart nginx.service ### Get letsencrypt Certs sudo letsencrypt certonly --webroot -w /var/www/letsencrypt/.mesh/ -d ${ meshdomain } sudo letsencrypt certonly --webroot -w /var/www/letsencrypt/.rmm/ -d ${ frontenddomain } sudo letsencrypt certonly --webroot -w /var/www/letsencrypt/.api/ -d ${ rmmdomain } ### Ensure letsencrypt Permissions are correct sudo chown ${ USER } : ${ USER } -R /etc/letsencrypt sudo chmod 775 -R /etc/letsencrypt ### Set variables for new certs CERT_PRIV_KEY_API = /etc/letsencrypt/live/ ${ rmmdomain } /privkey.pem CERT_PUB_KEY_API = /etc/letsencrypt/live/ ${ rmmdomain } /fullchain.pem CERT_PRIV_KEY_RMM = /etc/letsencrypt/live/ ${ frontenddomain } /privkey.pem CERT_PUB_KEY_RMM = /etc/letsencrypt/live/ ${ frontenddomain } /fullchain.pem CERT_PRIV_KEY_MESH = /etc/letsencrypt/live/ ${ meshdomain } /privkey.pem CERT_PUB_KEY_MESH = /etc/letsencrypt/live/ ${ meshdomain } /fullchain.pem ### Replace certs in files rmmlocalsettings = \" $( cat << EOF CERT_FILE = \"${CERT_PUB_KEY_API}\" KEY_FILE = \"${CERT_PRIV_KEY_API}\" EOF ) \" echo \" ${ rmmlocalsettings } \" | tee --append /rmm/api/tacticalrmm/tacticalrmm/local_settings.py > /dev/null sudo sed -i \"s| ${ CERT_PRIV_KEY } | ${ CERT_PRIV_KEY_API } |g\" /etc/nginx/sites-available/rmm.conf sudo sed -i \"s| ${ CERT_PUB_KEY } | ${ CERT_PUB_KEY_API } |g\" /etc/nginx/sites-available/rmm.conf sudo sed -i \"s| ${ CERT_PRIV_KEY } | ${ CERT_PRIV_KEY_MESH } |g\" /etc/nginx/sites-available/meshcentral.conf sudo sed -i \"s| ${ CERT_PUB_KEY } | ${ CERT_PUB_KEY_MESH } |g\" /etc/nginx/sites-available/meshcentral.conf sudo sed -i \"s| ${ CERT_PRIV_KEY } | ${ CERT_PRIV_KEY_RMM } |g\" /etc/nginx/sites-available/frontend.conf sudo sed -i \"s| ${ CERT_PUB_KEY } | ${ CERT_PUB_KEY_RMM } |g\" /etc/nginx/sites-available/frontend.conf ### Remove Wildcard Cert rm -r /etc/letsencrypt/live/ ${ rootdomain } / rm -r /etc/letsencrypt/archive/ ${ rootdomain } / rm /etc/letsencrypt/renewal/ ${ rootdomain } .conf ### Regenerate Nats Conf cd /rmm/api/tacticalrmm source ../env/bin/activate python manage.py reload_nats ### Restart services for i in rmm celery celerybeat nginx nats nats-api do printf > & 2 \" ${ GREEN } Restarting ${ i } service... ${ NC } \\n\" sudo systemctl restart ${ i } done ### Renew certs can be done by sudo letsencrypt renew (this should automatically be in /etc/cron.d/certbot) Using your own certs with Docker \u00b6 Let's Encrypt is the only officially supported method of obtaining wildcard certificates. Publicly signed certificates should work but have not been fully tested. If you are providing your own publicly signed certificates, ensure you download the full chain (combined CA/Root + Intermediary) certificate in pem format. If certificates are not provided, a self-signed certificate will be generated and most agent functions won't work. Restricting Access to rmm.EXAMPLE.COM \u00b6 Limit access to Tactical RMM's administration panel in nginx to specific locations Using DNS \u00b6 Create a file allowed-domain.list which contains the DNS names you want to grant access to your rmm: Edit /etc/nginx/allowed-domain.list and add nom1.dyndns.tv nom2.dyndns.tv Create a bash script domain-resolver.sh which do the DNS lookups for you: Edit /etc/nginx/domain-resolver.sh 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env bash filename = \" $1 \" while read -r line do ddns_record = \" $line \" if [[ ! -z $ddns_record ]] ; then resolved_ip = getent ahosts $line | awk '{ print $1 ; exit }' if [[ ! -z $resolved_ip ]] ; then echo \"allow $resolved_ip ;# from $ddns_record \" fi fi done < \" $filename \" Give the right permission to this script chmod +x /etc/nginx/domain-resolver.sh Add a cron job which produces a valid nginx configuration and restarts nginx: /etc/cron.hourly/domain-resolver 1 2 3 #!/usr/bin/env bash /etc/nginx/domain-resolver.sh /etc/nginx/allowed-domain.list > /etc/nginx//allowed-ips-from-domains.conf service nginx reload > /dev/null 2 > & 1 This can be a hourly, daily or monthly job or you can have it run at a specific time. Give the right permission to this script chmod +x /etc/cron.hourly/domain-resolver When run it will give something like this Edit /etc/nginx//allowed-ips-from-domains.conf allow xxx.xxx.xxx.xxx;# from maison.nom1.dyndns.tv allow xxx.xxx.xxx.xxx;# from maison.nom2.dyndns.tv Update your nginx configuration to take this output into account: Edit /etc/nginx/sites-enabled/frontend.conf server { server_name rmm.example.com; charset utf-8; location / { root /var/www/rmm/dist; try_files $uri $uri/ /index.html; add_header Cache-Control \"no-store, no-cache, must-revalidate\"; add_header Pragma \"no-cache\"; } error_log /var/log/nginx/frontend-error.log; access_log /var/log/nginx/frontend-access.log; include /etc/nginx/allowed-ips-from-domains.conf; deny all; listen 443 ssl; listen [::]:443 ssl; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; } server { if ($host = rmm.example.com) { return 301 https://$host$request_uri; } listen 80; listen [::]:80; server_name rmm.example.com; return 404; } Using a fixed IP \u00b6 Create a file containg the fixed IP address (where xxx.xxx.xxx.xxx must be replaced by your real IP address) Edit /etc/nginx//allowed-ips.conf # Private IP address allow 192.168.0.0/16; allow 172.16.0.0/12; allow 10.0.0.0/8; # Public fixed IP address allow xxx.xxx.xxx.xxx Update your nginx configuration to take this output into account: Edit /etc/nginx/sites-enabled/frontend.conf server { server_name rmm.example.com; charset utf-8; location / { root /var/www/rmm/dist; try_files $uri $uri/ /index.html; add_header Cache-Control \"no-store, no-cache, must-revalidate\"; add_header Pragma \"no-cache\"; } error_log /var/log/nginx/frontend-error.log; access_log /var/log/nginx/frontend-access.log; include /etc/nginx/allowed-ips; deny all; listen 443 ssl; listen [::]:443 ssl; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; } server { if ($host = rmm.example.com) { return 301 https://$host$request_uri; } listen 80; listen [::]:80; server_name rmm.example.com; return 404; }","title":"Unsupported Configs"},{"location":"unsupported_scripts/#unsupported-reference-scripts","text":"Note These are not supported scripts/configurations by Tactical RMM, but it's provided here for your reference. Although these aren't officially supported configurations, we generally will help point you in the right direction. Please use the Discord #unsupported channel to discuss issues related to these complex installations","title":"Unsupported Reference Scripts"},{"location":"unsupported_scripts/#fail2ban","text":"","title":"fail2ban"},{"location":"unsupported_scripts/#install-fail2ban","text":"sudo apt install -y fail2ban","title":"Install fail2ban"},{"location":"unsupported_scripts/#set-tactical-fail2ban-filter-conf-file","text":"tacticalfail2banfilter = \" $( cat << EOF [Definition] failregex = ^<HOST>.*400.17.*$ ignoreregex = ^<HOST>.*200.*$ EOF ) \" sudo echo \" ${ tacticalfail2banfilter } \" > /etc/fail2ban/filter.d/tacticalrmm.conf","title":"Set Tactical fail2ban filter conf File"},{"location":"unsupported_scripts/#set-tactical-fail2ban-jail-conf-file","text":"tacticalfail2banjail = \" $( cat << EOF [tacticalrmm] enabled = true port = 80,443 filter = tacticalrmm action = iptables-allports[name=tactical] logpath = /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log maxretry = 3 bantime = 14400 findtime = 14400 EOF ) \" sudo echo \" ${ tacticalfail2banjail } \" > /etc/fail2ban/jail.d/tacticalrmm.local","title":"Set Tactical fail2ban jail conf File"},{"location":"unsupported_scripts/#restart-fail2ban","text":"sudo systemctl restart fail2ban.service","title":"Restart fail2ban"},{"location":"unsupported_scripts/#using-purchased-ssl-certs-instead-of-letsencrypt-wildcards","text":"Credit to @dinger1986 How to change certs used by Tactical RMM to purchased ones (this can be a wildcard cert). You need to add the certificate private key and public keys to the following files: /etc/nginx/sites-available/rmm.conf /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-available/frontend.conf /rmm/api/tacticalrmm/tacticalrmm/local_settings.py create a new folder for certs and allow tactical user permissions (assumed to be tactical) sudo mkdir /certs sudo chown -R tactical:tactical /certs\" Now move your certs into that folder. Open the api file and add the api certificate or if its a wildcard the directory should be /certs/EXAMPLE.COM/ sudo nano /etc/nginx/sites-available/rmm.conf replace ssl_certificate /etc/letsencrypt/live/EXAMPLE.COM/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/EXAMPLE.COM/privkey.pem; with ssl_certificate /certs/api.EXAMPLE.COM/fullchain.pem; ssl_certificate_key /certs/api.EXAMPLE.COM/privkey.pem; Repeat the process for /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-available/frontend.conf but change api. to: mesh. and rmm. respectively. Add the following to the last lines of /rmm/api/tacticalrmm/tacticalrmm/local_settings.py nano /rmm/api/tacticalrmm/tacticalrmm/local_settings.py add CERT_FILE = \"/certs/api.EXAMPLE.COM/fullchain.pem\" KEY_FILE = \"/certs/api.EXAMPLE.COM/privkey.pem\" Regenerate Nats Conf cd /rmm/api/tacticalrmm source ../env/bin/activate python manage.py reload_nats Restart services sudo systemctl restart rmm.service celery.service celerybeat.service nginx.service nats.service nats-api.service","title":"Using purchased SSL certs instead of LetsEncrypt wildcards"},{"location":"unsupported_scripts/#use-certbot-to-do-acme-challenge-over-http","text":"The standard SSL cert process in Tactical uses a DNS challenge that requires dns txt files to be updated in your public DNS with every cert renewal. The below script uses http challenge on the 3 separate ssl certs, one for each subdomain: rmm, api, mesh. They still have the same 3 month expiry. Restart the Tactical RMM server about every 2.5 months (80 days) for auto-renewed certs to become active. Note Your Tactical RMM server will need to have TCP Port: 80 exposed to the internet #!/bin/bash ###Set colours same as Tactical RMM install and Update YELLOW = '\\033[1;33m' GREEN = '\\033[0;32m' RED = '\\033[0;31m' NC = '\\033[0m' ### Ubuntu 20.04 Check UBU20 = $( grep 20 .04 \"/etc/\" * \"release\" ) if ! [[ $UBU20 ]] ; then echo -ne \"\\033[0;31mThis script will only work on Ubuntu 20.04\\e[0m\\n\" exit 1 fi cls () { printf \"\\033c\" } print_green () { printf > & 2 \" ${ GREEN } %0.s- ${ NC } \" { 1 ..80 } printf > & 2 \"\\n\" printf > & 2 \" ${ GREEN }${ 1 }${ NC } \\n\" printf > & 2 \" ${ GREEN } %0.s- ${ NC } \" { 1 ..80 } printf > & 2 \"\\n\" } cls ### Set variables for domains while [[ $rmmdomain ! = * [ . ] * [ . ] * ]] do echo -ne \" ${ YELLOW } Enter the subdomain used for the backend (e.g. api.example.com) ${ NC } : \" read rmmdomain done while [[ $frontenddomain ! = * [ . ] * [ . ] * ]] do echo -ne \" ${ YELLOW } Enter the subdomain used for the frontend (e.g. rmm.example.com) ${ NC } : \" read frontenddomain done while [[ $meshdomain ! = * [ . ] * [ . ] * ]] do echo -ne \" ${ YELLOW } Enter the subdomain used for meshcentral (e.g. mesh.example.com) ${ NC } : \" read meshdomain done echo -ne \" ${ YELLOW } Enter the current root domain (e.g. example.com or example.co.uk) ${ NC } : \" read rootdomain ### Setup Certificate Variables CERT_PRIV_KEY = /etc/letsencrypt/live/ ${ rootdomain } /privkey.pem CERT_PUB_KEY = /etc/letsencrypt/live/ ${ rootdomain } /fullchain.pem ### Make Letsencrypt directories sudo mkdir /var/www/letsencrypt sudo mkdir /var/www/letsencrypt/.mesh sudo mkdir /var/www/letsencrypt/.rmm sudo mkdir /var/www/letsencrypt/.api ### Remove config files for nginx sudo rm /etc/nginx/sites-available/rmm.conf sudo rm /etc/nginx/sites-available/meshcentral.conf sudo rm /etc/nginx/sites-available/frontend.conf sudo rm /etc/nginx/sites-enabled/rmm.conf sudo rm /etc/nginx/sites-enabled/meshcentral.conf sudo rm /etc/nginx/sites-enabled/frontend.conf ### Setup tactical nginx config files for letsencrypt nginxrmm = \" $( cat << EOF server_tokens off; upstream tacticalrmm { server unix:////rmm/api/tacticalrmm/tacticalrmm.sock; } map \\$http_user_agent \\$ignore_ua { \"~python-requests.*\" 0; \"~go-resty.*\" 0; default 1; } server { listen 80; server_name ${rmmdomain}; location /.well-known/acme-challenge/ { root /var/www/letsencrypt/.api/;} location / { return 301 https://\\$server_name\\$request_uri;} } server { listen 443 ssl; server_name ${rmmdomain}; client_max_body_size 300M; access_log /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log; error_log /rmm/api/tacticalrmm/tacticalrmm/private/log/error.log; ssl_certificate ${CERT_PUB_KEY}; ssl_certificate_key ${CERT_PRIV_KEY}; ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; location /static/ { root /rmm/api/tacticalrmm; } location /private/ { internal; add_header \"Access-Control-Allow-Origin\" \"https://${frontenddomain}\"; alias /rmm/api/tacticalrmm/tacticalrmm/private/; } location ~ ^/ws/ { proxy_pass http://unix:/rmm/daphne.sock; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; } location /saltscripts/ { internal; add_header \"Access-Control-Allow-Origin\" \"https://${frontenddomain}\"; alias /srv/salt/scripts/userdefined/; } location /builtin/ { internal; add_header \"Access-Control-Allow-Origin\" \"https://${frontenddomain}\"; alias /srv/salt/scripts/; } location ~ ^/(natsapi) { allow 127.0.0.1; deny all; uwsgi_pass tacticalrmm; include /etc/nginx/uwsgi_params; uwsgi_read_timeout 500s; uwsgi_ignore_client_abort on; } location / { uwsgi_pass tacticalrmm; include /etc/nginx/uwsgi_params; uwsgi_read_timeout 9999s; uwsgi_ignore_client_abort on; } } EOF ) \" echo \" ${ nginxrmm } \" | sudo tee /etc/nginx/sites-available/rmm.conf > /dev/null nginxmesh = \" $( cat << EOF server { listen 80; server_name ${meshdomain}; location /.well-known/acme-challenge/ { root /var/www/letsencrypt/.mesh/;} location / { return 301 https://\\$server_name\\$request_uri;} } server { listen 443 ssl; proxy_send_timeout 330s; proxy_read_timeout 330s; server_name ${meshdomain}; ssl_certificate ${CERT_PUB_KEY}; ssl_certificate_key ${CERT_PRIV_KEY}; ssl_session_cache shared:WEBSSL:10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / { proxy_pass http://127.0.0.1:4430/; proxy_http_version 1.1; proxy_set_header Host \\$host; proxy_set_header Upgrade \\$http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Forwarded-Host \\$host:\\$server_port; proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto \\$scheme; } } EOF ) \" echo \" ${ nginxmesh } \" | sudo tee /etc/nginx/sites-available/meshcentral.conf > /dev/null nginxfrontend = \" $( cat << EOF server { server_name ${frontenddomain}; charset utf-8; location / { root /var/www/rmm/dist; try_files \\$uri \\$uri/ /index.html; add_header Cache-Control \"no-store, no-cache, must-revalidate\"; add_header Pragma \"no-cache\"; } error_log /var/log/nginx/frontend-error.log; access_log /var/log/nginx/frontend-access.log; listen 443 ssl; ssl_certificate ${CERT_PUB_KEY}; ssl_certificate_key ${CERT_PRIV_KEY}; ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; } server { listen 80; server_name ${frontenddomain}; location /.well-known/acme-challenge/ { root /var/www/letsencrypt/.rmm/;} location / { return 301 https://\\$host\\$request_uri;} } EOF ) \" echo \" ${ nginxfrontend } \" | sudo tee /etc/nginx/sites-available/frontend.conf > /dev/null ### Relink nginx config files sudo ln -s /etc/nginx/sites-available/rmm.conf /etc/nginx/sites-enabled/rmm.conf sudo ln -s /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-enabled/meshcentral.conf sudo ln -s /etc/nginx/sites-available/frontend.conf /etc/nginx/sites-enabled/frontend.conf ### Restart nginx sudo systemctl restart nginx.service ### Get letsencrypt Certs sudo letsencrypt certonly --webroot -w /var/www/letsencrypt/.mesh/ -d ${ meshdomain } sudo letsencrypt certonly --webroot -w /var/www/letsencrypt/.rmm/ -d ${ frontenddomain } sudo letsencrypt certonly --webroot -w /var/www/letsencrypt/.api/ -d ${ rmmdomain } ### Ensure letsencrypt Permissions are correct sudo chown ${ USER } : ${ USER } -R /etc/letsencrypt sudo chmod 775 -R /etc/letsencrypt ### Set variables for new certs CERT_PRIV_KEY_API = /etc/letsencrypt/live/ ${ rmmdomain } /privkey.pem CERT_PUB_KEY_API = /etc/letsencrypt/live/ ${ rmmdomain } /fullchain.pem CERT_PRIV_KEY_RMM = /etc/letsencrypt/live/ ${ frontenddomain } /privkey.pem CERT_PUB_KEY_RMM = /etc/letsencrypt/live/ ${ frontenddomain } /fullchain.pem CERT_PRIV_KEY_MESH = /etc/letsencrypt/live/ ${ meshdomain } /privkey.pem CERT_PUB_KEY_MESH = /etc/letsencrypt/live/ ${ meshdomain } /fullchain.pem ### Replace certs in files rmmlocalsettings = \" $( cat << EOF CERT_FILE = \"${CERT_PUB_KEY_API}\" KEY_FILE = \"${CERT_PRIV_KEY_API}\" EOF ) \" echo \" ${ rmmlocalsettings } \" | tee --append /rmm/api/tacticalrmm/tacticalrmm/local_settings.py > /dev/null sudo sed -i \"s| ${ CERT_PRIV_KEY } | ${ CERT_PRIV_KEY_API } |g\" /etc/nginx/sites-available/rmm.conf sudo sed -i \"s| ${ CERT_PUB_KEY } | ${ CERT_PUB_KEY_API } |g\" /etc/nginx/sites-available/rmm.conf sudo sed -i \"s| ${ CERT_PRIV_KEY } | ${ CERT_PRIV_KEY_MESH } |g\" /etc/nginx/sites-available/meshcentral.conf sudo sed -i \"s| ${ CERT_PUB_KEY } | ${ CERT_PUB_KEY_MESH } |g\" /etc/nginx/sites-available/meshcentral.conf sudo sed -i \"s| ${ CERT_PRIV_KEY } | ${ CERT_PRIV_KEY_RMM } |g\" /etc/nginx/sites-available/frontend.conf sudo sed -i \"s| ${ CERT_PUB_KEY } | ${ CERT_PUB_KEY_RMM } |g\" /etc/nginx/sites-available/frontend.conf ### Remove Wildcard Cert rm -r /etc/letsencrypt/live/ ${ rootdomain } / rm -r /etc/letsencrypt/archive/ ${ rootdomain } / rm /etc/letsencrypt/renewal/ ${ rootdomain } .conf ### Regenerate Nats Conf cd /rmm/api/tacticalrmm source ../env/bin/activate python manage.py reload_nats ### Restart services for i in rmm celery celerybeat nginx nats nats-api do printf > & 2 \" ${ GREEN } Restarting ${ i } service... ${ NC } \\n\" sudo systemctl restart ${ i } done ### Renew certs can be done by sudo letsencrypt renew (this should automatically be in /etc/cron.d/certbot)","title":"Use certbot to do acme challenge over http"},{"location":"unsupported_scripts/#using-your-own-certs-with-docker","text":"Let's Encrypt is the only officially supported method of obtaining wildcard certificates. Publicly signed certificates should work but have not been fully tested. If you are providing your own publicly signed certificates, ensure you download the full chain (combined CA/Root + Intermediary) certificate in pem format. If certificates are not provided, a self-signed certificate will be generated and most agent functions won't work.","title":"Using your own certs with Docker"},{"location":"unsupported_scripts/#restricting-access-to-rmmexamplecom","text":"Limit access to Tactical RMM's administration panel in nginx to specific locations","title":"Restricting Access to rmm.EXAMPLE.COM"},{"location":"unsupported_scripts/#using-dns","text":"Create a file allowed-domain.list which contains the DNS names you want to grant access to your rmm: Edit /etc/nginx/allowed-domain.list and add nom1.dyndns.tv nom2.dyndns.tv Create a bash script domain-resolver.sh which do the DNS lookups for you: Edit /etc/nginx/domain-resolver.sh 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env bash filename = \" $1 \" while read -r line do ddns_record = \" $line \" if [[ ! -z $ddns_record ]] ; then resolved_ip = getent ahosts $line | awk '{ print $1 ; exit }' if [[ ! -z $resolved_ip ]] ; then echo \"allow $resolved_ip ;# from $ddns_record \" fi fi done < \" $filename \" Give the right permission to this script chmod +x /etc/nginx/domain-resolver.sh Add a cron job which produces a valid nginx configuration and restarts nginx: /etc/cron.hourly/domain-resolver 1 2 3 #!/usr/bin/env bash /etc/nginx/domain-resolver.sh /etc/nginx/allowed-domain.list > /etc/nginx//allowed-ips-from-domains.conf service nginx reload > /dev/null 2 > & 1 This can be a hourly, daily or monthly job or you can have it run at a specific time. Give the right permission to this script chmod +x /etc/cron.hourly/domain-resolver When run it will give something like this Edit /etc/nginx//allowed-ips-from-domains.conf allow xxx.xxx.xxx.xxx;# from maison.nom1.dyndns.tv allow xxx.xxx.xxx.xxx;# from maison.nom2.dyndns.tv Update your nginx configuration to take this output into account: Edit /etc/nginx/sites-enabled/frontend.conf server { server_name rmm.example.com; charset utf-8; location / { root /var/www/rmm/dist; try_files $uri $uri/ /index.html; add_header Cache-Control \"no-store, no-cache, must-revalidate\"; add_header Pragma \"no-cache\"; } error_log /var/log/nginx/frontend-error.log; access_log /var/log/nginx/frontend-access.log; include /etc/nginx/allowed-ips-from-domains.conf; deny all; listen 443 ssl; listen [::]:443 ssl; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; } server { if ($host = rmm.example.com) { return 301 https://$host$request_uri; } listen 80; listen [::]:80; server_name rmm.example.com; return 404; }","title":"Using DNS"},{"location":"unsupported_scripts/#using-a-fixed-ip","text":"Create a file containg the fixed IP address (where xxx.xxx.xxx.xxx must be replaced by your real IP address) Edit /etc/nginx//allowed-ips.conf # Private IP address allow 192.168.0.0/16; allow 172.16.0.0/12; allow 10.0.0.0/8; # Public fixed IP address allow xxx.xxx.xxx.xxx Update your nginx configuration to take this output into account: Edit /etc/nginx/sites-enabled/frontend.conf server { server_name rmm.example.com; charset utf-8; location / { root /var/www/rmm/dist; try_files $uri $uri/ /index.html; add_header Cache-Control \"no-store, no-cache, must-revalidate\"; add_header Pragma \"no-cache\"; } error_log /var/log/nginx/frontend-error.log; access_log /var/log/nginx/frontend-access.log; include /etc/nginx/allowed-ips; deny all; listen 443 ssl; listen [::]:443 ssl; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; } server { if ($host = rmm.example.com) { return 301 https://$host$request_uri; } listen 80; listen [::]:80; server_name rmm.example.com; return 404; }","title":"Using a fixed IP"},{"location":"unsupported_synology_docker_install/","text":"Installing on Synology NAS using docker install \u00b6 Docker Setup \u00b6 While a docker install is supported, trying to help someone get it working on their own Synology NAS is not. But here's how you do it! Follow the standard docker install documentation. Once the docker-compose file is downloaded, edit it and modify the ports used by the nginx server to custom ports ( 13180 and 13443 in the example below) Setup the reverse proxy \u00b6 Go to Login Portal > Advanced > Reverse Proxy in the Control Panel Create 2 entries for each tactical DNS entries, one for the HTTP port & one for the HTTPS For the entries related to the mesh, add some custom headers and adjust the proxy timeout connection Bonus: SSL Certificate \u00b6 In regards to the certificate, I followed this tutorial (in french but still clear after translation) to automatically update it and manually updating it on the NAS and in TRMM docker exec Acme sh -c \"acme.sh --issue --keylength 4096 -d '*.EXAMPLE.COM' --dns dns_provider\" sed -i '/CERT_PUB_KEY/d' /path/to/tactical/.env sed -i '/CERT_PRIV_KEY/d' /path/to/tactical/.env echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /volume1/docker/acme/ \\* .EXAMPLE.COM/fullchain.cer ) \" >> /path/to/tactical/.env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /volume1/docker/acme/ \\* .EXAMPLE.COM/*.whitesnew.com.key ) \" >> /path/to/tactical/.env docker exec Acme sh -c \"acme.sh --deploy -d '*.EXAMPLE.COM' --deploy-hook synology_provider\" docker-compose -f /path/to/tactical/docker-compose.yml restart","title":"Installing in Synology docker"},{"location":"unsupported_synology_docker_install/#installing-on-synology-nas-using-docker-install","text":"","title":"Installing on Synology NAS using docker install"},{"location":"unsupported_synology_docker_install/#docker-setup","text":"While a docker install is supported, trying to help someone get it working on their own Synology NAS is not. But here's how you do it! Follow the standard docker install documentation. Once the docker-compose file is downloaded, edit it and modify the ports used by the nginx server to custom ports ( 13180 and 13443 in the example below)","title":"Docker Setup"},{"location":"unsupported_synology_docker_install/#setup-the-reverse-proxy","text":"Go to Login Portal > Advanced > Reverse Proxy in the Control Panel Create 2 entries for each tactical DNS entries, one for the HTTP port & one for the HTTPS For the entries related to the mesh, add some custom headers and adjust the proxy timeout connection","title":"Setup the reverse proxy"},{"location":"unsupported_synology_docker_install/#bonus-ssl-certificate","text":"In regards to the certificate, I followed this tutorial (in french but still clear after translation) to automatically update it and manually updating it on the NAS and in TRMM docker exec Acme sh -c \"acme.sh --issue --keylength 4096 -d '*.EXAMPLE.COM' --dns dns_provider\" sed -i '/CERT_PUB_KEY/d' /path/to/tactical/.env sed -i '/CERT_PRIV_KEY/d' /path/to/tactical/.env echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /volume1/docker/acme/ \\* .EXAMPLE.COM/fullchain.cer ) \" >> /path/to/tactical/.env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /volume1/docker/acme/ \\* .EXAMPLE.COM/*.whitesnew.com.key ) \" >> /path/to/tactical/.env docker exec Acme sh -c \"acme.sh --deploy -d '*.EXAMPLE.COM' --deploy-hook synology_provider\" docker-compose -f /path/to/tactical/docker-compose.yml restart","title":"Bonus: SSL Certificate"},{"location":"update_agents/","text":"Updating Agents \u00b6 Warning The agent's version is directly tied to the RMM's version. For example, currently RMM version 0.4.17 is compatible with agent version 1.4.6 and lower. You should never attempt to manually update an agent to a newer version without first making sure your RMM is on the latest version. Updating from the Web UI \u00b6 Agents will automatically self update themselves if you have auto self update enabled in Settings > Global Settings There is a background job that runs every hour, at 35 minutes past the hour and sends any online agents an update command if it detects they are on an older version. You can also trigger this background job to run on demand by clicking Agents > Update Agents in the web UI: You can individually choose which agents to update, or simply Select All. The RMM will automatically skip any agents that don't need updating. You can trigger this manual agent update anytime you want. It is safe to spam, and won't run if an agent update task is already running. It will also make sure agents update to the correct version, in case they are an older version that cannot be directly upgraded to the latest version. For example, agents older than version 1.3.0 must first be updated to 1.3.0 before they can go any further. Manually updating from the command line on the agent \u00b6 You should never need to do this but might be needed to troubleshoot agents that are not updating automatically. Download the winagent-vX.X.X.exe executable from the github releases page and place it somewhere on the filesystem. Open CMD as admin and call the exe like so: C:\\Windows\\Temp>winagent-vX.X.X.exe /VERYSILENT /LOG=agentupdate.txt This command will return immediately since it spawns a background process to run the update. The agent will take around 30 seconds to fully update. You can check the agentupdate.txt log file that is created for troubleshooting.","title":"Updating Agents"},{"location":"update_agents/#updating-agents","text":"Warning The agent's version is directly tied to the RMM's version. For example, currently RMM version 0.4.17 is compatible with agent version 1.4.6 and lower. You should never attempt to manually update an agent to a newer version without first making sure your RMM is on the latest version.","title":"Updating Agents"},{"location":"update_agents/#updating-from-the-web-ui","text":"Agents will automatically self update themselves if you have auto self update enabled in Settings > Global Settings There is a background job that runs every hour, at 35 minutes past the hour and sends any online agents an update command if it detects they are on an older version. You can also trigger this background job to run on demand by clicking Agents > Update Agents in the web UI: You can individually choose which agents to update, or simply Select All. The RMM will automatically skip any agents that don't need updating. You can trigger this manual agent update anytime you want. It is safe to spam, and won't run if an agent update task is already running. It will also make sure agents update to the correct version, in case they are an older version that cannot be directly upgraded to the latest version. For example, agents older than version 1.3.0 must first be updated to 1.3.0 before they can go any further.","title":"Updating from the Web UI"},{"location":"update_agents/#manually-updating-from-the-command-line-on-the-agent","text":"You should never need to do this but might be needed to troubleshoot agents that are not updating automatically. Download the winagent-vX.X.X.exe executable from the github releases page and place it somewhere on the filesystem. Open CMD as admin and call the exe like so: C:\\Windows\\Temp>winagent-vX.X.X.exe /VERYSILENT /LOG=agentupdate.txt This command will return immediately since it spawns a background process to run the update. The agent will take around 30 seconds to fully update. You can check the agentupdate.txt log file that is created for troubleshooting.","title":"Manually updating from the command line on the agent"},{"location":"update_docker/","text":"Updating the RMM (Docker) \u00b6 Updating to the latest RMM version \u00b6 Question You have a backup right? Tactical RMM updates the docker images on every release and should be available within a few minutes SSH into your server as a root user and run the below commands: cd [ dir/with/compose/file ] mv docker-compose.yml docker-compose.yml.old wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/docker/docker-compose.yml sudo docker-compose pull sudo docker-compose down sudo docker-compose up -d --remove-orphans Keeping your Let's Encrypt certificate up to date \u00b6 To renew your Let's Encrypt wildcard cert, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns -m admin@example.com --no-eff-email Verify the domain with the TXT record. Once issued, run the below commands to base64 encode the certificates and add them to the .env file echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /fullchain.pem ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /privkey.pem ) \" >> .env Warning You must remove the old and any duplicate entries for CERT_PUB_KEY and CERT_PRIV_KEY in the .env file Now run sudo docker-compose up -d restart and the new certificate will be in effect","title":"Updating the RMM (Docker)"},{"location":"update_docker/#updating-the-rmm-docker","text":"","title":"Updating the RMM (Docker)"},{"location":"update_docker/#updating-to-the-latest-rmm-version","text":"Question You have a backup right? Tactical RMM updates the docker images on every release and should be available within a few minutes SSH into your server as a root user and run the below commands: cd [ dir/with/compose/file ] mv docker-compose.yml docker-compose.yml.old wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/docker/docker-compose.yml sudo docker-compose pull sudo docker-compose down sudo docker-compose up -d --remove-orphans","title":"Updating to the latest RMM version"},{"location":"update_docker/#keeping-your-lets-encrypt-certificate-up-to-date","text":"To renew your Let's Encrypt wildcard cert, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns -m admin@example.com --no-eff-email Verify the domain with the TXT record. Once issued, run the below commands to base64 encode the certificates and add them to the .env file echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /fullchain.pem ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /privkey.pem ) \" >> .env Warning You must remove the old and any duplicate entries for CERT_PUB_KEY and CERT_PRIV_KEY in the .env file Now run sudo docker-compose up -d restart and the new certificate will be in effect","title":"Keeping your Let's Encrypt certificate up to date"},{"location":"update_server/","text":"Updating the RMM \u00b6 Keeping your linux server up to date \u00b6 You should periodically run sudo apt update and sudo apt -y upgrade to keep your server up to date. Other than this, you should avoid making any changes to your server and let the update.sh script handle everything else for you. Updating to the latest RMM version \u00b6 Danger Do not attempt to manually edit the update script or any configuration files unless specifically told to by one of the developers. Since this software is completely self hosted and we have no access to your server, we have to assume you have not made any config changes to any of the files or services on your server, and the update script will assume this. You should also never attempt to automate running the update script via cron. The update script will update itself if needed to the latest version when you run it, and then prompt you to run it again. Sometimes, manual intervention will be required during an update in the form of yes/no prompts, so attempting to automate this will ignore these prompts and cause your installation to break. SSH into your server as the linux user you created during install (eg tactical ). Danger Never run any update scripts or commands as the root user. This will mess up permissions and break your installation. Question You have a backup right? Download the update script and run it: wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/update.sh chmod +x update.sh ./update.sh If you are already on the latest version, the update script will notify you of this and return immediately. You can pass the optional --force flag to the update script to forcefully run through an update, which will bypass the check for latest version. ./update.sh --force This is useful for a botched update that might have not completed fully. The update script will also fix any permissions that might have gotten messed up during a botched update, or if you accidentally ran the update script as the root user. Warning Do not attempt to manually update MeshCentral to a newer version. You should let the update.sh script handle this for you. The developers will test MeshCentral and make sure integration does not break before bumping the mesh version. Keeping your Let's Encrypt certificate up to date \u00b6 Info Currently, the update script does not automatically renew your Let's Encrypt wildcard certificate, which expires every 3 months, since this is non-trivial to automate using the DNS TXT record method. To renew your Let's Encrypt wildcard cert, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns -m admin@example.com --no-eff-email Same instructions as during install for verifying the TXT record has propagated before hitting Enter . After this you have renewed the cert, simply run the update.sh script, passing it the --force flag. ./update.sh --force Video Walkthru \u00b6","title":"Updating the RMM"},{"location":"update_server/#updating-the-rmm","text":"","title":"Updating the RMM"},{"location":"update_server/#keeping-your-linux-server-up-to-date","text":"You should periodically run sudo apt update and sudo apt -y upgrade to keep your server up to date. Other than this, you should avoid making any changes to your server and let the update.sh script handle everything else for you.","title":"Keeping your linux server up to date"},{"location":"update_server/#updating-to-the-latest-rmm-version","text":"Danger Do not attempt to manually edit the update script or any configuration files unless specifically told to by one of the developers. Since this software is completely self hosted and we have no access to your server, we have to assume you have not made any config changes to any of the files or services on your server, and the update script will assume this. You should also never attempt to automate running the update script via cron. The update script will update itself if needed to the latest version when you run it, and then prompt you to run it again. Sometimes, manual intervention will be required during an update in the form of yes/no prompts, so attempting to automate this will ignore these prompts and cause your installation to break. SSH into your server as the linux user you created during install (eg tactical ). Danger Never run any update scripts or commands as the root user. This will mess up permissions and break your installation. Question You have a backup right? Download the update script and run it: wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/update.sh chmod +x update.sh ./update.sh If you are already on the latest version, the update script will notify you of this and return immediately. You can pass the optional --force flag to the update script to forcefully run through an update, which will bypass the check for latest version. ./update.sh --force This is useful for a botched update that might have not completed fully. The update script will also fix any permissions that might have gotten messed up during a botched update, or if you accidentally ran the update script as the root user. Warning Do not attempt to manually update MeshCentral to a newer version. You should let the update.sh script handle this for you. The developers will test MeshCentral and make sure integration does not break before bumping the mesh version.","title":"Updating to the latest RMM version"},{"location":"update_server/#keeping-your-lets-encrypt-certificate-up-to-date","text":"Info Currently, the update script does not automatically renew your Let's Encrypt wildcard certificate, which expires every 3 months, since this is non-trivial to automate using the DNS TXT record method. To renew your Let's Encrypt wildcard cert, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns -m admin@example.com --no-eff-email Same instructions as during install for verifying the TXT record has propagated before hitting Enter . After this you have renewed the cert, simply run the update.sh script, passing it the --force flag. ./update.sh --force","title":"Keeping your Let's Encrypt certificate up to date"},{"location":"update_server/#video-walkthru","text":"","title":"Video Walkthru"},{"location":"devnotes/prepvmfortesting/","text":"VM for dev testing \u00b6 Pre-install python \u00b6 This takes a long time, so install with 1install_python.sh before snapshotting VM Pre-get SSL certs \u00b6 Install certbot sudo apt-get install certbot Get your wildcard certs","title":"VM for dev testing"},{"location":"devnotes/prepvmfortesting/#vm-for-dev-testing","text":"","title":"VM for dev testing"},{"location":"devnotes/prepvmfortesting/#pre-install-python","text":"This takes a long time, so install with 1install_python.sh before snapshotting VM","title":"Pre-install python"},{"location":"devnotes/prepvmfortesting/#pre-get-ssl-certs","text":"Install certbot sudo apt-get install certbot Get your wildcard certs","title":"Pre-get SSL certs"},{"location":"devnotes/running_tests_locally/","text":"Dev Notes \u00b6 Running Tests with Python for community_scripts tests \u00b6 There are build/tests everywhere in TRMM, that make sure things haven't gone wrong (like in the community-script any file in the scripts folder must have a matching entry in .json file. And every field in the .json file should be in the right format, and no duplicates...and .json needs to be properly formatted and...and...and) so there's tests. Here's how you run tests locally (make sure python is installed first) Running tests from VSCode linux Windows Open TERMINAL -> SSH Setup python environment python3 -m venv env source env/bin/activate pip install --upgrade pip pip install pytest Run tests pytest Make sure git isn't going to try and sync your python environment with the repo __pycache__/ env/ Open TERMINAL -> PowerShell Integrated Console (make sure you're in the right path or root of your git folder) Setup python env python -m venv env You'll see /env/ folder created in your local folder Activate your python env .\\ env \\ Scripts \\ activate look for the (env) to appear at the front of your commandline Upgrade pip to latest, and install pytest python -m pip install - -upgrade pip pip install pytest Run pytest pytest Good test Bad test When done, shut down your python environment deactivate Summary python -m venv env .\\ env \\ Scripts \\ activate python -m pip install - -upgrade pip pip install pytest pytest","title":"Dev Notes"},{"location":"devnotes/running_tests_locally/#dev-notes","text":"","title":"Dev Notes"},{"location":"devnotes/running_tests_locally/#running-tests-with-python-for-community_scripts-tests","text":"There are build/tests everywhere in TRMM, that make sure things haven't gone wrong (like in the community-script any file in the scripts folder must have a matching entry in .json file. And every field in the .json file should be in the right format, and no duplicates...and .json needs to be properly formatted and...and...and) so there's tests. Here's how you run tests locally (make sure python is installed first) Running tests from VSCode linux Windows Open TERMINAL -> SSH Setup python environment python3 -m venv env source env/bin/activate pip install --upgrade pip pip install pytest Run tests pytest Make sure git isn't going to try and sync your python environment with the repo __pycache__/ env/ Open TERMINAL -> PowerShell Integrated Console (make sure you're in the right path or root of your git folder) Setup python env python -m venv env You'll see /env/ folder created in your local folder Activate your python env .\\ env \\ Scripts \\ activate look for the (env) to appear at the front of your commandline Upgrade pip to latest, and install pytest python -m pip install - -upgrade pip pip install pytest Run pytest pytest Good test Bad test When done, shut down your python environment deactivate Summary python -m venv env .\\ env \\ Scripts \\ activate python -m pip install - -upgrade pip pip install pytest pytest","title":"Running Tests with Python for community_scripts tests"},{"location":"functions/alerting/","text":"Alerting Overview \u00b6 Alerting and notifications can be managed centrally using Alert Templates. All an alert template does is configure the Email, Text and Dashboard alert check boxes on Agents, Checks, and Automated Tasks. Using Alert Templates also enables additional feature like: Periodic notifications if an alert is left unresolved Being able to notify on certain alert severities Sending notifications when an alert is resolved Executing scripts when an alert is triggered or resolved Setting up Email Alert Examples Supported Notifications \u00b6 Email Alerts - Sends email to configured set of email addresses SMS Alerts - Sends text messages to configured set of numbers Dashboard Alerts - A notification popup will show up and be visible in the dashboard Alert Severities \u00b6 Info Agent overdue alerts are always of severity Error Alert severities are configured directly on the Check or Automated Task. When the Check/Automated Task fails, it will create an alert of the specified severity. The severity types are: Informational Warning Error Adding Alert Templates \u00b6 To create an alert template, go to Settings > Alerts Manager . Then click New The available options are: General Settings \u00b6 Name - The name that is used to identify the Alert Template in the dashboard Email Recipients - Sets the list of email recipients. If this isn't set the email recipients will global settings will be used. From Email - Sets the From email address of the notification. If this isn't set the From address from global settings is used. SMS Recipients - Sets the list of text recipients. If this isn't set the sms list from global settings is used. Action Settings \u00b6 Failure Action - Runs the selected script once on any agent. This is useful for running one-time tasks like sending an http request to an external system to create a ticket. Failure Action Args - Optionally pass in arguments to the failure script. Failure Action Timeout - Sets the timeout for the script. Resolved Action - Runs the selected script once on any agent if the alert is resolved. This is useful for running one-time tasks like sending an http request to an external system to close the ticket that was created. Resolved Action Args - Optionally pass in arguments to the resolved script. Resolved Action Timeout - Sets the timeout for the script. Run actions only on: \u00b6 Agents - If Enabled, will run script failure/resolved actions on agent overdue alerts else no alert actions will be triggered for agent overdue alerts Checks - If Enabled, will run script failure/resolved actions on check alerts else no alert actions will be triggered check alerts Tasks - If Enabled, will run script failure/resolved actions on automated task alerts else no alert actions will be triggered automated task alerts Agent/Check/Task Failure Settings \u00b6 Email - When Enabled , will send an email notification and override the Email Alert checkbox on the Agent/Check/Task. When Not Configured , the Email Alert checkbox on the Agent/Check/Task will take effect. If Disabled , no email notifications will be sent and will override any Email alert checkbox on the Agent/Check/Task Text - When Enabled , will send a text notification and override the SMS Alert checkbox on the Agent/Check/Task. When Not Configured , the SMS Alert checkbox on the Agent/Check/Task will take effect. If Disabled , no SMS notifications will be sent and will override any SMS Alert checkbox on the Agent/Check/Task Dashboard - When Enabled , will send a dashboard notification and override the Dashboard Alert checkbox on the Agent/Check/Task. When Not Configured , the Dashboard Alert checkbox on the Agent/Check/Task will take effect. If Disabled , no SMS notifications will be sent and will override any Dashboard Alert checkbox on the Agent/Check/Task Alert again if not resolved after (days) - This sends another notification if the alert isn't resolved after the set amount of days. Set to 0 to disable this Alert on severity - Only applicable to Check and Task alert notifications. This will only send alerts when they are of the configured severity. Info Alert on Severity needs to be configured for check and task notifications to be sent! Agent/Check/Task Resolved Settings \u00b6 Email - If enabled, sends an email notification when an alert is resolved Text - If enabled, sends a text messaged when an alert is resolved Applying Alert Templates \u00b6 Alert templates can be configured Globally, through an Automation Policy, or set directly on the Client or Site. To apply Globally , navigate to Settings > Global Settings . Set the Alert Template dropdown and save. You can configure an alert template on an automation policy by navigating to Settings > Automation Manager , and clicking the Assign Alert Template click on the policy, or right-clicking the policy and selecting Assign Alert Template To configure on a Client or Site, right-click on one in the Client/Site tree view and select Assign Alert Template Alert Template Exclusions \u00b6 You can exclude Clients, Sites, and Agents from alert templates. To do this you can: right-click on the Alert Template in Alerts Manager and select Exclusions select the Alert Exclusions link in the Alert Template row. You can also Exclude Desktops from the alert template. This is useful if you only care about servers. Alert Template inheritance \u00b6 Alerts are applied in the following order. The agent picks the closest matching alert template. Policy w/ Alert Template applied to Site Site Policy w/ Alert Template applied to Client Client Default Alert Template","title":"Alerting"},{"location":"functions/alerting/#alerting-overview","text":"Alerting and notifications can be managed centrally using Alert Templates. All an alert template does is configure the Email, Text and Dashboard alert check boxes on Agents, Checks, and Automated Tasks. Using Alert Templates also enables additional feature like: Periodic notifications if an alert is left unresolved Being able to notify on certain alert severities Sending notifications when an alert is resolved Executing scripts when an alert is triggered or resolved Setting up Email Alert Examples","title":"Alerting Overview"},{"location":"functions/alerting/#supported-notifications","text":"Email Alerts - Sends email to configured set of email addresses SMS Alerts - Sends text messages to configured set of numbers Dashboard Alerts - A notification popup will show up and be visible in the dashboard","title":"Supported Notifications"},{"location":"functions/alerting/#alert-severities","text":"Info Agent overdue alerts are always of severity Error Alert severities are configured directly on the Check or Automated Task. When the Check/Automated Task fails, it will create an alert of the specified severity. The severity types are: Informational Warning Error","title":"Alert Severities"},{"location":"functions/alerting/#adding-alert-templates","text":"To create an alert template, go to Settings > Alerts Manager . Then click New The available options are:","title":"Adding Alert Templates"},{"location":"functions/alerting/#general-settings","text":"Name - The name that is used to identify the Alert Template in the dashboard Email Recipients - Sets the list of email recipients. If this isn't set the email recipients will global settings will be used. From Email - Sets the From email address of the notification. If this isn't set the From address from global settings is used. SMS Recipients - Sets the list of text recipients. If this isn't set the sms list from global settings is used.","title":"General Settings"},{"location":"functions/alerting/#action-settings","text":"Failure Action - Runs the selected script once on any agent. This is useful for running one-time tasks like sending an http request to an external system to create a ticket. Failure Action Args - Optionally pass in arguments to the failure script. Failure Action Timeout - Sets the timeout for the script. Resolved Action - Runs the selected script once on any agent if the alert is resolved. This is useful for running one-time tasks like sending an http request to an external system to close the ticket that was created. Resolved Action Args - Optionally pass in arguments to the resolved script. Resolved Action Timeout - Sets the timeout for the script.","title":"Action Settings"},{"location":"functions/alerting/#run-actions-only-on","text":"Agents - If Enabled, will run script failure/resolved actions on agent overdue alerts else no alert actions will be triggered for agent overdue alerts Checks - If Enabled, will run script failure/resolved actions on check alerts else no alert actions will be triggered check alerts Tasks - If Enabled, will run script failure/resolved actions on automated task alerts else no alert actions will be triggered automated task alerts","title":"Run actions only on:"},{"location":"functions/alerting/#agentchecktask-failure-settings","text":"Email - When Enabled , will send an email notification and override the Email Alert checkbox on the Agent/Check/Task. When Not Configured , the Email Alert checkbox on the Agent/Check/Task will take effect. If Disabled , no email notifications will be sent and will override any Email alert checkbox on the Agent/Check/Task Text - When Enabled , will send a text notification and override the SMS Alert checkbox on the Agent/Check/Task. When Not Configured , the SMS Alert checkbox on the Agent/Check/Task will take effect. If Disabled , no SMS notifications will be sent and will override any SMS Alert checkbox on the Agent/Check/Task Dashboard - When Enabled , will send a dashboard notification and override the Dashboard Alert checkbox on the Agent/Check/Task. When Not Configured , the Dashboard Alert checkbox on the Agent/Check/Task will take effect. If Disabled , no SMS notifications will be sent and will override any Dashboard Alert checkbox on the Agent/Check/Task Alert again if not resolved after (days) - This sends another notification if the alert isn't resolved after the set amount of days. Set to 0 to disable this Alert on severity - Only applicable to Check and Task alert notifications. This will only send alerts when they are of the configured severity. Info Alert on Severity needs to be configured for check and task notifications to be sent!","title":"Agent/Check/Task Failure Settings"},{"location":"functions/alerting/#agentchecktask-resolved-settings","text":"Email - If enabled, sends an email notification when an alert is resolved Text - If enabled, sends a text messaged when an alert is resolved","title":"Agent/Check/Task Resolved Settings"},{"location":"functions/alerting/#applying-alert-templates","text":"Alert templates can be configured Globally, through an Automation Policy, or set directly on the Client or Site. To apply Globally , navigate to Settings > Global Settings . Set the Alert Template dropdown and save. You can configure an alert template on an automation policy by navigating to Settings > Automation Manager , and clicking the Assign Alert Template click on the policy, or right-clicking the policy and selecting Assign Alert Template To configure on a Client or Site, right-click on one in the Client/Site tree view and select Assign Alert Template","title":"Applying Alert Templates"},{"location":"functions/alerting/#alert-template-exclusions","text":"You can exclude Clients, Sites, and Agents from alert templates. To do this you can: right-click on the Alert Template in Alerts Manager and select Exclusions select the Alert Exclusions link in the Alert Template row. You can also Exclude Desktops from the alert template. This is useful if you only care about servers.","title":"Alert Template Exclusions"},{"location":"functions/alerting/#alert-template-inheritance","text":"Alerts are applied in the following order. The agent picks the closest matching alert template. Policy w/ Alert Template applied to Site Site Policy w/ Alert Template applied to Client Client Default Alert Template","title":"Alert Template inheritance"},{"location":"functions/api/","text":"API Access \u00b6 Version added: v0.8.3 API Keys can be created to access any of TacticalRMM's api endpoints, which will bypass 2fa authentication When creating the key you'll need to choose a user, which will reflect what permissions the key has based on the user's role. Navigate to Settings > Global Settings > API Keys to generate a key Headers: { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : \"J57BXCFDA2WBCXH0XTELBR5KAI69CNCZ\" } Example curl request: curl https://api.example.com/clients/ -H \"X-API-KEY: Y57BXCFAA9WBCXH0XTEL6R5KAK69CNCZ\" `` ## Querying the API Here are some examples: ???+ abstract \"Example Code\" === \":fontawesome-brands-python: Python\" Requests Windows Update check to run against agent ID ``` python import requests API = \"http://api.example.com\" HEADERS = { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : \"DKNRPTHSAPCKT8A36MCAMNZREWWWFPWI\" , } def trigger_update_scan () : agents = requests.get ( f \"{API}/agents/?detail=false\" , headers = HEADERS ) for agent in agents.json () : r = requests.post ( f \"{API}/winupdate/{agent['agent_id']}/scan/\" , headers = HEADERS ) print ( r.json ()) if __name__ == \"__main__\" : trigger_update_scan () ``` === \":material-powershell: Powershell\" ``` powershell # Example - Get all agents using API $headers = @ { 'X-API-KEY' = 'ABC1234567890987654321' } $url = \"https://api.yourdomain.com/agents/\" $agentsResult = Invoke-RestMethod -Method 'Get' -Uri $url -Headers $headers -ContentType \"application/json\" foreach ( $agent in $agentsResult ) { Write-Host $agent #Write-Host $agent.hostname } ``` === \":material-powershell: Powershell\" ``` powershell # Example - Send powershell command to agent. Make sure to pass {{agent.agent_id}} as a parameter param ( $AgentId ) $headers = @ { 'X-API-KEY' = 'ABC1234567890987654321' } $url = \"https://api.yourdomain.com/agents/ $AgentId /cmd/\" $body = @ { \"shell\" = \"powershell\" \"cmd\" = \"dir c:\\\\users\" \"timeout\" = 30 } $commandResult = Invoke-RestMethod -Method 'Post' -Uri $url -Body ( $body | ConvertTo-Json ) -Headers $headers -ContentType \"application/json\" Write-Host $commandResult ``` ### Running a script on agent using the api ` POST ` to the endpoint ` /agents/<agentid>/runscript/ ` this { \"output\": \"forget\", \"email\": [], \"emailMode\": \"default\", \"custom_field\": null, \"save_all_output\": false, \"script\": 102, // primary key of script in postgres \"args\": [ \"arg1\", \"arg2\" ], \"timeout\": 90 // seconds } ## Enable Swagger (Currently broken, but good to see what can be queried) This will let you add a browser interface to see how you can use the api better. Open `/rmm/api/tacticalrmm/tacticalrmm/local_settings.py` and add ```conf SWAGGER_ENABLED = True Restart django: sudo systemctl restart rmm.service Then visit https://api.example.com/api/schema/swagger-ui/ to see it in action.","title":"API Access"},{"location":"functions/api/#api-access","text":"Version added: v0.8.3 API Keys can be created to access any of TacticalRMM's api endpoints, which will bypass 2fa authentication When creating the key you'll need to choose a user, which will reflect what permissions the key has based on the user's role. Navigate to Settings > Global Settings > API Keys to generate a key Headers: { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : \"J57BXCFDA2WBCXH0XTELBR5KAI69CNCZ\" } Example curl request: curl https://api.example.com/clients/ -H \"X-API-KEY: Y57BXCFAA9WBCXH0XTEL6R5KAK69CNCZ\" `` ## Querying the API Here are some examples: ???+ abstract \"Example Code\" === \":fontawesome-brands-python: Python\" Requests Windows Update check to run against agent ID ``` python import requests API = \"http://api.example.com\" HEADERS = { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : \"DKNRPTHSAPCKT8A36MCAMNZREWWWFPWI\" , } def trigger_update_scan () : agents = requests.get ( f \"{API}/agents/?detail=false\" , headers = HEADERS ) for agent in agents.json () : r = requests.post ( f \"{API}/winupdate/{agent['agent_id']}/scan/\" , headers = HEADERS ) print ( r.json ()) if __name__ == \"__main__\" : trigger_update_scan () ``` === \":material-powershell: Powershell\" ``` powershell # Example - Get all agents using API $headers = @ { 'X-API-KEY' = 'ABC1234567890987654321' } $url = \"https://api.yourdomain.com/agents/\" $agentsResult = Invoke-RestMethod -Method 'Get' -Uri $url -Headers $headers -ContentType \"application/json\" foreach ( $agent in $agentsResult ) { Write-Host $agent #Write-Host $agent.hostname } ``` === \":material-powershell: Powershell\" ``` powershell # Example - Send powershell command to agent. Make sure to pass {{agent.agent_id}} as a parameter param ( $AgentId ) $headers = @ { 'X-API-KEY' = 'ABC1234567890987654321' } $url = \"https://api.yourdomain.com/agents/ $AgentId /cmd/\" $body = @ { \"shell\" = \"powershell\" \"cmd\" = \"dir c:\\\\users\" \"timeout\" = 30 } $commandResult = Invoke-RestMethod -Method 'Post' -Uri $url -Body ( $body | ConvertTo-Json ) -Headers $headers -ContentType \"application/json\" Write-Host $commandResult ``` ### Running a script on agent using the api ` POST ` to the endpoint ` /agents/<agentid>/runscript/ ` this { \"output\": \"forget\", \"email\": [], \"emailMode\": \"default\", \"custom_field\": null, \"save_all_output\": false, \"script\": 102, // primary key of script in postgres \"args\": [ \"arg1\", \"arg2\" ], \"timeout\": 90 // seconds } ## Enable Swagger (Currently broken, but good to see what can be queried) This will let you add a browser interface to see how you can use the api better. Open `/rmm/api/tacticalrmm/tacticalrmm/local_settings.py` and add ```conf SWAGGER_ENABLED = True Restart django: sudo systemctl restart rmm.service Then visit https://api.example.com/api/schema/swagger-ui/ to see it in action.","title":"API Access"},{"location":"functions/automated_tasks/","text":"Automated Tasks \u00b6 Collector Tasks \u00b6 Collector tasks allow saving data from script output directly to a custom field. The collector task will only save the last line of standard output of the script. You can create collector tasks by adding it to an Automation Policy or adding it directly to an agent. During creation, select the Collector checkbox and select the custom field to save to. You can only save to agent custom fields at this time. See Custom Fields and Scripting for more information","title":"Automated Tasks"},{"location":"functions/automated_tasks/#automated-tasks","text":"","title":"Automated Tasks"},{"location":"functions/automated_tasks/#collector-tasks","text":"Collector tasks allow saving data from script output directly to a custom field. The collector task will only save the last line of standard output of the script. You can create collector tasks by adding it to an Automation Policy or adding it directly to an agent. During creation, select the Collector checkbox and select the custom field to save to. You can only save to agent custom fields at this time. See Custom Fields and Scripting for more information","title":"Collector Tasks"},{"location":"functions/automation_policies/","text":"Automation Policies \u00b6 Automation policies in Tactical RMM allow for mass deployment of Checks, Automated Tasks, Patch Policies, and Alert Templates. You can apply Automation Policies to: Global Settings Client Site Agent You can also see a list of Relations that show what policy is applied to what Clients | Sites | Agents Creating Automation Policies \u00b6 In the dashboard, navigate to Settings > Automation Manager . Use the Add button to create a blank Automation Policy. The options available are: Name - The name that will be used to identify the automation policy in the dashboard Description - Optional description of the automation policy Enabled - Specifies if the automation policy is active or not Enforced - Specifies that the automation policy should overwrite any conflicting checks configured directly on the agent Policy Inheritance \u00b6 They get applied in this order: Global Settings Client Site Agent and at each level you can Block policy inheritance from the level above using checkboxes in the appropriate screens. Adding Windows Patch Management Policy \u00b6 Under the Automation Manager you can create a Patch Policy and control what patches are applied, when, and if the computer is rebooted after. Note Most \"regular\" Windows patches are listed in the \"Other\" category.","title":"Automation Policies"},{"location":"functions/automation_policies/#automation-policies","text":"Automation policies in Tactical RMM allow for mass deployment of Checks, Automated Tasks, Patch Policies, and Alert Templates. You can apply Automation Policies to: Global Settings Client Site Agent You can also see a list of Relations that show what policy is applied to what Clients | Sites | Agents","title":"Automation Policies"},{"location":"functions/automation_policies/#creating-automation-policies","text":"In the dashboard, navigate to Settings > Automation Manager . Use the Add button to create a blank Automation Policy. The options available are: Name - The name that will be used to identify the automation policy in the dashboard Description - Optional description of the automation policy Enabled - Specifies if the automation policy is active or not Enforced - Specifies that the automation policy should overwrite any conflicting checks configured directly on the agent","title":"Creating Automation Policies"},{"location":"functions/automation_policies/#policy-inheritance","text":"They get applied in this order: Global Settings Client Site Agent and at each level you can Block policy inheritance from the level above using checkboxes in the appropriate screens.","title":"Policy Inheritance"},{"location":"functions/automation_policies/#adding-windows-patch-management-policy","text":"Under the Automation Manager you can create a Patch Policy and control what patches are applied, when, and if the computer is rebooted after. Note Most \"regular\" Windows patches are listed in the \"Other\" category.","title":"Adding Windows Patch Management Policy"},{"location":"functions/custom_fields/","text":"Custom Fields \u00b6 Info v0.5.0 adds support for custom fields to be used in the dashboard and in scripts. Warning \\ is an escape character, if you want to use that in a custom field you will need to use \\\\ instead Adding Custom Fields \u00b6 In the dashboard, go to Settings > Global Settings > Custom Fields and click Add Custom Field . Info Everything between {{}} is CaSe sEnSiTive The following options are available to configure on custom fields: Model - This is the object that the custom field will be added to. The available options are: Agent Site Client Name - Sets the name of the custom field. This will be used to identify the custom field in the dashboard and in scripts. Field Type - Sets the type of field. Below are the allowed types. Text Number Single select dropdown Multi-select dropdown Checkbox ( 1 = Checked or $null = Unchecked) DateTime Input Options - Only available on Single and Multiple-select dropdowns . Sets the options to choose from. Default Value - If no value is found when looking up the custom field; this value will instead be supplied. Required - This makes the field required when adding new Clients, Sites, and Agents. If this is set a default value will need to be set as well Hide in Dashboard - This will not show the custom field in Client, Site, and Agent forms in the dashboard. This is useful if the custom field's value is updated by a collector task and only supplied to scripts. Using Custom Fields in the Dashboard \u00b6 Once the custom fields are added, they will show up in the Client, Site, and Agent Add/Edit forms. Using Custom Fields in Scripts \u00b6 Tactical RMM allows for passing various database fields for Clients, Sites, and Agents in scripts. This includes custom fields as well! Warning The characters within the brackets is case-sensitive! In your script's arguments, use the notation {{client.AV_KEY}} . This will lookup the client for the agent that the script is running on and find the custom field named AV_KEY and replace that with the value. The same is also true for {{site.no_patching}} and {{agent.Another Field}} For more information see SCRIPTING PAGE Populating Custom Fields automatically \u00b6 Tactical RMM supports automatically collecting information and saving them directly to custom fields. This is made possible by creating Collector Tasks . These are just normal Automated Tasks, but instead they will save the last line of the standard output to the custom field that is selected. Info To populate a multiple select custom field, return a string with the options separated by a comma \"This,will,be,an,array\" For more information See Collector Tasks","title":"Custom Fields"},{"location":"functions/custom_fields/#custom-fields","text":"Info v0.5.0 adds support for custom fields to be used in the dashboard and in scripts. Warning \\ is an escape character, if you want to use that in a custom field you will need to use \\\\ instead","title":"Custom Fields"},{"location":"functions/custom_fields/#adding-custom-fields","text":"In the dashboard, go to Settings > Global Settings > Custom Fields and click Add Custom Field . Info Everything between {{}} is CaSe sEnSiTive The following options are available to configure on custom fields: Model - This is the object that the custom field will be added to. The available options are: Agent Site Client Name - Sets the name of the custom field. This will be used to identify the custom field in the dashboard and in scripts. Field Type - Sets the type of field. Below are the allowed types. Text Number Single select dropdown Multi-select dropdown Checkbox ( 1 = Checked or $null = Unchecked) DateTime Input Options - Only available on Single and Multiple-select dropdowns . Sets the options to choose from. Default Value - If no value is found when looking up the custom field; this value will instead be supplied. Required - This makes the field required when adding new Clients, Sites, and Agents. If this is set a default value will need to be set as well Hide in Dashboard - This will not show the custom field in Client, Site, and Agent forms in the dashboard. This is useful if the custom field's value is updated by a collector task and only supplied to scripts.","title":"Adding Custom Fields"},{"location":"functions/custom_fields/#using-custom-fields-in-the-dashboard","text":"Once the custom fields are added, they will show up in the Client, Site, and Agent Add/Edit forms.","title":"Using Custom Fields in the Dashboard"},{"location":"functions/custom_fields/#using-custom-fields-in-scripts","text":"Tactical RMM allows for passing various database fields for Clients, Sites, and Agents in scripts. This includes custom fields as well! Warning The characters within the brackets is case-sensitive! In your script's arguments, use the notation {{client.AV_KEY}} . This will lookup the client for the agent that the script is running on and find the custom field named AV_KEY and replace that with the value. The same is also true for {{site.no_patching}} and {{agent.Another Field}} For more information see SCRIPTING PAGE","title":"Using Custom Fields in Scripts"},{"location":"functions/custom_fields/#populating-custom-fields-automatically","text":"Tactical RMM supports automatically collecting information and saving them directly to custom fields. This is made possible by creating Collector Tasks . These are just normal Automated Tasks, but instead they will save the last line of the standard output to the custom field that is selected. Info To populate a multiple select custom field, return a string with the options separated by a comma \"This,will,be,an,array\" For more information See Collector Tasks","title":"Populating Custom Fields automatically"},{"location":"functions/database_maintenance/","text":"Database Maintenance \u00b6 Tactical RMM ships with data retention defaults that will work fine for most environments. There are situations, depending on the number of agents and checks configured, that these defaults need to be tweaked to improve performance. Adjusting Data Retention \u00b6 In the dashboard, go to Settings > Global Settings > Retention The options are: Check History - Will delete check history older than the days specified (default is 30 days). Resolved Alerts - Will delete alerts that have been resolved older than the days specified (default is disabled). Agent History - Will delete agent command/script history older than the days specified (default is 60 days). Debug Logs - Will delete agent debug logs older than the days specified (default is 30 days) Audit Logs Will delete Tactical RMM audit logs older than the days specified (default is disabled) To disable database pruning on a table, set the days to 0.","title":"Database Maintenance"},{"location":"functions/database_maintenance/#database-maintenance","text":"Tactical RMM ships with data retention defaults that will work fine for most environments. There are situations, depending on the number of agents and checks configured, that these defaults need to be tweaked to improve performance.","title":"Database Maintenance"},{"location":"functions/database_maintenance/#adjusting-data-retention","text":"In the dashboard, go to Settings > Global Settings > Retention The options are: Check History - Will delete check history older than the days specified (default is 30 days). Resolved Alerts - Will delete alerts that have been resolved older than the days specified (default is disabled). Agent History - Will delete agent command/script history older than the days specified (default is 60 days). Debug Logs - Will delete agent debug logs older than the days specified (default is 30 days) Audit Logs Will delete Tactical RMM audit logs older than the days specified (default is disabled) To disable database pruning on a table, set the days to 0.","title":"Adjusting Data Retention"},{"location":"functions/django_admin/","text":"Django Admin \u00b6 Warning Do not use the django admin unless you really know what you're doing. You should never need to access it unless you are familiar with django or are instructed to do something here by one of the developers. The django admin is basically a web interface for the postgres database. As of Tactical RMM v0.4.19, the django admin is disabled by default. To enable it, edit /rmm/api/tacticalrmm/tacticalrmm/local_settings.py and change ADMIN_ENABLED from False to True then sudo systemctl restart rmm.service Login to the django admin using the same credentials as your normal web ui login. If you did not save the django admin url (which was printed out at the end of the install script), check the local_settings.py file referenced above for the ADMIN_URL variable. Then simply append the value of this variable to your api domain ( https://api.EXAMPLE.COM/ ) to get the full url. Example of a full django admin url: https://api.example.com/JwboKNYb3v6K93Fvtcz0G3vUM17LMTSZggOUAxa97jQfAh0P5xosEk7u2PPkjEfdOtucUp/","title":"Django Admin"},{"location":"functions/django_admin/#django-admin","text":"Warning Do not use the django admin unless you really know what you're doing. You should never need to access it unless you are familiar with django or are instructed to do something here by one of the developers. The django admin is basically a web interface for the postgres database. As of Tactical RMM v0.4.19, the django admin is disabled by default. To enable it, edit /rmm/api/tacticalrmm/tacticalrmm/local_settings.py and change ADMIN_ENABLED from False to True then sudo systemctl restart rmm.service Login to the django admin using the same credentials as your normal web ui login. If you did not save the django admin url (which was printed out at the end of the install script), check the local_settings.py file referenced above for the ADMIN_URL variable. Then simply append the value of this variable to your api domain ( https://api.EXAMPLE.COM/ ) to get the full url. Example of a full django admin url: https://api.example.com/JwboKNYb3v6K93Fvtcz0G3vUM17LMTSZggOUAxa97jQfAh0P5xosEk7u2PPkjEfdOtucUp/","title":"Django Admin"},{"location":"functions/email_alert/","text":"Email Setup \u00b6 Under Settings > Global Settings > Email Alerts Setting up Tactical RMM Alerts using Open Relay \u00b6 MS 365 in this example Log into Tactical RMM Go to Settings Go to Global Settings Click on Alerts Enter the email address (or addresses) you want to receive alerts to eg info@EXAMPLE.COM Enter the from email address (this will need to be part of your domain on 365, however it doesn\u2019t need a license) eg rmm@EXAMPLE.COM Go to MXToolbox.com and enter your domain name in, copy the hostname from there and paste into Host Change the port to 25 Click Save Login to admin.microsoft.com Go to Exchange Admin Centre Go to \u201cConnectors\u201d under \u201cMail Flow\u201d Click to + button In From: select \u201cYour organisations email server\u201d In To: select \u201cOffice 365\u201d Click Next In the Name type in RMM Click By Verifying that the IP address\u2026\u2026 Click + Enter your IP and Click OK Click Next Click OK Setting up Tactical RMM Alerts using username & password \u00b6 Gmail in this example Log into Tactical RMM Go to Settings Go to Global Settings Click on Alerts Enter the email address (or addresses) you want to receive alerts to eg info@EXAMPLE.COM Enter the from email address myrmm@gmail.com Tick the box \u201cMy server requires Authentication\u201d Enter your username e.g. myrmm@gmail.com Enter your password Change the port to 587 Click Save","title":"Email Setup"},{"location":"functions/email_alert/#email-setup","text":"Under Settings > Global Settings > Email Alerts","title":"Email Setup"},{"location":"functions/email_alert/#setting-up-tactical-rmm-alerts-using-open-relay","text":"MS 365 in this example Log into Tactical RMM Go to Settings Go to Global Settings Click on Alerts Enter the email address (or addresses) you want to receive alerts to eg info@EXAMPLE.COM Enter the from email address (this will need to be part of your domain on 365, however it doesn\u2019t need a license) eg rmm@EXAMPLE.COM Go to MXToolbox.com and enter your domain name in, copy the hostname from there and paste into Host Change the port to 25 Click Save Login to admin.microsoft.com Go to Exchange Admin Centre Go to \u201cConnectors\u201d under \u201cMail Flow\u201d Click to + button In From: select \u201cYour organisations email server\u201d In To: select \u201cOffice 365\u201d Click Next In the Name type in RMM Click By Verifying that the IP address\u2026\u2026 Click + Enter your IP and Click OK Click Next Click OK","title":"Setting up Tactical RMM Alerts using Open Relay"},{"location":"functions/email_alert/#setting-up-tactical-rmm-alerts-using-username-password","text":"Gmail in this example Log into Tactical RMM Go to Settings Go to Global Settings Click on Alerts Enter the email address (or addresses) you want to receive alerts to eg info@EXAMPLE.COM Enter the from email address myrmm@gmail.com Tick the box \u201cMy server requires Authentication\u201d Enter your username e.g. myrmm@gmail.com Enter your password Change the port to 587 Click Save","title":"Setting up Tactical RMM Alerts using username &amp; password"},{"location":"functions/examples/","text":"Examples \u00b6 Create Run URL Action to Computer support page \u00b6 This will create a URL link that will take you to the support page for a computer based on the computers Serial Number Goto Settings | Global Settings | Custom Fields Under Agents tab Add Custom Field (CaSe SeNsItIve) Create Task (best to use Settings | Automation Manager if you want to apply it to all computers). Add script that has an output of the data you want. Create URL Action (under Settings | Global Settings | URL ACTIONS ) for Manufacturer websites Dell Support Page https://www.dell.com/support/home/en-us/product-support/servicetag/{{agent.SerialNumber}}/overview Lenovo Support Page https://pcsupport.lenovo.com/us/en/products/{{agent.SerialNumber}} HP Support Page It gives an errors because the product model doesn't match the serial number. If you figure out a better link please let us know! :) https://support.hp.com/us-en/product/hp-pro-3500-microtower-pc/5270849/model/5270850?serialnumber={{agent.SerialNumber}}","title":"Examples"},{"location":"functions/examples/#examples","text":"","title":"Examples"},{"location":"functions/examples/#create-run-url-action-to-computer-support-page","text":"This will create a URL link that will take you to the support page for a computer based on the computers Serial Number Goto Settings | Global Settings | Custom Fields Under Agents tab Add Custom Field (CaSe SeNsItIve) Create Task (best to use Settings | Automation Manager if you want to apply it to all computers). Add script that has an output of the data you want. Create URL Action (under Settings | Global Settings | URL ACTIONS ) for Manufacturer websites Dell Support Page https://www.dell.com/support/home/en-us/product-support/servicetag/{{agent.SerialNumber}}/overview Lenovo Support Page https://pcsupport.lenovo.com/us/en/products/{{agent.SerialNumber}} HP Support Page It gives an errors because the product model doesn't match the serial number. If you figure out a better link please let us know! :) https://support.hp.com/us-en/product/hp-pro-3500-microtower-pc/5270849/model/5270850?serialnumber={{agent.SerialNumber}}","title":"Create Run URL Action to Computer support page"},{"location":"functions/keystore/","text":"Global Key Store \u00b6 The key store is used to store values that need to be referenced from multiple scripts. This also allows for easy updating of values since scripts reference the values at runtime. To Add/Edit values in the Global Key Store, browse to Settings > Global Settings > KeyStore . You can reference values from the key store in script arguments by using the {{global.key_name}} syntax. Info Everything between {{}} is CaSe sEnSiTive See Scripts for more information.","title":"Global Keystore"},{"location":"functions/keystore/#global-key-store","text":"The key store is used to store values that need to be referenced from multiple scripts. This also allows for easy updating of values since scripts reference the values at runtime. To Add/Edit values in the Global Key Store, browse to Settings > Global Settings > KeyStore . You can reference values from the key store in script arguments by using the {{global.key_name}} syntax. Info Everything between {{}} is CaSe sEnSiTive See Scripts for more information.","title":"Global Key Store"},{"location":"functions/maintenance_mode/","text":"Maintenance Mode \u00b6 Enabling maintenance mode for an agent will prevent any overdue/check/task email/sms alerts from being sent. It will also prevent clients/sites/agents from showing up as red in the dashboard if they have any failing checks or are overdue. To enable maintenance mode for all agents in a client/site, Right Click on a client / site and choose Enable Maintenance Mode To enable maintenance mode for a single agent, Right Click on the agent and choose Enable Maintenance Mode","title":"Maintenance Mode"},{"location":"functions/maintenance_mode/#maintenance-mode","text":"Enabling maintenance mode for an agent will prevent any overdue/check/task email/sms alerts from being sent. It will also prevent clients/sites/agents from showing up as red in the dashboard if they have any failing checks or are overdue. To enable maintenance mode for all agents in a client/site, Right Click on a client / site and choose Enable Maintenance Mode To enable maintenance mode for a single agent, Right Click on the agent and choose Enable Maintenance Mode","title":"Maintenance Mode"},{"location":"functions/permissions/","text":"User Roles and Permissions \u00b6 Permission Manager \u00b6 Make sure you've setup at least 1 valid (Super User aka Administrator) role under Settings > Permission Manager Login as usual Tactical user Go to Settings - Permissions Manager Click New Role You can all the role anything, I called it Admins Tick the Super User Box/or relevant permissions required Click Save then exit Permissions Manager Go to Settings - Users Open current logged in user/or any other user and assign role (created above step 6) in the Role drop down box. Click Save Once you've set that up a Super User role and assigned your primary user, you can create other Roles with more limited access.","title":"Permissions"},{"location":"functions/permissions/#user-roles-and-permissions","text":"","title":"User Roles and Permissions"},{"location":"functions/permissions/#permission-manager","text":"Make sure you've setup at least 1 valid (Super User aka Administrator) role under Settings > Permission Manager Login as usual Tactical user Go to Settings - Permissions Manager Click New Role You can all the role anything, I called it Admins Tick the Super User Box/or relevant permissions required Click Save then exit Permissions Manager Go to Settings - Users Open current logged in user/or any other user and assign role (created above step 6) in the Role drop down box. Click Save Once you've set that up a Super User role and assigned your primary user, you can create other Roles with more limited access.","title":"Permission Manager"},{"location":"functions/remote_bg/","text":"Remote Background \u00b6 To access: Right click on an agent > Remote Background Services Tab \u00b6 Right click on a service to show the context menu where you can start/stop/restart services: Click Service Details to bring up the details tab where you can edit more service options: Processes Tab \u00b6 A very basic task manager that shows real time process usage. Right click on a process to end the task:","title":"Remote Background"},{"location":"functions/remote_bg/#remote-background","text":"To access: Right click on an agent > Remote Background","title":"Remote Background"},{"location":"functions/remote_bg/#services-tab","text":"Right click on a service to show the context menu where you can start/stop/restart services: Click Service Details to bring up the details tab where you can edit more service options:","title":"Services Tab"},{"location":"functions/remote_bg/#processes-tab","text":"A very basic task manager that shows real time process usage. Right click on a process to end the task:","title":"Processes Tab"},{"location":"functions/scripting/","text":"Scripting \u00b6 Tactical RMM supports uploading existing scripts or adding new scripts right in the dashboard. Languages supported are: Powershell Windows Batch Python Adding Scripts \u00b6 In the dashboard, browse to Settings > Scripts Manager . Click the New button and select either Upload Script or New Script. The available options for scripts are: Name - This identifies the script in the dashboard Description - Optional description for the script Category - Optional way to group similar scripts together. Type - This sets the language of the script. Available options are: Powershell Windows Batch Python Script Arguments - Optional way to set default arguments for scripts. These will auto populate when running scripts and can be changed at runtime. Default Timeout - Sets the default timeout of the script and will stop script execution if the duration surpasses the configured timeout. Can be changed at script runtime Favorite - Favorites the script. Downloading Scripts \u00b6 To download a Tactical RMM Script, click on the script in the Script Manager to select it. Then click the Download Script button on the top. You can also right-click on the script and select download Community Scripts \u00b6 These are script that are built into Tactical RMM. They are provided and maintained by the Tactical RMM community. These scripts are updated whenever Tactical RMM is updated and can't be modified or deleted in the dashboard. Hiding Community Scripts \u00b6 You can choose to hide community script throughout the dashboard by opening Script Manager and clicking the Show/Hide Community Scripts toggle button. Using Scripts \u00b6 Manual run on agent \u00b6 In the Agent Table , you can right-click on an agent and select Run Script . You have the options of: Wait for Output - Runs the script and waits for the script to finish running and displays the output. Fire and Forget - Starts the script and does not wait for output. Email Output - Starts the script and will email the output. Allows for using the default email address in the global settings or adding a new email address. Save as Note - Saves the output as a Note that can be views in the agent Notes tab Collector - Saves to output to the specified custom field. There is also an option on the agent context menu called Run Favorited Script . This will pre-populate the script run dialog with the script of your choice. Script Execution Process Script Arguments \u00b6 The Script Arguments field should be pre-filled with information for any script that can accept or requires parameters. < Required Parameter Name > < string > [ - < Optional Parameter Name > < string > ] [ - < string > { ( < default string if not specified > ) | < string2 > | < string3 > } ] Where [] indicates an optional parameter and {} indicates a parameter with several preconfigured parameter and () indicates a default parameter if none is specified Bulk Run on agents \u00b6 Under the tools menu -> Run Bulk Script you can execute scripts against Clients/Sites/Selected Agents/All based on All/Servers/Workstations Automated Tasks \u00b6 Tactical RMM allows scheduling tasks to run on agents. This leverages the Windows Task Scheduler and has the same scheduling options. See Automated Tasks for configuring automated tasks Script Checks \u00b6 Scripts can also be run periodically on an agent and trigger an alert if it fails. Alert Failure/Resolve Actions \u00b6 Scripts can be triggered when an alert is triggered and resolved. This script will run on any online agent and supports passing the alert information as arguments. For configuring Alert Templates , see Alerting See below for populating dashboard data in scripts and the available options. Using dashboard data in scripts \u00b6 Tactical RMM allows passing in dashboard data to scripts as arguments. The below powershell arguments will get the client name of the agent and also the agent's public IP address -ClientName {{client.name}} -PublicIP {{agent.public_ip}} Info Everything between {{}} is CaSe sEnSiTive See a full list of possible built-in variables Here Getting Custom Field values \u00b6 Tactical RMM supports pulling data from custom fields using the {{model.custom_field_name}} syntax. See Using Custom Fields in Scripts Getting values from the Global Keystore \u00b6 Tactical RMM supports getting values from the global key store using the {{global.key_name}} syntax See Global Keystore . Example Powershell Script \u00b6 The below script takes five named values. The arguments will look like this: -SiteName {{site.name}} -ClientName {{client.name}} -PublicIP {{agent.public_ip}} -CustomField {{client.AV_KEY}} -Global {{global.API_KEY}} param ( [string] $SiteName , [string] $ClientName , [string] $PublicIp , [string] $CustomField , [string] $Global ) Write-Output \"Site: $SiteName\" Write-Output \"Client: $ClientName\" Write-Output \"Public IP: $PublicIp\" Write-Output \"Custom Fields: $CustomField\" Write-Output \"Global: $Global\" Script Snippets \u00b6 Script Snippets allow you to create common code blocks or comments and apply them to all of your scripts. This could be initialization code, common error checking, or even code comments. Adding Script Snippets \u00b6 In the dashboard, browse to Settings > Scripts Manager . Click the Script Snippets button. Name - This identifies the script snippet in the dashboard Description - Optional description for the script snippet Shell - This sets the language of the script. Available options are: Powershell Windows Batch Python Using Script Snippets \u00b6 When editing a script, you can add template tags to the script body that contains the script snippet name. For example, if a script snippet exists with the name \"Check WMF\", you would put {{Check WMF}} in the script body and the snippet code will be replaced. Info Everything between {{}} is CaSe sEnSiTive The template tags will only be visible when Editing the script. When downloading or viewing the script code the template tags will be replaced with the script snippet code.","title":"Scripting"},{"location":"functions/scripting/#scripting","text":"Tactical RMM supports uploading existing scripts or adding new scripts right in the dashboard. Languages supported are: Powershell Windows Batch Python","title":"Scripting"},{"location":"functions/scripting/#adding-scripts","text":"In the dashboard, browse to Settings > Scripts Manager . Click the New button and select either Upload Script or New Script. The available options for scripts are: Name - This identifies the script in the dashboard Description - Optional description for the script Category - Optional way to group similar scripts together. Type - This sets the language of the script. Available options are: Powershell Windows Batch Python Script Arguments - Optional way to set default arguments for scripts. These will auto populate when running scripts and can be changed at runtime. Default Timeout - Sets the default timeout of the script and will stop script execution if the duration surpasses the configured timeout. Can be changed at script runtime Favorite - Favorites the script.","title":"Adding Scripts"},{"location":"functions/scripting/#downloading-scripts","text":"To download a Tactical RMM Script, click on the script in the Script Manager to select it. Then click the Download Script button on the top. You can also right-click on the script and select download","title":"Downloading Scripts"},{"location":"functions/scripting/#community-scripts","text":"These are script that are built into Tactical RMM. They are provided and maintained by the Tactical RMM community. These scripts are updated whenever Tactical RMM is updated and can't be modified or deleted in the dashboard.","title":"Community Scripts"},{"location":"functions/scripting/#hiding-community-scripts","text":"You can choose to hide community script throughout the dashboard by opening Script Manager and clicking the Show/Hide Community Scripts toggle button.","title":"Hiding Community Scripts"},{"location":"functions/scripting/#using-scripts","text":"","title":"Using Scripts"},{"location":"functions/scripting/#manual-run-on-agent","text":"In the Agent Table , you can right-click on an agent and select Run Script . You have the options of: Wait for Output - Runs the script and waits for the script to finish running and displays the output. Fire and Forget - Starts the script and does not wait for output. Email Output - Starts the script and will email the output. Allows for using the default email address in the global settings or adding a new email address. Save as Note - Saves the output as a Note that can be views in the agent Notes tab Collector - Saves to output to the specified custom field. There is also an option on the agent context menu called Run Favorited Script . This will pre-populate the script run dialog with the script of your choice. Script Execution Process","title":"Manual run on agent"},{"location":"functions/scripting/#script-arguments","text":"The Script Arguments field should be pre-filled with information for any script that can accept or requires parameters. < Required Parameter Name > < string > [ - < Optional Parameter Name > < string > ] [ - < string > { ( < default string if not specified > ) | < string2 > | < string3 > } ] Where [] indicates an optional parameter and {} indicates a parameter with several preconfigured parameter and () indicates a default parameter if none is specified","title":"Script Arguments"},{"location":"functions/scripting/#bulk-run-on-agents","text":"Under the tools menu -> Run Bulk Script you can execute scripts against Clients/Sites/Selected Agents/All based on All/Servers/Workstations","title":"Bulk Run on agents"},{"location":"functions/scripting/#automated-tasks","text":"Tactical RMM allows scheduling tasks to run on agents. This leverages the Windows Task Scheduler and has the same scheduling options. See Automated Tasks for configuring automated tasks","title":"Automated Tasks"},{"location":"functions/scripting/#script-checks","text":"Scripts can also be run periodically on an agent and trigger an alert if it fails.","title":"Script Checks"},{"location":"functions/scripting/#alert-failureresolve-actions","text":"Scripts can be triggered when an alert is triggered and resolved. This script will run on any online agent and supports passing the alert information as arguments. For configuring Alert Templates , see Alerting See below for populating dashboard data in scripts and the available options.","title":"Alert Failure/Resolve Actions"},{"location":"functions/scripting/#using-dashboard-data-in-scripts","text":"Tactical RMM allows passing in dashboard data to scripts as arguments. The below powershell arguments will get the client name of the agent and also the agent's public IP address -ClientName {{client.name}} -PublicIP {{agent.public_ip}} Info Everything between {{}} is CaSe sEnSiTive See a full list of possible built-in variables Here","title":"Using dashboard data in scripts"},{"location":"functions/scripting/#getting-custom-field-values","text":"Tactical RMM supports pulling data from custom fields using the {{model.custom_field_name}} syntax. See Using Custom Fields in Scripts","title":"Getting Custom Field values"},{"location":"functions/scripting/#getting-values-from-the-global-keystore","text":"Tactical RMM supports getting values from the global key store using the {{global.key_name}} syntax See Global Keystore .","title":"Getting values from the Global Keystore"},{"location":"functions/scripting/#example-powershell-script","text":"The below script takes five named values. The arguments will look like this: -SiteName {{site.name}} -ClientName {{client.name}} -PublicIP {{agent.public_ip}} -CustomField {{client.AV_KEY}} -Global {{global.API_KEY}} param ( [string] $SiteName , [string] $ClientName , [string] $PublicIp , [string] $CustomField , [string] $Global ) Write-Output \"Site: $SiteName\" Write-Output \"Client: $ClientName\" Write-Output \"Public IP: $PublicIp\" Write-Output \"Custom Fields: $CustomField\" Write-Output \"Global: $Global\"","title":"Example Powershell Script"},{"location":"functions/scripting/#script-snippets","text":"Script Snippets allow you to create common code blocks or comments and apply them to all of your scripts. This could be initialization code, common error checking, or even code comments.","title":"Script Snippets"},{"location":"functions/scripting/#adding-script-snippets","text":"In the dashboard, browse to Settings > Scripts Manager . Click the Script Snippets button. Name - This identifies the script snippet in the dashboard Description - Optional description for the script snippet Shell - This sets the language of the script. Available options are: Powershell Windows Batch Python","title":"Adding Script Snippets"},{"location":"functions/scripting/#using-script-snippets","text":"When editing a script, you can add template tags to the script body that contains the script snippet name. For example, if a script snippet exists with the name \"Check WMF\", you would put {{Check WMF}} in the script body and the snippet code will be replaced. Info Everything between {{}} is CaSe sEnSiTive The template tags will only be visible when Editing the script. When downloading or viewing the script code the template tags will be replaced with the script snippet code.","title":"Using Script Snippets"},{"location":"functions/settings_override/","text":"Settings Override \u00b6 Browser token expiration \u00b6 The default browser token expiration is set to 5 hours. See this ticket for reference. To change it, add the following code block to the end of /rmm/api/tacticalrmm/tacticalrmm/local_settings.py from datetime import timedelta REST_KNOX = { \"TOKEN_TTL\" : timedelta ( days = 30 ), \"AUTO_REFRESH\" : True , \"MIN_REFRESH_INTERVAL\" : 600 , } Change (days=30) to whatever you prefer. Then run sudo systemctl restart rmm.service for changes to take effect.","title":"Settings Override"},{"location":"functions/settings_override/#settings-override","text":"","title":"Settings Override"},{"location":"functions/settings_override/#browser-token-expiration","text":"The default browser token expiration is set to 5 hours. See this ticket for reference. To change it, add the following code block to the end of /rmm/api/tacticalrmm/tacticalrmm/local_settings.py from datetime import timedelta REST_KNOX = { \"TOKEN_TTL\" : timedelta ( days = 30 ), \"AUTO_REFRESH\" : True , \"MIN_REFRESH_INTERVAL\" : 600 , } Change (days=30) to whatever you prefer. Then run sudo systemctl restart rmm.service for changes to take effect.","title":"Browser token expiration"},{"location":"functions/url_actions/","text":"URL Actions \u00b6 URL Actions will run against an agent and open a configured URL in a new browser tab or window. This allows for integrations with various remote viewing softwares. Adding URL Actions \u00b6 In the dashboard, browse to Settings > Global Settings > URL Actions . The available options are: Name - This identifies the URL Action in other parts of the dashboard Description - Optional description for the URL Action Pattern - This is the actual URL pattern that will open in the new browser tab/window. This field supports variables from the Global Keystore and Script Variables . URL Pattern Example \u00b6 Info Variable names are case sensitive ! https://remote.example.com/connect?API_KEY={{global.API_KEY}}&agent_id={{agent.Remote ID}} The above example uses a value defined in the global keystore named API_KEY and an Agent custom field called remote id . The URLs are properly encoded to work with any special characters or spaces returned in the values. Running URL Actions \u00b6 In the agent table, right-click on the Agent and select Run URL Action and select the action to run","title":"URL Actions"},{"location":"functions/url_actions/#url-actions","text":"URL Actions will run against an agent and open a configured URL in a new browser tab or window. This allows for integrations with various remote viewing softwares.","title":"URL Actions"},{"location":"functions/url_actions/#adding-url-actions","text":"In the dashboard, browse to Settings > Global Settings > URL Actions . The available options are: Name - This identifies the URL Action in other parts of the dashboard Description - Optional description for the URL Action Pattern - This is the actual URL pattern that will open in the new browser tab/window. This field supports variables from the Global Keystore and Script Variables .","title":"Adding URL Actions"},{"location":"functions/url_actions/#url-pattern-example","text":"Info Variable names are case sensitive ! https://remote.example.com/connect?API_KEY={{global.API_KEY}}&agent_id={{agent.Remote ID}} The above example uses a value defined in the global keystore named API_KEY and an Agent custom field called remote id . The URLs are properly encoded to work with any special characters or spaces returned in the values.","title":"URL Pattern Example"},{"location":"functions/url_actions/#running-url-actions","text":"In the agent table, right-click on the Agent and select Run URL Action and select the action to run","title":"Running URL Actions"},{"location":"functions/user_ui/","text":"User Interface Preferences \u00b6 Click on your username at the top right of the dashboard > Preferences:","title":"User Interface Preferences"},{"location":"functions/user_ui/#user-interface-preferences","text":"Click on your username at the top right of the dashboard > Preferences:","title":"User Interface Preferences"},{"location":"support_templates/install_checklist/","text":"Windows PC Local administrator account logged in on PC vps admin portal logged in Already purchased domain name with dns provider admin portal logged in putty downloaded: https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html Local LAN only access Nothing else needed Remote agents Firewall admin connection info for configuration Need Proxy?","title":"Install checklist"},{"location":"support_templates/support_login_checklist/","text":"From a problem agent make sure these are pre-setup: PC with local administrator account logged in Logged into your TRMM server web portal with an admin account (eg. https://rmm.example.com) SSH connection established to your TRMM server with account used to install tactical","title":"Support login checklist"}]}